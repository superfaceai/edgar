# Getting started
API access to your recruiting data

Need to display your positions in different ways, or to extract additional information from your [Workable](https://www.workable.com) account? We provide you with an API that gives you full control over your data.

The Workable API can be used in the following ways:

- Extract information about your: 
  - [account](ref:accounts)
  - [hiring members](ref:members) and [recruiters](doc:recruiters)
  - [pipeline stages](ref:stages)
  - [jobs](ref:jobs) and [questions](ref:job-questions)
  - scheduled [events](ref:events) 
  - [job's](ref:job-activities) and/or [candidate's](ref:candidate-activities) activity
- Manage your candidates by:
  - Fetching [candidates](ref:job-candidates-index)
  - Extracting detail [candidate](ref:job-candidates-show) info
  - [Creating candidates](ref:job-candidates-create)
  - [Updating candidates](ref:update-candidate)
  - Execute various actions on candidates e.g. [copy](doc:copy-candidate), [relocate](ref:relocate-candidates) or [disqualify](ref:disqualify-candidate) 
  - Adding [comments](ref:comment-on-candidate) or [ratings](ref:rate-candidate) 

Currently we do not support the following:

- Creating and viewing candidates in the Talent pool

> üöß Notes
> 
> - Workable does not support Cross-Origin Resource Sharing (CORS)
> - The resource IDs exposed in the API are not the same as in the application for non-disclosure reasons

## Generate an API access token

This guide shows how to generate an API access token for your Workable account.

To start, open the drop-down menu on the top right of your screen and select ‚ÄúIntegrations‚Äù or press [here](https://www.workable.com/backend/account/integrations):

![](https://files.readme.io/1a4f1f5-integrations_small.png "integrations_small.png")

Now click on the ‚ÄúGenerate new token‚Äù button:

![](https://files.readme.io/7d9ac5c-Screenshot_2022-08-11_at_10.39.40_AM.png "Screenshot 2022-08-11 at 10.39.40 AM.png")

Once you click the generate button, you‚Äôll see the new access token being generated:

![](https://files.readme.io/59ebf0e-Screenshot_2022-08-11_at_10.40.04_AM.png "Screenshot 2022-08-11 at 10.40.04 AM.png")

If you're using Mac OS X or Linux, test it on the spot just by typing the following command in your terminal window (remember to replace the ‚Äòaccount subdomain‚Äô):

```shell
curl -H "Authorization:Bearer <ACCESS TOKEN>" 
     https://<account subdomain>.workable.com/spi/v3/jobs
```

You will also need the account subdomain which you can find in the company profile settings page:

![](https://files.readme.io/6b1bcd3-Screenshot_2022-08-11_at_12.34.55_PM.png "Screenshot 2022-08-11 at 12.34.55 PM.png")

> ‚ùóÔ∏è Revoking The Access Token
> 
> Be aware that you can revoke this access token anytime, but if you decide to proceed, every script or application that accesses the Workable API through this token will stop functioning. To keep things running smoothly after revoking your current token, you will have to generate a new access token and update every script or application bound to the previous one.


================================================================================

# Partner Token
Build a third party integration using the Partner Token

The Partner Token is an authorization token used specifically for an integration. Unlike the Access Token, the Partner Token allows you to only use the endpoints associated with the scopes your application needs. Those scopes will be determined during the development of your integration.

> ‚ùóÔ∏è Please note that the Partner token can only be used by official third party integrations. You can apply to become an official partner [here](https://developers.workable.com/partner-program/apply).

To generate a Partner Token, visit the Integrations page in Workable, find the integration and click "Generate Token".

![](https://files.readme.io/51e1d5d-Screenshot_2022-08-11_at_12.48.25_PM.png "Screenshot 2022-08-11 at 12.48.25 PM.png")

Your Partner Token will be generated and you'll be able to see the permissions attached to it. It can be revoked at any time.

![](https://files.readme.io/026be71-Screenshot_2022-08-11_at_12.50.03_PM.png "Screenshot 2022-08-11 at 12.50.03 PM.png")

> üöß Using the Partner Token
> 
> Third party providers using a Partner token will need to set the Header to `X-WORKABLE-CLIENT-ID`: `UID` on their calls. To retrieve your Client ID (UID), please contact partners@workable.com.

<div class="rdmd-pinned">

```shell
curl  -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Partner Token>" \
      -H "X-WORKABLE-CLIENT-ID: <UID>" \
https://<subdomain>.workable.com/spi/v3/jobs?state=published
```

</div>


================================================================================

# Rate limiting

Rate limiting of the API is based on client basis (account, oauth application or partner) and apply to any call under this scope. Rate limits are divided into 10 seconds intervals and fall into the following categories:

| Access type      | Limit            | Interval   |
| :--------------- | :--------------- | :--------- |
| Account tokens   | **10 requests**  | 10 seconds |
| Oauth 2.0 tokens | **50 requests**  | 10 seconds |
| Partner tokens   | **50 requests**  | 10 seconds |

Clients that exceed the aforementioned rates will cause API to return an HTTP 429 response.  
All responses will include the following HTTP Headers which can help you build a proper throttling mechanism:

| Header                   | Description                                |
| :----------------------- | :----------------------------------------- |
| `X-Rate-Limit-Limit`     | The maximum allowed requests               |
| `X-Rate-Limit-Remaining` | Remaining requests in the current interval |
| `X-Rate-Limit-Reset`     | Timestamp of next interval                 |

> üöß Legacy partners
> 
> Third party providers that are still borrowing account tokens to access API can leverage the increased limits for partners by setting the header `X-WORKABLE-CLIENT-ID` on their calls. 
> 
> Please [contact us](mailto:integrations@workable.com) to receive the client ID if you haven't received it yet or you build a new solution.


================================================================================

# What's new in v3

Version 3 is the latest API provided by Workable. 

## New features

Version 3 includes some new features that significantly improve the performance of the API. To be more specific latest version provides:

- paginated data for [jobs](/docs/jobs) and [candidates](/docs/job-candidates-index)
- scroll parameters `since_id` and `max_id`
- filter parameters `created_after` and `updated_after`
- reduced verbose candidate json on job [candidates](/docs/job-candidates-index) collection

## Breaking changes

> ‚ùóÔ∏è IMPORTANT UPDATES
> 
> The v1 & v2 APIs are now deprecated but will continue to function correctly. We highly recommend you to update to v3 in order to take advantage of the increased performance, improvements and new features.
> 
> **NOTE:** Updating your code to use the new v3 endpoints will require some changes to your code but we have tried to minimize the changes that you'll have to make.

## Common changes

- The `key` attributes are renamed to `id`
- Timestamp fields are rendered in [ISO 8601](https://en.wikipedia.org/?title=ISO_8601) format (e.g. 2015-06-08T00:00:00Z). Timezone is always UTC
- Empty string values are now returned as `null`
- Candidates are  now considered as 'uploaded' by default. You have to include the `sourced: false` in order to consider a candidate as applied. More details on this [here](http://workable.readme.io/docs/job-candidates-create).

## Candidates collection

In order to improve the overall performance of the candidates endpoint the following changes have been made since v2:

- Candidates are sorted by the time inserted on system, in ascending order (older candidates come first).
- Response contains a limited number of candidates. Number is controlled by the `limit` parameter (50 for default). More results can be fetched by following the `paging/next` url.
- The candidate json is limited to basic arguments. The following attributes are no longer returned: `address`, `phone`, `outbound_mailbox`, `cover_letter`, `summary`, `education_entries`, `exprerience_entries`, `skills`, `answers`, `resume_url`, `social_profiles`, `tags`. This information can be retrieved by the [candidate info](/docs/job-candidates-show) endpoint.

The following sample compares the candidate payload of v2 and v3.

```json v3
{
      "id": "3fc9a811",
      "name": "Mattias Avelin",
      "firstname": "Mattias",
      "lastname": "Avelin",
      "headline": "Software Engineer at Gears of Leo",
      "account": {
        "subdomain": "groove-tech",
        "name": "Groove Tech"
      },
      "job": {
        "shortcode": "GROOV005",
        "title": "Office Manager"
      },
      "stage": "Sourced",
      "disqualified": false,
      "disqualification_reason": null,
      "sourced": true,
      "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179135",
      "email": null,
      "domain": null,
      "created_at": "2015-07-09T08:54:12Z",
      "updated_at": "2015-07-09T08:54:16Z"
    }
```
```json v2
{
      "key": "3fc9a811",
      "name": "Mattias Avelin",
      "firstname": "Mattias",
      "lastname": "Avelin",
      "headline": "Software Engineer at Gears of Leo",
      "account": {
        "subdomain": "groove-tech",
        "name": "Groove Tech"
      },
      "job": {
        "shortcode": "GROOV005",
        "title": "Office Manager"
      },
      "stage": "Sourced",
      "disqualified": false,
      "sourced": true,
      "profile_url": "http://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179135",
      "address": "Stockholm, Sweden",
      "phone": "",
      "email": "",
      "outbound_mailbox": "6zz6frwg@outbound.workablestaging.mailgun.org",
      "domain": "",
      "created_at": "2015-07-09 08:54:12",
      "updated_at": "2015-07-09 08:54:16",
      "cover_letter": "",
      "summary": "Expert knowledge/experience in complex data migration, working with open source solutions (Linux, MySQL, Java, php, Apache, JBoss, TomCat etc.). Experienced in build systems capable of handling high transaction volumes. Experienced MySQL power-user. Worked with clients such as Tele2, Ericsson, Eniro, Bwin Games, SIX and others. Certified MySQL Developer.",
      "education_entries": [],
      "experience_entries": [
        {
          "title": "Software Engineer",
          "summary": "",
          "start_date": "2015-05-01",
          "end_date": "",
          "company": "Gears of Leo",
          "industry": "Gambling & Casinos",
          "current": true
        }
      ],
      "skills": [],
      "answers": [],
      "resume_url": "",
      "social_profiles": [
        {
          "type": "linkedin",
          "url": "https://www.linkedin.com/in/mattiasavelin"
        }
      ],
      "tags": []
    }
```

## Jobs collection

- Jobs are sorted by the time inserted on system, in ascending order (older jobs come first).
- Response contains a limited number of jobs. Number is controlled by the `limit` parameter (50 for default). More results can be fetched by following the `paging/next` url.
- The account specific attributes `name` and `description` are removed.

The following sample compares the job payload of v2 and v3.

```json v3
{
  "jobs": [
    {
      "id": "61884e2",
      "title": "Sales Intern",
      "full_title": "Sales Intern - US/3/SI",
      "shortcode": "GROOV003",
      "code": "US/3/SI",
      "state": "draft",
      "department": "Sales",
      "url": "https://groove-tech.workable.com/jobs/102268944",
      "application_url": "https://groove-tech.workable.com/jobs/102268944/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV003",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Oregon",
        "region_code": "OR",
        "city": "Portland",
        "zip_code": "97201",
        "telecommuting": false
      },
      "created_at": "2015-07-01T00:00:00Z"
    },
    {
      "id": "1166bf8c",
      "title": "Operations Manager",
      "full_title": "Operations Manager - US/02/CM",
      "shortcode": "GROOV001",
      "code": "US/02/CM",
      "state": "archived",
      "department": "Operations",
      "url": "https://groove-tech.workable.com/jobs/291945146",
      "application_url": "https://groove-tech.workable.com/jobs/291945146/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV001",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-05-07T00:00:00Z"
    },
    {
      "id": "167636b1",
      "title": "Office Manager",
      "full_title": "Office Manager - US/4/OM",
      "shortcode": "GROOV005",
      "code": "US/4/OM",
      "state": "published",
      "department": "Administration",
      "url": "https://groove-tech.workable.com/jobs/376844767",
      "application_url": "https://groove-tech.workable.com/jobs/376844767/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV005",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-06-06T00:00:00Z"
    },
    {
      "id": "2700d6df",
      "title": "Web Developer",
      "full_title": "Web Developer - US/2/WD",
      "shortcode": "GROOV002",
      "code": "US/2/WD",
      "state": "closed",
      "department": "Engineering",
      "url": "https://groove-tech.workable.com/jobs/654365197",
      "application_url": "https://groove-tech.workable.com/jobs/654365197/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV002",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-05-22T00:00:00Z"
    },
    {
      "id": "2b2d288d",
      "title": "Finance Manager",
      "full_title": "Finance Manager - UK/1/FM",
      "shortcode": "GROOV006",
      "code": "UK/1/FM",
      "state": "archived",
      "department": "Finance",
      "url": "https://groove-tech.workable.com/jobs/724378555",
      "application_url": "https://groove-tech.workable.com/jobs/724378555/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV006",
      "location": {
        "country": "United Kingdom",
        "country_code": "GB",
        "region": "London, City of",
        "region_code": "LND",
        "city": "London",
        "zip_code": "W1B 5 QA",
        "telecommuting": false
      },
      "created_at": "2015-06-06T00:00:00Z"
    }
  ],
  "paging": {
    "next": "https://www.workable.com/spi/v3/accounts/groove-tech/jobs?limit=5&since_id=34ed8eb6"
  }
}
```
```json v2
{
  "name": "Groove Tech",
  "description": "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>",
  "jobs": [
    {
      "key": "2b2d288d",
      "title": "Finance Manager",
      "full_title": "Finance Manager - UK/1/FM",
      "code": "UK/1/FM",
      "shortcode": "GROOV006",
      "state": "archived",
      "department": "Finance",
      "url": "http://groove-tech.workable.com/jobs/724378555",
      "application_url": "http://groove-tech.workable.com/jobs/724378555/candidates/new",
      "shortlink": "http://groove-tech.workable.com/j/GROOV006",
      "location": {
        "country": "United Kingdom",
        "country_code": "GB",
        "region": "London, City of",
        "region_code": "LND",
        "city": "London",
        "zip_code": "W1B 5 QA",
        "telecommuting": false
      },
      "created_at": "2015-06-06"
    },
    {
      "key": "34ed8eb6",
      "title": "Head of Account Management",
      "full_title": "Head of Account Management - US/4/HAM",
      "code": "US/4/HAM",
      "shortcode": "GROOV004",
      "state": "published",
      "department": "Sales",
      "url": "http://groove-tech.workable.com/jobs/887982564",
      "application_url": "http://groove-tech.workable.com/jobs/887982564/candidates/new",
      "shortlink": "http://groove-tech.workable.com/j/GROOV004",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "New York",
        "region_code": "NY",
        "city": "New York",
        "zip_code": "10001",
        "telecommuting": false
      },
      "created_at": "2015-06-06"
    },
    {
      "key": "167636b1",
      "title": "Office Manager",
      "full_title": "Office Manager - US/4/OM",
      "code": "US/4/OM",
      "shortcode": "GROOV005",
      "state": "published",
      "department": "Administration",
      "url": "http://groove-tech.workable.com/jobs/376844767",
      "application_url": "http://groove-tech.workable.com/jobs/376844767/candidates/new",
      "shortlink": "http://groove-tech.workable.com/j/GROOV005",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-06-06"
    },
    {
      "key": "1166bf8c",
      "title": "Operations Manager",
      "full_title": "Operations Manager - US/02/CM",
      "code": "US/02/CM",
      "shortcode": "GROOV001",
      "state": "archived",
      "department": "Operations",
      "url": "http://groove-tech.workable.com/jobs/291945146",
      "application_url": "http://groove-tech.workable.com/jobs/291945146/candidates/new",
      "shortlink": "http://groove-tech.workable.com/j/GROOV001",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-05-07"
    },
    {
      "key": "61884e2",
      "title": "Sales Intern",
      "full_title": "Sales Intern - US/3/SI",
      "code": "US/3/SI",
      "shortcode": "GROOV003",
      "state": "draft",
      "department": "Sales",
      "url": "http://groove-tech.workable.com/jobs/102268944",
      "application_url": "http://groove-tech.workable.com/jobs/102268944/candidates/new",
      "shortlink": "http://groove-tech.workable.com/j/GROOV003",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Oregon",
        "region_code": "OR",
        "city": "Portland",
        "zip_code": "97201",
        "telecommuting": false
      },
      "created_at": "2015-07-01"
    },
    {
      "key": "2700d6df",
      "title": "Web Developer",
      "full_title": "Web Developer - US/2/WD",
      "code": "US/2/WD",
      "shortcode": "GROOV002",
      "state": "closed",
      "department": "Engineering",
      "url": "http://groove-tech.workable.com/jobs/654365197",
      "application_url": "http://groove-tech.workable.com/jobs/654365197/candidates/new",
      "shortlink": "http://groove-tech.workable.com/j/GROOV002",
      "location": {
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-05-22"
    }
  ]
}
```


================================================================================

# /accounts

GET https://workable.com/accounts

Returns a collection of all the accounts you have access to. Required scope: `r_jobs`. Accessible with all token types.

## Response

Calling the root endpoint will return a collection of accounts you have access.  
Each `account` will have the following keys:

| key         | type     | description                       |
| :---------- | :------- | :-------------------------------- |
| id          | `string` | The account unique key            |
| name        | `string` | The name of the account           |
| subdomain   | `string` | The subdomain of the account      |
| description | `string` | The description of the account    |
| summary     | `string` | The summary of the account        |
| website_url | `string` | The url of the account's web site |


## Request

### Request Examples
```
curl 
	-H "Content-Type: application/json" 
  -H "Authorization:Bearer <Access Token>" 
https://www.workable.com/spi/v3/accounts/
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "accounts": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "20ff5c50"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Groove Tech"
            ]
          },
          "subdomain": {
            "type": "string",
            "examples": [
              "groove-tech"
            ]
          },
          "description": {
            "type": "string",
            "examples": [
              "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>"
            ]
          },
          "summary": {
            "type": "string",
            "examples": [
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam elementum posuere erat, quis mattis lectus ullamcorper sit amet. Praesent nec aliquet erat. Donec quis arcu id metus tristique eleifend. Aenean sed nunc id tortor vulputate auctor. Pellentesque ut volutpat augue, vel aliquam lectus. Maecenas mattis dictum risus, id varius nisi sodales vitae. Aenean pulvinar lacinia condimentum. Nulla id leo a tortor elementum dapibus id condimentum nibh."
            ]
          },
          "website_url": {
            "type": "string",
            "examples": [
              "https://www.workable.com"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "6942d7090bc32"
  }
}

### Response Examples
```
{
	"accounts": [
    {
    "id": "20ff5c50",
    "name": "Groove Tech",
    "subdomain": "groove-tech",
    "description": "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>",
    "summary": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam elementum posuere erat, quis mattis lectus ullamcorper sit amet. Praesent nec aliquet erat. Donec quis arcu id metus tristique eleifend. Aenean sed nunc id tortor vulputate auctor. Pellentesque ut volutpat augue, vel aliquam lectus. Maecenas mattis dictum risus, id varius nisi sodales vitae. Aenean pulvinar lacinia condimentum. Nulla id leo a tortor elementum dapibus id condimentum nibh.",
    "website_url": "https://www.workable.com"
  	}
	]
}  
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "c20f26d4ced48"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

================================================================================

# /accounts/:subdomain

GET https://workable.com/accounts/:subdomain

Returns the specified account. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling this endpoint will return the information about a specific account you have access to.  
The account will have the following keys:

| key         | type     | description                       |
| :---------- | :------- | :-------------------------------- |
| id          | `string` | The account unique key            |
| name        | `string` | The name of the account           |
| subdomain   | `string` | The name of the account           |
| description | `string` | The description of the account    |
| summary     | `string` | The summary of the account        |
| website_url | `string` | The url of the account's web site |


## Request

### Path Params
- `subdomain` (required string): The subdomain of the account

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://workable.com/spi/v3/accounts/groove-tech
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "examples": [
        "20ff5c50"
      ]
    },
    "name": {
      "type": "string",
      "examples": [
        "Groove Tech"
      ]
    },
    "subdomain": {
      "type": "string",
      "examples": [
        "groove-tech"
      ]
    },
    "description": {
      "type": "string",
      "examples": [
        "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>"
      ]
    },
    "summary": {
      "type": "string",
      "examples": [
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam elementum posuere erat, quis mattis lectus ullamcorper sit amet. Praesent nec aliquet erat. Donec quis arcu id metus tristique eleifend. Aenean sed nunc id tortor vulputate auctor. Pellentesque ut volutpat augue, vel aliquam lectus. Maecenas mattis dictum risus, id varius nisi sodales vitae. Aenean pulvinar lacinia condimentum. Nulla id leo a tortor elementum dapibus id condimentum nibh."
      ]
    },
    "website_url": {
      "type": "string",
      "examples": [
        "https://www.workable.com"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "89b67dac55baf"
  }
}

### Response Examples
```
{
    "id": "20ff5c50",
    "name": "Groove Tech",
    "subdomain": "groove-tech",
    "description": "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>",
    "summary": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam elementum posuere erat, quis mattis lectus ullamcorper sit amet. Praesent nec aliquet erat. Donec quis arcu id metus tristique eleifend. Aenean sed nunc id tortor vulputate auctor. Pellentesque ut volutpat augue, vel aliquam lectus. Maecenas mattis dictum risus, id varius nisi sodales vitae. Aenean pulvinar lacinia condimentum. Nulla id leo a tortor elementum dapibus id condimentum nibh.",
    "website_url": "https://www.workable.com"
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "98d835c7ff367"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ef116b34e28cf"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /members

GET https://{subdomain}.workable.com/members

Returns a collection of your account members. Required scope: `r_jobs`. Accessible with account tokens and user tokens.

## Results

Calling the `/members` endpoint will return a collection of the [defined members](http://www.workable.com/backend/account/members) 

Role mapping:  
`admin` - All Access / Super Admin  
`simple` - Standard role  
`reviewer` - Limited Acces / Reviewer

Each `member` will have the following keys:

| key      | type     | description                                                             |
| :------- | :------- | :---------------------------------------------------------------------- |
| id       | `string` | The member identifier                                                   |
| name     | `string` | The full name of the member                                             |
| headline | `string` | The headline of the member                                              |
| email    | `string` | The email address of the member                                         |
| role     | `string` | The member's role. Possible values are `admin`, `simple` and `reviewer` |


## Request

### Query Params
- `limit` (integer): Specifies the number of members to try and retrieve per page (optional)
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID. (optional)
- `max_id` (string): Returns results with an ID less than or equal to the specified ID. (optional)
- `role` (string): Filters for members of the specified role. Can be `simple`, `admin` or `reviewer`
- `shortcode` (string): Filters for a specific job, only collaborators will be returned

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \ https://<subdomain>.workable.com/spi/v3/members
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "members": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "13e0eb0e"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Eduardo Vallente"
            ]
          },
          "headline": {
            "type": "string",
            "examples": [
              "Operations Manager"
            ]
          },
          "email": {
            "type": "string",
            "examples": [
              "eduardo.vallente@workabledemo.com"
            ]
          },
          "role": {
            "type": "string",
            "examples": [
              "admin"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "807efe5369bfe"
  }
}

### Response Examples
```
{
  "members": [
    {
      "id": "13e0eb0e",
      "name": "Eduardo Vallente",
      "headline": "Operations Manager",
      "email": "eduardo.vallente@workabledemo.com",
      "role": "admin"
    },
    {
      "id": "19782abc",
      "name": "Nadia Sawahla",
      "headline": "Talent Manager",
      "email": "nadia.sawahla@name.com",
      "role": "recruiter"
    },
    {
      "id": "3247e8c7",
      "name": "Alexia Middleton",
      "headline": "Commercial Director",
      "email": "alexia.middleton@workabledemo.com",
      "role": "simple"
    },
    {
      "id": "3c00c3ac",
      "name": "David Bodello",
      "headline": "IT Specialist Recruiter",
      "email": "david.bodellos@gmail.com",
      "role": "recruiter"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "d70eecdaa608f"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /recruiters

GET https://{subdomain}.workable.com/recruiters

Returns a collection of your account external recruiters. Required scope: `r_jobs`. Accessible with account tokens and user tokens.

## Results

Calling the `/recruiters` endpoint will return a collection of the [external recruiters](http://www.workable.com/backend/account/recruiters) 

Each `recruiter` will have the following keys:

| key   | type     | description                        |
| :---- | :------- | :--------------------------------- |
| id    | `string` | The recruiter identifier           |
| name  | `string` | The full name of the recruiter     |
| email | `string` | The email address of the recruiter |


## Request

### Query Params
- `shortcode` (string): The job's shortcode. If provided only recruiters collaborating on the correlated job will be returned.

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/recruiters
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "recruiters": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "19782abc"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Nadia Sawahla"
            ]
          },
          "email": {
            "type": "string",
            "examples": [
              "nadia.sawahla@name.com"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "683202e07d920"
  }
}

### Response Examples
```
{
  "recruiters": [
    {
      "id": "19782abc",
      "name": "Nadia Sawahla",
      "email": "nadia.sawahla@name.com"
    },
    {
      "id": "3c00c3ac",
      "name": "David Bodello",
      "email": "david.bodellos@gmail.com"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "acfc86d5006a9"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /stages

GET https://{subdomain}.workable.com/stages

Returns a collection of your recruitment pipeline stages. Required scope: r_jobs. Accessible with all token types.

## Results

Calling the `/stages` endpoint will return a collection of the recruitment pipeline stages as defined in [recruiting preferences](https://www.workable.com/backend/account/recruiting_preferences) page

Each `stage` will have the following keys:

| key      | type      | description                                                                                                                                  |
| :------- | :-------- | :------------------------------------------------------------------------------------------------------------------------------------------- |
| slug     | `string`  | The unique token of the stage                                                                                                                |
| name     | `string`  | The stage name                                                                                                                               |
| kind     | `string`  | The type of the stage. Possible values are `sourced`, `applied`, `shortlisted`, `assessment`, `phone-screen`, `interview`, `offer` & `hired` |
| position | `integer` | The position of the stage in the pipeline (zero based)                                                                                       |


## Request

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/stages
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "stages": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "examples": [
              "sourced"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Sourced"
            ]
          },
          "kind": {
            "type": "string",
            "examples": [
              "sourced"
            ]
          },
          "position": {
            "type": "integer",
            "default": 0,
            "examples": [
              0
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "96442efd1e13e"
  }
}

### Response Examples
```
{
  "stages": [
    {
      "slug": "sourced",
      "name": "Sourced",
      "kind": "sourced",
      "position": 0
    },
    {
      "slug": "applied",
      "name": "Applied",
      "kind": "applied",
      "position": 1
    },
    {
      "slug": "phone-screen",
      "name": "Phone Screen",
      "kind": "phone-screen",
      "position": 2
    },
    {
      "slug": "interview",
      "name": "Interview",
      "kind": "interview",
      "position": 3
    },
    {
      "slug": "offer",
      "name": "Offer",
      "kind": "offer",
      "position": 4
    },
    {
      "slug": "hired",
      "name": "Hired",
      "kind": "hired",
      "position": 5
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ea2b8909f7e96"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /requisitions

GET https://{subdomain}.workable.com/requisitions

Returns a collection of your account requisitions. Required scope: `r_requisitions`. Accessible with all token types.

> üìò Timestamp parameters input format
> 
> Supported input formats for the timestamp fields `created_after` & `updated_after` are:
> 
> - [ISO8601](https://en.wikipedia.org/?title=ISO_8601) e.g. 20150708T115616Z
> - Unix time (e.g. 1436356721)

## Results

Calling the `/requisitions` endpoint will return a collection of the defined `requisitions` sorted by the time inserted on system, in ascending order (older requisitions come first).

By default results are limited to **50**. The limit can be updated via the request parameter `limit`. The value specified cannot be more than **100**.

| key            | description                                                                                                       |
| :------------- | :---------------------------------------------------------------------------------------------------------------- |
| `requisitions` | array of the requisitions                                                                                         |
| `paging`       | Includes the `next` URL pointing to the next results page, in case there are more results than the provided limit |

Each `requisition` will have the following keys:

| key                       | type     | description                                                                                                                               |
| :------------------------ | :------- | :---------------------------------------------------------------------------------------------------------------------------------------- |
| id                        | `string` | The requisition identifier                                                                                                                |
| code                      | `string` | The code of the requisition                                                                                                               |
| job                       | `object` | The job of the requisition                                                                                                                |
| job.id                    | `string` | The ID of the job                                                                                                                         |
| job.title                 | `string` | The title of the job                                                                                                                      |
| department                | `object` | The department of the requisition                                                                                                         |
| department.id             | `string` | The ID of the department                                                                                                                  |
| department.name           | `string` | The name of the department                                                                                                                |
| location                  | `object` | The location of the requisition                                                                                                           |
| location.location_str     | `string` | The string representation of the location                                                                                                 |
| location.country          | `string` | The country full name                                                                                                                     |
| location.country_code     | `string` | The 2-letter ISO code of the country                                                                                                      |
| location.region           | `string` | The region of the location                                                                                                                |
| location.region_code      | `string` | The code of the region of the location                                                                                                    |
| location.city             | `string` | The city of the location                                                                                                                  |
| location.zip_code         | `string` | The ZIP code of the location                                                                                                              |
| requester                 | `object` | The requester of the requisition                                                                                                          |
| requester.id              | `string` | The ID of the requester                                                                                                                   |
| requester.name            | `string` | The name of the requester                                                                                                                 |
| hiring_manager            | `object` | The hiring manager of the requisition                                                                                                     |
| hiring_manager.id         | `string` | The ID of the hiring manager                                                                                                              |
| hiring_manager.name       | `string` | The name of the hiring manager                                                                                                            |
| owner                     | `object` | The owner of the requisition                                                                                                              |
| owner/id                  | `string` | The ID of the owner                                                                                                                       |
| owner/name                | `string` | The name of the owner                                                                                                                     |
| plan_date                 | `string` | The plan date of the requisition in `YYYY-MM-DD` format (ie `2022-01-31`)                                                                 |
| start_date                | `string` | The start date of the requisition in `YYYY-MM-DD` format (ie `2022-01-31`)                                                                |
| salary_range              | `object` | The salary range of the requisition.                                                                                                      |
| salary_range.from         | `number` | The minimum salary of the requisition                                                                                                     |
| salary_range.to           | `number` | The maximum salary of the requisition                                                                                                     |
| salary_range.frequency    | `string` | The frequency of the salary range. Can be one of hour, day, week, month, year.                                                            |
| salary_range.currency_iso | `string` | The 3-letter ISO code of the currency (ie EUR, USD).                                                                                      |
| salary                    | `object` | The salary of the requisition. Only exists for filled requisitions.                                                                       |
| salary.amount             | `number` | The amount of the salary                                                                                                                  |
| salary.frequency          | `string` | The frequency of the salary range. Can be one of hour, day, week, month, year.                                                            |
| salary.currency_iso       | `string` | The 3-letter ISO code of the currency (ie EUR, USD).                                                                                      |
| candidate_id              | `string` | The ID of the candidate. Only exists for filled and reserved requisitions.                                                                |
| employment_type           | `string` | The employment type. Can be one of Full-time, Part-time, Contract, Temporary, Other.                                                      |
| reason                    | `string` | The reason for the requisition. Can be one of new_hire, replacement, backfill.                                                            |
| state                     | `string` | The state of the requisition. Can be one of processing, draft, pending, approved, open, filled, rejected, cancelled, reserved, on_hold.   |
| requisition_attributes    | `array`  | The attributes of the requisition. For the keys of each requisition attribute check the table below.                                      |
| approval_groups           | `array`  | The approval groups of the requisition, in the order of the approval workflow. For the keys of each approval group check the table below. |

Each `document_variable` contains the following keys

[block:parameters]
{
  "data": {
    "h-0": "key",
    "h-1": "type",
    "h-2": "description",
    "0-0": "name",
    "0-1": "`string`",
    "0-2": "The name of the requisition attribute",
    "1-0": "value.body",
    "1-1": "`string`, `number` or `boolean`",
    "1-2": "The value of the requisition attribute. It's type varies depending on the type of the requisition attribute:  \n  \n`string` if the type is of case short text, free text or date  \n`number` if the type is numeric  \n`boolean` if the type is boolean",
    "2-0": "value.choices",
    "2-1": "`array`",
    "2-2": "Array of the labels of the selected choices",
    "3-0": "data",
    "3-1": "`object`",
    "3-2": "The value data (only for salary requisition attributes)",
    "4-0": "data.amount",
    "4-1": "`number`",
    "4-2": "The amount of salary",
    "5-0": "data.frequency",
    "5-1": "`string`",
    "5-2": "The frequency of the salary. Can be one of hour, day, week, month, year.",
    "6-0": "data.currency_iso",
    "6-1": "`string`",
    "6-2": "The 3-letter ISO code of the currency (ie EUR, USD)."
  },
  "cols": 3,
  "rows": 7,
  "align": [
    "left",
    "left",
    "left"
  ]
}
[/block]

Each approval group contains the following keys

| key                | type     | description                                                                                                                                                                                                                     |
| :----------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| id                 | `string` | The approval group identifier                                                                                                                                                                                                   |
| approvers          | `array`  | Array of the approvers of the approval group for the specific requisition. For groups with a decision (positive or negative), only that approver will be present. For groups without a decision, all the approvers will appear. |
| approvers.id       | `string` | The identifier of the approver                                                                                                                                                                                                  |
| approvers.name     | `string` | The name of the approver                                                                                                                                                                                                        |
| approvers.decision | `string` | The decision of the approver (only if the approver has submitted a decision). If present, it is one of `approved`, `rejected`.                                                                                                  |


## Request

### Query Params
- `state` (string): Returns requisitions with the current state. Possible values (processing, draft, pending, approved, open, filled, rejected, cancelled, reserved, on_hold).
- `job_id` (string): Returns requisitions for the job with the specified ID.
- `plan_date_from` (string): Returns requisitions with plan date after the specified month. Format is YYYY-MM (example: 2022-01).
- `plan_date_to` (string): Returns requisitions with plan date before the specified month. Format is YYYY-MM (example: 2022-12).
- `limit` (integer): Specifies the number of requisitions to try and retrieve per page (optional)
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID. (optional)
- `max_id` (string): Returns results with an ID less than or equal to the specified ID. (optional)
- `created_after` (string): Returns results created after the specified timestamp. (optional)
- `updated_after` (string): Returns results updated after the specified timestamp.

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/requisitions
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "requisitions": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "16d60890"
            ]
          },
          "code": {
            "type": "string",
            "examples": [
              "REQ101"
            ]
          },
          "job": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "23c47225"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Pilot"
                ]
              }
            }
          },
          "department": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "1ee2e1d2"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Flight"
                ]
              }
            }
          },
          "location": {
            "type": "object",
            "properties": {
              "location_str": {
                "type": "string",
                "examples": [
                  "California, USA"
                ]
              },
              "country": {
                "type": "string",
                "examples": [
                  "United States"
                ]
              },
              "country_code": {
                "type": "string",
                "examples": [
                  "US"
                ]
              },
              "region": {
                "type": "string",
                "examples": [
                  "California"
                ]
              },
              "region_code": {
                "type": "string",
                "examples": [
                  "CA"
                ]
              },
              "city": {},
              "zip_code": {}
            }
          },
          "hiring_manager": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "31169ee"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Jack Shephard"
                ]
              }
            }
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "2310f579"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "John Locke"
                ]
              }
            }
          },
          "plan_date": {
            "type": "string",
            "examples": [
              "2022-12-31"
            ]
          },
          "start_date": {},
          "salary_range": {
            "type": "object",
            "properties": {
              "from": {
                "type": "integer",
                "default": 0,
                "examples": [
                  60000
                ]
              },
              "to": {
                "type": "integer",
                "default": 0,
                "examples": [
                  80000
                ]
              },
              "frequency": {
                "type": "string",
                "examples": [
                  "year"
                ]
              },
              "currency": {
                "type": "string",
                "examples": [
                  "EUR"
                ]
              }
            }
          },
          "employment_type": {
            "type": "string",
            "examples": [
              "Full-time"
            ]
          },
          "reason": {
            "type": "string",
            "examples": [
              "replacement"
            ]
          },
          "state": {
            "type": "string",
            "examples": [
              "pending"
            ]
          },
          "requisition_attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "Level"
                  ]
                },
                "value": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "examples": [
                        "Senior"
                      ]
                    }
                  }
                }
              }
            }
          },
          "approval_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "examples": [
                    "129cf872"
                  ]
                },
                "approvers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "examples": [
                          "15046d4c"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "examples": [
                          "Kate Austen"
                        ]
                      },
                      "decision": {
                        "type": "string",
                        "examples": [
                          "approved"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "518d47d34ab49"
  }
}

### Response Examples
```
{
  "requisitions": [
    {
      "id": "16d60890",
      "code": "REQ101",
      "job": {
        "id": "23c47225",
        "title": "Pilot"
      },
      "department": {
        "id": "1ee2e1d2",
        "name": "Flight"
      },
      "location": {
        "location_str": "California, USA",
        "country": "United States",
        "country_code": "US",
        "region": "California",
        "region_code": "CA",
        "city": null,
        "zip_code": null
      },
      "hiring_manager": {
        "id": "31169ee",
        "name": "Jack Shephard"
      },
      "owner": {
        "id": "2310f579",
        "name": "John Locke"
      },
      "plan_date": "2022-12-31",
      "start_date": null,
      "salary_range": {
        "from": 60000,
        "to": 80000,
        "frequency": "year",
        "currency": "EUR"
      },
      "employment_type": "Full-time",
      "reason": "replacement",
      "state": "pending",
      "requisition_attributes": [
        {
          "name": "Level",
          "value": {
            "body": "Senior"
          }
        },
        {
          "name": "Relocation Package?",
          "value": {
            "body": true
          }
        },
        {
          "name": "Shift",
          "value": {
            "choices": [
              "Morning"
            ]
          }
        },
        {
          "name": "Number of shares",
          "value": {
            "body": 150
          }
        },
        {
          "name": "Just a random date",
          "value": {
            "body": "2018-11-30"
          }
        },
        {
          "name": "The *real* reason",
          "value": {
            "body": "It was more of a spur of the moment thing. We don't really need another stranger bring a fresh perspective."
          }
        },
        {
          "name": "T-Shirt colors",
          "value": {
            "choices": [
              "Creamy White",
              "Salmon Pink"
            ]
          }
        },
        {
          "name": "Unofficial salary",
          "value": {
            "data": {
              "amount": 5000,
              "frequency": "month",
              "currency_iso": "USD"
            }
          }
        }
      ],
      "approval_groups": [
        {
          "id": "129cf872",
          "approvers": [
            {
              "id": "15046d4c",
              "name": "Kate Austen",
              "decision": "approved"
            }
          ]
        },
        {
          "id": "b95a6fa",
          "approvers": [
            {
              "id": "2310f579",
              "name": "John Locke",
              "decision": "rejected"
            }
          ]
        }
      ]
    }
  ]
}

```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "db4ee249c2982"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "926d8f27f6380"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /requisitions/:code

GET https://{subdomain}.workable.com/requisitions/%7Bcode%7D

Returns a collection of your account requisitions. Required scope: `r_requisitions`. Accessible with all token types.

## Results

Calling the `/requisitions/:code` endpoint will return the full requisition JSON object.

The object will have the following keys:

| key                       | type     | description                                                                                                                               |
| :------------------------ | :------- | :---------------------------------------------------------------------------------------------------------------------------------------- |
| id                        | `string` | The requisition identifier                                                                                                                |
| code                      | `string` | The code of the requisition                                                                                                               |
| job                       | `object` | The job of the requisition                                                                                                                |
| job.id                    | `string` | The ID of the job                                                                                                                         |
| job.title                 | `string` | The title of the job                                                                                                                      |
| department                | `object` | The department of the requisition                                                                                                         |
| department.id             | `string` | The ID of the department                                                                                                                  |
| department.name           | `string` | The name of the department                                                                                                                |
| location                  | `object` | The location of the requisition                                                                                                           |
| location.location_str     | `string` | The string representation of the location                                                                                                 |
| location.country          | `string` | The country full name                                                                                                                     |
| location.country_code     | `string` | The 2-letter ISO code of the country                                                                                                      |
| location.region           | `string` | The region of the location                                                                                                                |
| location.region_code      | `string` | The code of the region of the location                                                                                                    |
| location.city             | `string` | The city of the location                                                                                                                  |
| location.zip_code         | `string` | The ZIP code of the location                                                                                                              |
| requester                 | `object` | The requester of the requisition                                                                                                          |
| requester.id              | `string` | The ID of the requester                                                                                                                   |
| requester.name            | `string` | The name of the requester                                                                                                                 |
| hiring_manager            | `object` | The hiring manager of the requisition                                                                                                     |
| hiring_manager.id         | `string` | The ID of the hiring manager                                                                                                              |
| hiring_manager.name       | `string` | The name of the hiring manager                                                                                                            |
| owner                     | `object` | The owner of the requisition                                                                                                              |
| owner/id                  | `string` | The ID of the owner                                                                                                                       |
| owner/name                | `string` | The name of the owner                                                                                                                     |
| plan_date                 | `string` | The plan date of the requisition in `YYYY-MM-DD` format (ie `2022-01-31`)                                                                 |
| start_date                | `string` | The start date of the requisition in `YYYY-MM-DD` format (ie `2022-01-31`)                                                                |
| salary_range              | `object` | The salary range of the requisition.                                                                                                      |
| salary_range.from         | `number` | The minimum salary of the requisition                                                                                                     |
| salary_range.to           | `number` | The maximum salary of the requisition                                                                                                     |
| salary_range.frequency    | `string` | The frequency of the salary range. Can be one of hour, day, week, month, year.                                                            |
| salary_range.currency_iso | `string` | The 3-letter ISO code of the currency (ie EUR, USD).                                                                                      |
| salary                    | `object` | The salary of the requisition. Only exists for filled requisitions.                                                                       |
| salary.amount             | `number` | The amount of the salary                                                                                                                  |
| salary.frequency          | `string` | The frequency of the salary range. Can be one of hour, day, week, month, year.                                                            |
| salary.currency_iso       | `string` | The 3-letter ISO code of the currency (ie EUR, USD).                                                                                      |
| candidate_id              | `string` |                                                                                                                                           |
| employment_type           | `string` | The employment type. Can be one of Full-time, Part-time, Contract, Temporary, Other.                                                      |
| reason                    | `string` | The reason for the requisition. Can be one of new_hire, replacement, backfill.                                                            |
| state                     | `string` | The state of the requisition. Can be one of processing, draft, pending, approved, open, filled, rejected, cancelled, reserved, on_hold.   |
| requisition_attributes    | `array`  | The attributes of the requisition. For the keys of each requisition attribute check the table below.                                      |
| approval_groups           | `array`  | The approval groups of the requisition, in the order of the approval workflow. For the keys of each approval group check the table below. |

Each `document_variable` contains the following keys

[block:parameters]
{
  "data": {
    "h-0": "key",
    "h-1": "type",
    "h-2": "description",
    "0-0": "name",
    "0-1": "`string`",
    "0-2": "The name of the requisition attribute",
    "1-0": "value.body",
    "1-1": "`string`, `number` or `boolean`",
    "1-2": "The value of the requisition attribute. It's type varies depending on the type of the requisition attribute:  \n  \n`string` if the type is of case short text, free text or date  \n`number` if the type is numeric  \n`boolean` if the type is boolean",
    "2-0": "value.choices",
    "2-1": "`array`",
    "2-2": "Array of the labels of the selected choices",
    "3-0": "data",
    "3-1": "`object`",
    "3-2": "The value data (only for salary requisition attributes)",
    "4-0": "data.amount",
    "4-1": "`number`",
    "4-2": "The amount of salary",
    "5-0": "data.frequency",
    "5-1": "`string`",
    "5-2": "The frequency of the salary. Can be one of hour, day, week, month, year.",
    "6-0": "data.currency_iso",
    "6-1": "`string`",
    "6-2": "The 3-letter ISO code of the currency (ie EUR, USD)."
  },
  "cols": 3,
  "rows": 7,
  "align": [
    "left",
    "left",
    "left"
  ]
}
[/block]

Each approval group contains the following keys

| key                | type     | description                                                                                                                                                                                                                     |
| :----------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| id                 | `string` | The approval group identifier                                                                                                                                                                                                   |
| approvers          | `array`  | Array of the approvers of the approval group for the specific requisition. For groups with a decision (positive or negative), only that approver will be present. For groups without a decision, all the approvers will appear. |
| approvers.id       | `string` | The identifier of the approver                                                                                                                                                                                                  |
| approvers.name     | `string` | The name of the approver                                                                                                                                                                                                        |
| approvers.decision | `string` | The decision of the approver (only if the approver has submitted a decision). If present, it is one of `approved`, `rejected`.                                                                                                  |


## Request

### Path Params
- `code` (required string): The code of the requisition

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/requisitions/<code>
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "requisitions": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "16d60890"
            ]
          },
          "code": {
            "type": "string",
            "examples": [
              "REQ101"
            ]
          },
          "job": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "23c47225"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Pilot"
                ]
              }
            }
          },
          "department": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "1ee2e1d2"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Flight"
                ]
              }
            }
          },
          "location": {
            "type": "object",
            "properties": {
              "location_str": {
                "type": "string",
                "examples": [
                  "California, USA"
                ]
              },
              "country": {
                "type": "string",
                "examples": [
                  "United States"
                ]
              },
              "country_code": {
                "type": "string",
                "examples": [
                  "US"
                ]
              },
              "region": {
                "type": "string",
                "examples": [
                  "California"
                ]
              },
              "region_code": {
                "type": "string",
                "examples": [
                  "CA"
                ]
              },
              "city": {},
              "zip_code": {}
            }
          },
          "hiring_manager": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "31169ee"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Jack Shephard"
                ]
              }
            }
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "2310f579"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "John Locke"
                ]
              }
            }
          },
          "plan_date": {
            "type": "string",
            "examples": [
              "2022-12-31"
            ]
          },
          "start_date": {},
          "salary_range": {
            "type": "object",
            "properties": {
              "from": {
                "type": "integer",
                "default": 0,
                "examples": [
                  60000
                ]
              },
              "to": {
                "type": "integer",
                "default": 0,
                "examples": [
                  80000
                ]
              },
              "frequency": {
                "type": "string",
                "examples": [
                  "year"
                ]
              },
              "currency": {
                "type": "string",
                "examples": [
                  "EUR"
                ]
              }
            }
          },
          "employment_type": {
            "type": "string",
            "examples": [
              "Full-time"
            ]
          },
          "reason": {
            "type": "string",
            "examples": [
              "replacement"
            ]
          },
          "state": {
            "type": "string",
            "examples": [
              "pending"
            ]
          },
          "requisition_attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "examples": [
                    "Level"
                  ]
                },
                "value": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "examples": [
                        "Senior"
                      ]
                    }
                  }
                }
              }
            }
          },
          "approval_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "examples": [
                    "129cf872"
                  ]
                },
                "approvers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "examples": [
                          "15046d4c"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "examples": [
                          "Kate Austen"
                        ]
                      },
                      "decision": {
                        "type": "string",
                        "examples": [
                          "approved"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ba3557e8767b2"
  }
}

### Response Examples
```
{
  "requisitions": [
    {
      "id": "16d60890",
      "code": "REQ101",
      "job": {
        "id": "23c47225",
        "title": "Pilot"
      },
      "department": {
        "id": "1ee2e1d2",
        "name": "Flight"
      },
      "location": {
        "location_str": "California, USA",
        "country": "United States",
        "country_code": "US",
        "region": "California",
        "region_code": "CA",
        "city": null,
        "zip_code": null
      },
      "hiring_manager": {
        "id": "31169ee",
        "name": "Jack Shephard"
      },
      "owner": {
        "id": "2310f579",
        "name": "John Locke"
      },
      "plan_date": "2022-12-31",
      "start_date": null,
      "salary_range": {
        "from": 60000,
        "to": 80000,
        "frequency": "year",
        "currency": "EUR"
      },
      "employment_type": "Full-time",
      "reason": "replacement",
      "state": "pending",
      "requisition_attributes": [
        {
          "name": "Level",
          "value": {
            "body": "Senior"
          }
        },
        {
          "name": "Relocation Package?",
          "value": {
            "body": true
          }
        },
        {
          "name": "Shift",
          "value": {
            "choices": [
              "Morning"
            ]
          }
        },
        {
          "name": "Number of shares",
          "value": {
            "body": 150
          }
        },
        {
          "name": "Just a random date",
          "value": {
            "body": "2018-11-30"
          }
        },
        {
          "name": "The *real* reason",
          "value": {
            "body": "It was more of a spur of the moment thing. We don't really need another stranger bring a fresh perspective."
          }
        },
        {
          "name": "T-Shirt colors",
          "value": {
            "choices": [
              "Creamy White",
              "Salmon Pink"
            ]
          }
        },
        {
          "name": "Unofficial salary",
          "value": {
            "data": {
              "amount": 5000,
              "frequency": "month",
              "currency_iso": "USD"
            }
          }
        }
      ],
      "approval_groups": [
        {
          "id": "129cf872",
          "approvers": [
            {
              "id": "15046d4c",
              "name": "Kate Austen",
              "decision": "approved"
            }
          ]
        },
        {
          "id": "b95a6fa",
          "approvers": [
            {
              "id": "2310f579",
              "name": "John Locke",
              "decision": "rejected"
            }
          ]
        }
      ]
    }
  ]
}

```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "60d9b1afc3b21"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "93715193d9455"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /jobs

GET https://{subdomain}.workable.com/jobs

Returns a collection of your account jobs. Required scope: `r_jobs`. Accessible with all token types.

> üìò Timestamp parameters input format
> 
> Supported input formats for the timestamp fields `created_after` & `updated_after` are:
> 
> - [ISO8601](https://en.wikipedia.org/?title=ISO_8601) e.g. 20150708T115616Z
> - Unix time (e.g. 1436356721)

## Results

Calling the `/jobs` endpoint will return a collection of the defined `jobs` sorted by the time inserted on system, in ascending order (older jobs come first).

By default results are limited to **50**. The limit can by updated via the request parameter `limit`. The value specified cannot be more than **100**.

| key      | description                                                                                                       |
| :------- | :---------------------------------------------------------------------------------------------------------------- |
| `jobs`   | array of the defined jobs                                                                                         |
| `paging` | Includes the `next` URL pointing to the next results page, in case there are more results than the provided limit |

Each `job` will have the following keys:

| key                       | type        | description                                                                                                                                                                          |
| :------------------------ | :---------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| id                        | `string`    | The job identifier                                                                                                                                                                   |
| title                     | `string`    | The short title of the job                                                                                                                                                           |
| full_title                | `string`    | The full title of the job                                                                                                                                                            |
| shortcode                 | `string`    | System generated job code                                                                                                                                                            |
| code                      | `string`    | Job code as defined in editor                                                                                                                                                        |
| state                     | `string`    | The job state. Possible values are `draft`, `published`, `closed`, `archived`. Where `closed` is a job used internally or confidentially                                             |
| department                | `string`    | The job department as defined in editor                                                                                                                                              |
| department_hierarchy      | `array`     | A collection with the ancestor departments of the job department including that                                                                                                      |
| department_hierarchy/id   | `integer`   | The id of the department                                                                                                                                                             |
| department_hierarchy/name | `string`    | The name of the department                                                                                                                                                           |
| url                       | `string`    | URL to the job page                                                                                                                                                                  |
| application_url           | `string`    | URL to the job application form                                                                                                                                                      |
| shortlink                 | `string`    | short URL to the job page                                                                                                                                                            |
| location/location_str     | `string`    | The location string translated into the language of the job. The location string consists of city, region, and country separated by comma (some of these elements might be missing). |
| location/country          | `string`    | The country name as defined in job editor                                                                                                                                            |
| location/country_code     | `string`    | The two digit country code                                                                                                                                                           |
| location/region           | `string`    | The region as defined in job editor                                                                                                                                                  |
| location/region_code      | `string`    | The two digit region code                                                                                                                                                            |
| location/city             | `string`    | The city as defined in job editor                                                                                                                                                    |
| location/zip_code         | `string`    | The zip code as defined in job editor                                                                                                                                                |
| location/telecommuting    | `boolean`   | Indicates if this is a remote/telecommute job                                                                                                                                        |
| created_at                | `timestamp` | The timestamp the job created                                                                                                                                                        |


## Request

### Query Params
- `state` (string): Returns jobs with the current state. Possible values (draft, published, archived & closed).
- `limit` (integer): Specifies the number of jobs to try and retrieve per page (optional)
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID. (optional)
- `max_id` (string): Returns results with an ID less than or equal to the specified ID. (optional)
- `created_after` (string): Returns results created after the specified timestamp. (optional)
- `updated_after` (string): Returns results updated after the specified timestamp.
- `include_fields` (string): Includes additional fields in each job (description, full_description, requirements and benefits).

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs?state=published
```

## 200 Response
200

### Response Body (application/json)

### Response Examples
```
{  
  "jobs": [
    {
      "id": "61884e2",
      "title": "Sales Intern",
      "full_title": "Sales Intern - US/3/SI",
      "shortcode": "GROOV003",
      "code": "US/3/SI",
      "state": "draft",
      "department": "Sales",
      "department_hierarchy": [
        {
        	"id: 792289334,
          "name": "Sales"
        }
      ],
      "url": "https://groove-tech.workable.com/jobs/102268944",
      "application_url": "https://groove-tech.workable.com/jobs/102268944/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV003",
      "location": {
        "location_str": "Portland, Oregon, United States",
        "country": "United States",
        "country_code": "US",
        "region": "Oregon",
        "region_code": "OR",
        "city": "Portland",
        "zip_code": "97201",
        "telecommuting": false
      },
      "created_at": "2015-07-01T00:00:00Z"
    },
    {
      "id": "1166bf8c",
      "title": "Operations Manager",
      "full_title": "Operations Manager - US/02/CM",
      "shortcode": "GROOV001",
      "code": "US/02/CM",
      "state": "archived",
      "department": "Operations",
      "url": "https://groove-tech.workable.com/jobs/291945146",
      "application_url": "https://groove-tech.workable.com/jobs/291945146/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV001",
      "location": {
        "location_str": "Chicago, Illinois, United States",
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-05-07T00:00:00Z"
    },
    {
      "id": "167636b1",
      "title": "Office Manager",
      "full_title": "Office Manager - US/4/OM",
      "shortcode": "GROOV005",
      "code": "US/4/OM",
      "state": "published",
      "department": "Administration",
      "url": "https://groove-tech.workable.com/jobs/376844767",
      "application_url": "https://groove-tech.workable.com/jobs/376844767/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV005",
      "location": {
        "location_str": "Chicago, Illinois, United States",
        "country": "United States",
        "country_code": "US",
        "region": "Illinois",
        "region_code": "IL",
        "city": "Chicago",
        "zip_code": "60290",
        "telecommuting": false
      },
      "created_at": "2015-06-06T00:00:00Z"
    }
  ],
  "paging": {
    "next": "https://www.workable.com/spi/v3/accounts/groove-tech/jobs?limit=3&since_id=2700d6df"
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ed235f31b2af9"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "45a0bc34b7467"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /jobs/:shortcode

GET https://{subdomain}.workable.com/jobs/:shortcode

Returns the details of the specified job. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling the `jobs/:shortcode` will return the full job JSON object.

| key                    | type      | description                                                                                                                              |
| :--------------------- | :-------- | :--------------------------------------------------------------------------------------------------------------------------------------- |
| id                     | `string`  | The job identifier                                                                                                                       |
| title                  | `string`  | The short title of the job                                                                                                               |
| full_title             | `string`  | The full title of the job (title + code)                                                                                                 |
| shortcode              | `string`  | System generated job code                                                                                                                |
| code                   | `string`  | Job code as defined in editor                                                                                                            |
| state                  | `string`  | The job state. Possible values are `draft`, `published`, `closed`, `archived`. Where `closed` is a job used internally or confidentially |
| department             | `string`  | The job department as defined in job editor                                                                                              |
| url                    | `string`  | short URL to the job page                                                                                                                |
| application_url        | `string`  | URL to the job application form                                                                                                          |
| shortlink              | `string`  | short URL to the job page                                                                                                                |
| location/country       | `string`  | The country name as defined in job editor                                                                                                |
| location/country_code  | `string`  | The two digit country code                                                                                                               |
| location/region        | `string`  | The region as defined in job editor                                                                                                      |
| location/region_code   | `string`  | The two digit region code                                                                                                                |
| location/city          | `string`  | The city as defined in job editor                                                                                                        |
| location/zip_code      | `string`  | The zip code as defined in job editor                                                                                                    |
| location/telecommuting | `boolean` | True if job is telecommuting                                                                                                             |
| created_at             | `string`  | The timestamp the job was created                                                                                                        |
| full_description       | `string`  | Description + requirements + benefits                                                                                                    |
| description            | `string`  | The description of the job                                                                                                               |
| requirements           | `string`  | The requirements section of the job                                                                                                      |
| benefits               | `string`  | The benefits section of the job                                                                                                          |
| employment_type        | `string`  | The employment type of the job                                                                                                           |
| industry               | `string`  | The job's industry                                                                                                                       |
| function               | `string`  | The job's function                                                                                                                       |
| experience             | `string`  | The experience required for the job                                                                                                      |
| education              | `string`  | The education level required for the job                                                                                                 |
| keywords               | `array`   | The keywords of the job                                                                                                                  |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "examples": [
        "167636b1"
      ]
    },
    "title": {
      "type": "string",
      "examples": [
        "Office Manager"
      ]
    },
    "full_title": {
      "type": "string",
      "examples": [
        "Office Manager - US/4/OM"
      ]
    },
    "shortcode": {
      "type": "string",
      "examples": [
        "GROOV005"
      ]
    },
    "code": {
      "type": "string",
      "examples": [
        "US/4/OM"
      ]
    },
    "state": {
      "type": "string",
      "examples": [
        "published"
      ]
    },
    "department": {
      "type": "string",
      "examples": [
        "Administration"
      ]
    },
    "url": {
      "type": "string",
      "examples": [
        "https://groove-tech.lvh.me:3000/jobs/376844767"
      ]
    },
    "application_url": {
      "type": "string",
      "examples": [
        "https://groove-tech.lvh.me:3000/jobs/376844767/candidates/new"
      ]
    },
    "shortlink": {
      "type": "string",
      "examples": [
        "https://groove-tech.lvh.me:3000/j/GROOV005"
      ]
    },
    "location": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "examples": [
            "United States"
          ]
        },
        "country_code": {
          "type": "string",
          "examples": [
            "US"
          ]
        },
        "region": {
          "type": "string",
          "examples": [
            "Illinois"
          ]
        },
        "region_code": {
          "type": "string",
          "examples": [
            "IL"
          ]
        },
        "city": {
          "type": "string",
          "examples": [
            "Chicago"
          ]
        },
        "zip_code": {
          "type": "string",
          "examples": [
            "60290"
          ]
        },
        "telecommuting": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        }
      }
    },
    "created_at": {
      "type": "string",
      "examples": [
        "2015-06-08T00:00:00Z"
      ]
    },
    "full_description": {
      "type": "string",
      "examples": [
        " <p>We are looking for an Office Manager to organize and coordinate office operations and procedures, in order to ensure organizational effectiveness, efficiency and safety.The ideal candidate will be experienced in handling a wide range of administrative and executive support related tasks and will be able to work independently with little or no supervision. This person must be exceedingly well organized, flexible and enjoy the administrative challenges of supporting an office of diverse people.</p> <p>Responsibilities:<ul> <li>Serve as the point person for maintenance, mailing, shopping, supplies, equipment, bills, and errands</li> <li>Organize and schedule meetings and appointments</li> <li>Partner with HR to maintain office policies as necessary</li> <li>Organize office operations and proceduresCoordinate with IT department on all office equipment</li> <li>Manage relationships with vendors, service providers, and landlord, ensuring that all items are invoiced and paid on time</li> <li>Manage contract and price negotiations with office vendors, service providers and office lease</li> <li>Manage office G&A budget, ensure accurate and timely reporting</li> <li>Provide general support to visitors</li> </ul></p><p><strong>Requirements</strong></p><ul> <li>4+ years of office management, administrative or assistant experience</li> <li>Knowledge of office management systems and procedures</li> <li>Excellent time management skills and ability to multi-task and prioritize work</li> <li>Attention to detail and problem solving skills</li> <li>Excellent written and verbal communication skills</li> <li>Strong organizational and planning skills</li> <li>Proficiency in MS Office</li> </ul><p><strong>Benefits</strong></p><ul>\\\n <li>Great opportunities for career development</li> <li>All your equipment provided including a laptop</li> <li>Increasing vacation days with each year of employment</li> </ul>"
      ]
    },
    "description": {
      "type": "string",
      "examples": [
        " <p>We are looking for an Office Manager to organize and coordinate office operations and procedures, in order to ensure organizational effectiveness, efficiency and safety.The ideal candidate will be experienced in handling a wide range of administrative and executive support related tasks and will be able to work independently with little or no supervision. This person must be exceedingly well organized, flexible and enjoy the administrative challenges of supporting an office of diverse people.</p> <p>Responsibilities:<ul> <li>Serve as the point person for maintenance, mailing, shopping, supplies, equipment, bills, and errands</li> <li>Organize and schedule meetings and appointments</li> <li>Partner with HR to maintain office policies as necessary</li> <li>Organize office operations and proceduresCoordinate with IT department on all office equipment</li> <li>Manage relationships with vendors, service providers, and landlord, ensuring that all items are invoiced and paid on time</li> <li>Manage contract and price negotiations with office vendors, service providers and office lease</li> <li>Manage office G&A budget, ensure accurate and timely reporting</li> <li>Provide general support to visitors</li> </ul></p>"
      ]
    },
    "requirements": {
      "type": "string",
      "examples": [
        "<ul> <li>4+ years of office management, administrative or assistant experience</li> <li>Knowledge of office management systems and procedures</li> <li>Excellent time management skills and ability to multi-task and prioritize work</li> <li>Attention to detail and problem solving skills</li> <li>Excellent written and verbal communication skills</li> <li>Strong organizational and planning skills</li> <li>Proficiency in MS Office</li> </ul>"
      ]
    },
    "benefits": {
      "type": "string",
      "examples": [
        "<ul> <li>Great opportunities for career development</li> <li>All your equipment provided including a laptop</li> <li>Increasing vacation days with each year of employment</li> </ul>"
      ]
    },
    "employment_type": {
      "type": "string",
      "examples": [
        "Full-time"
      ]
    },
    "industry": {
      "type": "string",
      "examples": [
        "Business Supplies and equipment"
      ]
    },
    "function": {
      "type": "string",
      "examples": [
        "Administrative"
      ]
    },
    "experience": {
      "type": "string",
      "examples": [
        "Associate"
      ]
    },
    "education": {
      "type": "string",
      "examples": [
        "High School or equivalent"
      ]
    },
    "keywords": {
      "type": "array",
      "items": {
        "type": "string",
        "examples": [
          "manager"
        ]
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "92b61dc3d19cb"
  }
}

### Response Examples
```
{
  "id": "167636b1",
  "title": "Office Manager",
  "full_title": "Office Manager - US/4/OM",
  "shortcode": "GROOV005",
  "code": "US/4/OM",
  "state": "published",
  "department": "Administration",
  "url": "https://groove-tech.lvh.me:3000/jobs/376844767",
  "application_url": "https://groove-tech.lvh.me:3000/jobs/376844767/candidates/new",
  "shortlink": "https://groove-tech.lvh.me:3000/j/GROOV005",
  "location": {
    "country": "United States",
    "country_code": "US",
    "region": "Illinois",
    "region_code": "IL",
    "city": "Chicago",
    "zip_code": "60290",
    "telecommuting": false
  },
  "created_at": "2015-06-08T00:00:00Z",
  "full_description": " <p>We are looking for an Office Manager to organize and coordinate office operations and procedures, in order to ensure organizational effectiveness, efficiency and safety.The ideal candidate will be experienced in handling a wide range of administrative and executive support related tasks and will be able to work independently with little or no supervision. This person must be exceedingly well organized, flexible and enjoy the administrative challenges of supporting an office of diverse people.</p> <p>Responsibilities:<ul> <li>Serve as the point person for maintenance, mailing, shopping, supplies, equipment, bills, and errands</li> <li>Organize and schedule meetings and appointments</li> <li>Partner with HR to maintain office policies as necessary</li> <li>Organize office operations and proceduresCoordinate with IT department on all office equipment</li> <li>Manage relationships with vendors, service providers, and landlord, ensuring that all items are invoiced and paid on time</li> <li>Manage contract and price negotiations with office vendors, service providers and office lease</li> <li>Manage office G&A budget, ensure accurate and timely reporting</li> <li>Provide general support to visitors</li> </ul></p><p><strong>Requirements</strong></p><ul> <li>4+ years of office management, administrative or assistant experience</li> <li>Knowledge of office management systems and procedures</li> <li>Excellent time management skills and ability to multi-task and prioritize work</li> <li>Attention to detail and problem solving skills</li> <li>Excellent written and verbal communication skills</li> <li>Strong organizational and planning skills</li> <li>Proficiency in MS Office</li> </ul><p><strong>Benefits</strong></p><ul>\\\n <li>Great opportunities for career development</li> <li>All your equipment provided including a laptop</li> <li>Increasing vacation days with each year of employment</li> </ul>",
  "description": " <p>We are looking for an Office Manager to organize and coordinate office operations and procedures, in order to ensure organizational effectiveness, efficiency and safety.The ideal candidate will be experienced in handling a wide range of administrative and executive support related tasks and will be able to work independently with little or no supervision. This person must be exceedingly well organized, flexible and enjoy the administrative challenges of supporting an office of diverse people.</p> <p>Responsibilities:<ul> <li>Serve as the point person for maintenance, mailing, shopping, supplies, equipment, bills, and errands</li> <li>Organize and schedule meetings and appointments</li> <li>Partner with HR to maintain office policies as necessary</li> <li>Organize office operations and proceduresCoordinate with IT department on all office equipment</li> <li>Manage relationships with vendors, service providers, and landlord, ensuring that all items are invoiced and paid on time</li> <li>Manage contract and price negotiations with office vendors, service providers and office lease</li> <li>Manage office G&A budget, ensure accurate and timely reporting</li> <li>Provide general support to visitors</li> </ul></p>",
  "requirements": "<ul> <li>4+ years of office management, administrative or assistant experience</li> <li>Knowledge of office management systems and procedures</li> <li>Excellent time management skills and ability to multi-task and prioritize work</li> <li>Attention to detail and problem solving skills</li> <li>Excellent written and verbal communication skills</li> <li>Strong organizational and planning skills</li> <li>Proficiency in MS Office</li> </ul>",
  "benefits": "<ul> <li>Great opportunities for career development</li> <li>All your equipment provided including a laptop</li> <li>Increasing vacation days with each year of employment</li> </ul>",
  "employment_type": "Full-time",
  "industry": "Business Supplies and equipment",
  "function": "Administrative",
  "experience": "Associate",
  "education": "High School or equivalent",
  "keywords": ["manager", "administrative"]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "794fa6c31c66d"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "8d7e670d967f2"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /jobs/:shortcode/activities

GET https://{subdomain}.workable.com/jobs/:shortcode/activities

Returns the activity stream of the given job. Requires scope `r_candidates`. Accessible with all token types.

## Results

Calling the `/jobs/:shortcode/activities` endpoint returns a JSON array of the job's activities.

| key        | description         |
| :--------- | :------------------ |
| activities | array of activities |

Each activity has the following keys:

| key        | type     | description                                                                                           |
| :--------- | :------- | :---------------------------------------------------------------------------------------------------- |
| action     | `string` | The action/type of the activity                                                                       |
| stage_name | `string` | The stage the candidate was in when the activity was created (if applicable)                          |
| created_at | `string` | The creation timestamp of the activity                                                                |
| candidate  | `object` | The candidate (if applicable), contains id and name                                                   |
| member     | `object` | The member that created the activity (if applicable), contains id and name of the member              |
| body       | `string` | The body of the activity, available if action is `comment`, `rating`, `message` or `disqualification` |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Query Params
- `limit` (integer): Specifies the number of members to try and retrieve per page (optional)
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID. (optional)
- `max_id` (string): Returns results with an ID less than or equal to the specified ID. (optional)

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/activities
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "activities": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "examples": [
              "event"
            ]
          },
          "stage_name": {},
          "created_at": {
            "type": "string",
            "examples": [
              "2017-01-18T10:31:06.947Z"
            ]
          },
          "candidate": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "30290210"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Osvaldo Keel"
                ]
              }
            }
          },
          "member": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3247e8c7"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Alexia Middleton"
                ]
              }
            }
          },
          "body": {}
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "3c81ce0450743"
  }
}

### Response Examples
```
{
  "activities": [
		{
      "action": "event",
      "stage_name": null,
      "created_at": "2017-01-18T10:31:06.947Z",
      "candidate": {
        "id": "30290210",
        "name": "Osvaldo Keel"
      },
      "member": {
        "id": "3247e8c7",
        "name": "Alexia Middleton"
      },
      "body": null
    },
    {
      "action": "uploaded",
      "stage_name": "Sourced",
      "created_at": "2016-09-25T00:00:00.000Z",
      "candidate": {
        "id": "1289a448",
        "name": "Harmon Carter"
      },
      "member": {
        "id": "19782abc",
        "name": "Nadia Sawahla"
      },
      "body": null
    },
    {
      "action": "message",
      "stage_name": null,
      "created_at": "2016-11-01T00:00:00.000Z",
      "candidate": {
        "id": "1cccc872",
        "name": "Manuel Stradford"
      },
      "body": "<p>Hi, Natalie</p>\n<p>I'm thrilled to receive the offer for the position and really excited to accept. Please find attached the signed offer letter. I can't wait to get started.<p>\n<p>Best,</p>\nManuel Stradford\n"
    },
    {
      "action": "comment",
      "stage_name": null,
      "created_at": "2016-11-13T06:05:00.000Z",
      "candidate": {
        "id": "23c8811a",
        "name": "Raphael Henley"
      },
      "member": {
        "id": "3f8918be",
        "name": "Natalie Sung"
      },
      "body": "Looks like a good candidate. @eduardo_vallente should we arrange a call?"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "1d9728d799e07"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "866ad593117d0"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /jobs/:shortcode/application_form

GET https://{subdomain}.workable.com/jobs/:shortcode/application_form

Returns the application form details for the specified job. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling the `/jobs/:shortcode/application_form` endpoint returns a JSON object with two arrays, one with the application form fields and one array with the job's questions.

This endpoint might be handy if you wan't to build a dynamic application form that will conform with the rules defined in the "Application Form" tab of Job Editor.

| key         | description          |
| :---------- | :------------------- |
| form_fields | array of form fields |
| questions   | array of questions   |

Each question has the following keys:

| key                  | type      | description                                                                                                               |
| :------------------- | :-------- | :------------------------------------------------------------------------------------------------------------------------ |
| id                   | `string`  | The question's id                                                                                                         |
| body                 | `string`  | The question's body                                                                                                       |
| type                 | `string`  | The question's type. Possible values are `free_text`, `multiple_choice`, `boolean`, `dropdown`, `numeric`, `date`, `file` |
| required             | `boolean` | Specifies whether providing an answer for this question is required                                                       |
| single_answer        | `boolean` | Defined only if question's type is `multiple_choice`                                                                      |
| choices              | `array`   | Defined only if question's type is `multiple_choice` or `dropdown`. An array specifying the possible answers.             |
| choices/id           | `string`  | The choice's id                                                                                                           |
| choices/body         | `string`  | The choice's text                                                                                                         |
| supported_file_types | `array`   | Defined only if question type is `file`. An array specifying the accepted file types for this question.                   |
| max_file_size        | `integer` | Defined only if question type is `file`. The maximum file size in bytes.                                                  |

Each form_field has the following keys:

| key                  | type      | description                                                                                        |
| :------------------- | :-------- | :------------------------------------------------------------------------------------------------- |
| key                  | `string`  | The application form's field key. This key matches with the candidate attribute as well            |
| label                | `string`  | The fields name.                                                                                   |
| type                 | `string`  | The fields type. Possible values are: `string`, `free_text`, `file`, `boolean`, `date`,  `complex` |
| required             | `boolean` | Indicates if this field is mandatory                                                               |
| fields               | `array`   | Defined in fields of type `complex`                                                                |
| supported_file_types | `array`   | Defined in fields of type `file`                                                                   |
| max_file_size        | `integer` | Defined in fields of type `file`                                                                   |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/application_form
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "form_fields": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "examples": [
              "headline"
            ]
          },
          "label": {
            "type": "string",
            "examples": [
              "Headline"
            ]
          },
          "type": {
            "type": "string",
            "examples": [
              "string"
            ]
          },
          "required": {
            "type": "boolean",
            "default": true,
            "examples": [
              true
            ]
          }
        }
      }
    },
    "questions": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "4da"
            ]
          },
          "body": {
            "type": "string",
            "examples": [
              "Describe a win situation"
            ]
          },
          "type": {
            "type": "string",
            "examples": [
              "free_text"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "94581febe2031"
  }
}

### Response Examples
```
{
  "form_fields": [
    {
      "key": "headline",
      "label": "Headline",
      "type": "string",
      "required": true
    },
    {
      "key": "address",
      "label": "Address",
      "type": "string",
      "required": false
    },
    {
      "key": "avatar",
      "label": "Photo",
      "type": "file",
      "supported_file_types": [
        "jpg",
        "jpeg",
        "gif",
        "png"
      ],
      "max_file_size": 5242880,
      "required": true
    },
    {
      "key": "experience",
      "label": "Experience",
      "type": "complex",
      "multiple": true,
      "required": false,
      "fields": [
        {
          "key": "title",
          "label": "Title",
          "type": "string",
          "required": true
        },
        {
          "key": "company",
          "label": "Company",
          "type": "string",
          "required": false
        },
        {
          "key": "industry",
          "label": "Industry",
          "type": "string",
          "required": false
        },
        {
          "key": "summary",
          "label": "Summary",
          "type": "free_text",
          "required": false
        },
        {
          "key": "current",
          "label": "I currently work here",
          "type": "boolean",
          "required": true
        },
        {
          "key": "start_date",
          "type": "date",
          "required": false
        },
        {
          "key": "end_date",
          "type": "date",
          "required": false
        }
      ]
    },
    {
      "key": "summary",
      "label": "Summary",
      "type": "free_text",
      "required": false
    },
    {
      "key": "resume",
      "label": "Resume",
      "type": "file",
      "supported_file_types": [
        "pdf",
        "doc",
        "docx",
        "odt",
        "rtf",
        "html",
        "htm",
        "txt"
      ],
      "max_file_size": 5242880,
      "required": false
    },
    {
      "key": "cover_letter",
      "label": "Cover letter",
      "type": "free_text",
      "required": false
    }
  ],
  "questions": [
    {
      "id": "4da",
      "body": "Describe a win situation",
      "type": "free_text"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "72c3a7982a62f"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "5649043300821"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /jobs/:shortcode/questions

GET https://{subdomain}.workable.com/jobs/:shortcode/questions

Returns the questions for the specified job. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling the `/jobs/:shortcode/questions` endpoint returns a JSON array of the job's questions.

| key       | description        |
| :-------- | :----------------- |
| questions | array of questions |

Each question has the following keys:

| key                  | type      | description                                                                                                               |
| :------------------- | :-------- | :------------------------------------------------------------------------------------------------------------------------ |
| id                   | `string`  | The question's id                                                                                                         |
| body                 | `string`  | The question's body                                                                                                       |
| type                 | `string`  | The question's type. Possible values are `free_text`, `multiple_choice`, `boolean`, `dropdown`, `numeric`, `date`, `file` |
| required             | `boolean` | Specifies whether providing an answer for this question is required                                                       |
| single_answer        | `boolean` | Defined only if question's type is `multiple_choice`                                                                      |
| choices              | `array`   | Defined only if question's type is `multiple_choice` or `dropdown`. An array specifying the possible answers.             |
| choices/id           | `string`  | The choice's id                                                                                                           |
| choices/body         | `string`  | The choice's text                                                                                                         |
| supported_file_types | `array`   | Defined only if question type is `file`. An array specifying the accepted file types for this question.                   |
| max_file_size        | `integer` | Defined only if question type is `file`. The maximum file size in bytes.                                                  |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/questions
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "questions": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "2128d717"
            ]
          },
          "body": {
            "type": "string",
            "examples": [
              "Explain one aspect of this role you believe you will excel at."
            ]
          },
          "type": {
            "type": "string",
            "examples": [
              "free_text"
            ]
          },
          "required": {
            "type": "boolean",
            "default": true,
            "examples": [
              true
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b62140a846842"
  }
}

### Response Examples
```
{
  "questions": [
    {
      "id": "2128d717",
      "body": "Explain one aspect of this role you believe you will excel at.",
      "type": "free_text",
      "required": true
    },
    {
      "id": "a8ee3a9",
      "body": "Explain one aspect of this role you believe will be a challenge.",
      "type": "free_text",
      "required": true
    },
    {
      "id": "1914385",
      "body": "How many years administrative experience do you have?",
      "type": "dropdown",
      "required": true,
      "single_answer": true,
      "choices": [
        {
          "id": "3f3c0265",
          "body": "0-3 years"
        },
        {
          "id": "2632b0fd",
          "body": "3-5 years"
        },
        {
          "id": "1135a194",
          "body": "Over 5 years"
        }
      ]
    },
    {
      "id": "1d3f348f",
      "body": "Intermediate or above proficiency with MS Office?",
      "type": "boolean",
      "required": true
    },
    {
      "id": "2cc66842",
      "body": "How would you describe yourself in a sentence?",
      "type": "short_text",
      "required": true
    },
    {
      "id": "3399e6cd",
      "body": "Which Microsoft Office tools are you familiar with?",
      "type": "multiple_choice",
      "required": true,
      "single_answer": false,
      "choices": [
        {
          "id": "3049114a",
          "body": "Word"
        },
        {
          "id": "29406296",
          "body": "Excel"
        },
        {
          "id": "1e477229",
          "body": "Powerpoint"
        }
      ]
    },
    {
      "id": "386d95ed",
      "body": "When does your work permit expire? (please fill in only if applicable)",
      "type": "date",
      "required": true
    },
    {
      "id": "1e6c9547",
      "body": "Work permit (please fill in only if applicable)",
      "type": "file",
      "required": true,
      "supported_file_types": [
        "pdf",
        "doc",
        "docx",
        "odt",
        "html",
        "rtf",
        "ppt",
        "pptx",
        "png",
        "jpg",
        "jpeg",
        "gif",
        "tiff",
        "txt",
        "xlsx",
        "xls",
        "pptx",
        "ppt",
        "zip"
      ],
      "max_file_size": 20971520
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "2a8a19d593142"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b085ef19e85a0"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /jobs/:shortcode/stages

GET https://{subdomain}.workable.com/jobs/:shortcode/stages

Returns a collection of your recruitment pipeline stages. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling the `/stages` endpoint will return a collection of the recruitment pipeline stages as defined in [recruiting preferences](https://www.workable.com/backend/account/recruiting_preferences) page

Each `stage` will have the following keys:

| key      | type      | description                                                                                                                                  |
| :------- | :-------- | :------------------------------------------------------------------------------------------------------------------------------------------- |
| slug     | `string`  | The unique token of the stage                                                                                                                |
| name     | `string`  | The stage name                                                                                                                               |
| kind     | `string`  | The type of the stage. Possible values are `sourced`, `applied`, `shortlisted`, `assessment`, `phone-screen`, `interview`, `offer` & `hired` |
| position | `integer` | The position of the stage in the pipeline (zero based)                                                                                       |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/stages
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "stages": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "examples": [
              "sourced"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Sourced"
            ]
          },
          "kind": {
            "type": "string",
            "examples": [
              "sourced"
            ]
          },
          "position": {
            "type": "integer",
            "default": 0,
            "examples": [
              0
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "0c5182ba76e96"
  }
}

### Response Examples
```
{
  "stages": [
    {
      "slug": "sourced",
      "name": "Sourced",
      "kind": "sourced",
      "position": 0
    },
    {
      "slug": "applied",
      "name": "Applied",
      "kind": "applied",
      "position": 1
    },
    {
      "slug": "phone-screen",
      "name": "Phone Screen",
      "kind": "phone-screen",
      "position": 2
    },
    {
      "slug": "interview",
      "name": "Interview",
      "kind": "interview",
      "position": 3
    },
    {
      "slug": "offer",
      "name": "Offer",
      "kind": "offer",
      "position": 4
    },
    {
      "slug": "hired",
      "name": "Hired",
      "kind": "hired",
      "position": 5
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "e7f37120b6ca7"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /jobs/:shortcode/custom_attributes

GET https://{subdomain}.workable.com/jobs/:shortcode/custom_attributes

Returns a collection of the custom attributes that are relevant to a specific job. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling the endpoint will return a collection of the custom attributes that are applicable for the specified job.

| key               | description                |
| :---------------- | :------------------------- |
| custom_attributes | array if custom attributes |

Each custom attribute will have the following keys:

| key                                  | type      | description                                                                                  |
| :----------------------------------- | :-------- | :------------------------------------------------------------------------------------------- |
| id                                   | `string`  | The custom attribute identifier                                                              |
| type                                 | `string`  | Custom attribute's type                                                                      |
| enabled                              | `boolean` | Custom attribute's state (enabled or disabled)                                               |
| label                                | `string`  | Custom attribute's label                                                                     |
| hint                                 | `string`  | Custom attribute's hint                                                                      |
| single_answer                        | `boolean` | Custom attribute's single answer state (enabled/disabled) when its type is `multiple_choice` |
| choices/id                           | `string`  | The choice attribute identifier                                                              |
| choices/body                         | `string`  | Choice's title                                                                               |
| choices/hint                         | `string`  | Choice's hint                                                                                |
| choices/translations/<language>/body | `string`  | Choice's title in specific language                                                          |
| choices/translations/<language>/hint | `string`  | Choice's hint in specific language                                                           |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/custom_attributes
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "custom_attributes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "1be9dd21"
            ]
          },
          "label": {
            "type": "string",
            "examples": [
              "Past professional experience"
            ]
          },
          "type": {
            "type": "string",
            "examples": [
              "boolean"
            ]
          },
          "required": {
            "type": "boolean",
            "default": true,
            "examples": [
              false
            ]
          },
          "provider": {
            "type": "string",
            "examples": [
              "candidate"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "0f0c237ae4cee"
  }
}

### Response Examples
```
{
  "custom_attributes": [
    {
      "id": "1be9dd21",
      "label": "Past professional experience",
      "type": "boolean",
      "required": false,
      "provider": "candidate"
    },
    {
      "id": "2e08ec9",
      "label": "Driver license expiration",
      "type": "date",
      "required": false,
      "provider": "candidate"
    },
    {
      "id": "35e7be38",
      "label": "Driver license grade",
      "type": "dropdown",
      "required": false,
      "provider": "candidate",
      "single_answer": true,
      "choices": [
        {
          "id": "125a1aab",
          "body": "Perfect"
        },
        {
          "id": "b53493f",
          "body": "Good"
        },
        {
          "id": "3c5479cc",
          "body": "Pass"
        }
      ]
    },
    {
      "id": "2b833193",
      "label": "Driver license",
      "type": "file",
      "required": false,
      "provider": "candidate",
      "supported_file_types": [
        "pdf",
        "doc",
        "docx",
        "odt",
        "rtf",
        "ppt",
        "pptx",
        "png",
        "jpg",
        "jpeg",
        "gif",
        "tiff",
        "xlsx",
        "xls",
        "zip"
      ],
      "max_file_size": 20971520
    },
    {
      "id": "1c842128",
      "label": "Disabilities",
      "type": "free_text",
      "required": false,
      "provider": "user"
    },
    {
      "id": "58d52c0",
      "label": "Languages",
      "type": "multiple_choice",
      "required": false,
      "provider": "candidate",
      "single_answer": false,
      "choices": [
        {
          "id": "1491dc12",
          "body": "English"
        },
        {
          "id": "d988b5a",
          "body": "German"
        },
        {
          "id": "3a9fbae3",
          "body": "French"
        }
      ]
    },
    {
      "id": "328a824f",
      "label": "Age",
      "type": "numeric",
      "required": false,
      "provider": "user"
    },
    {
      "id": "223565be",
      "label": "Preferred car models",
      "type": "short_text",
      "required": false,
      "provider": "candidate"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "75beb71d2977e"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /jobs/:shortcode/members

GET https://{subdomain}.workable.com/jobs/%7Bshortcode%7D/members

Returns a collection of your account members. Required scope: `r_jobs`. Accessible with account tokens and user tokens.

## Results

Calling the `/jobs/:shortcode/members` endpoint will return a collection of the [defined members](http://www.workable.com/backend/account/members) that are in the hiring team of the specified job. The role defined is on the account level.

Role mapping:  
`admin` - All Access / Super Admin  
`simple` - Standard role  
`reviewer` - Limited Acces / Reviewer  
`recruiter` - Recruiter

Each `member` will have the following keys:

| key                | type     | description                                                                                                                                                         |
| :----------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| id                 | `string` | The member identifier                                                                                                                                               |
| name               | `string` | The full name of the member                                                                                                                                         |
| headline           | `string` | The headline of the member                                                                                                                                          |
| email              | `string` | The email address of the member                                                                                                                                     |
| role               | `string` | The member's role. Possible values are `admin`, `simple`, `recruiter` and `reviewer`                                                                                |
| collaboration_role | `string` | The member's role in the hiring team of the specified job. Possible values are `admin`, `recruiting_admin`, `hiring_manager`, `simple`, `reviewer` and `recruiter`. |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \ https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/members
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "members": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "13e0eb0e"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Eduardo Vallente"
            ]
          },
          "headline": {
            "type": "string",
            "examples": [
              "Operations Manager"
            ]
          },
          "email": {
            "type": "string",
            "examples": [
              "eduardo.vallente@workabledemo.com"
            ]
          },
          "role": {
            "type": "string",
            "examples": [
              "admin"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "344fee8928816"
  }
}

### Response Examples
```
{
  "members": [
    {
      "id": "13e0eb0e",
      "name": "Eduardo Vallente",
      "headline": "Operations Manager",
      "email": "eduardo.vallente@workabledemo.com",
      "role": "admin"
    },
    {
      "id": "19782abc",
      "name": "Nadia Sawahla",
      "headline": "Talent Manager",
      "email": "nadia.sawahla@name.com",
      "role": "recruiter"
    },
    {
      "id": "3247e8c7",
      "name": "Alexia Middleton",
      "headline": "Commercial Director",
      "email": "alexia.middleton@workabledemo.com",
      "role": "simple"
    },
    {
      "id": "3c00c3ac",
      "name": "David Bodello",
      "headline": "IT Specialist Recruiter",
      "email": "david.bodellos@gmail.com",
      "role": "recruiter"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "69f7baf922320"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /jobs/:shortcode/recruiters

GET https://{subdomain}.workable.com/jobs/%7Bshortcode%7D/recruiters

Returns a collection of your account external recruiters. Required scope: `r_jobs`. Accessible with account tokens and user tokens.

## Results

Calling the `/jobs/:subdomain/recruiters` endpoint will return a collection of the [external recruiters](http://www.workable.com/backend/account/recruiters) that are collaborators in the specified job.

Each `recruiter` will have the following keys:

| key   | type     | description                        |
| :---- | :------- | :--------------------------------- |
| id    | `string` | The recruiter identifier           |
| name  | `string` | The full name of the recruiter     |
| email | `string` | The email address of the recruiter |


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/recruiters
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "recruiters": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "19782abc"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Nadia Sawahla"
            ]
          },
          "email": {
            "type": "string",
            "examples": [
              "nadia.sawahla@name.com"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "80fa90194b8ba"
  }
}

### Response Examples
```
{
  "recruiters": [
    {
      "id": "19782abc",
      "name": "Nadia Sawahla",
      "email": "nadia.sawahla@name.com"
    },
    {
      "id": "3c00c3ac",
      "name": "David Bodello",
      "email": "david.bodellos@gmail.com"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "baec9314f7a5d"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

================================================================================

# /candidates

GET https://{subdomain}.workable.com/candidates

Returns a collection of the job's candidates. Required scope: `r_candidates`. Accessible with all token types.

## Results

Calling the `/candidates` endpoint will return a collection of the job's candidates. If no query parameter is defined, all candidates will be returned.

By default results are limited to 50. The limit can be updated via the request parameter limit. The value specified cannot be more than 100 per page.

| key        | description                                                                                                       |
| :--------- | :---------------------------------------------------------------------------------------------------------------- |
| candidates | array of candidates                                                                                               |
| paging     | Includes the `next` URL pointing to the next results page, in case there are more results than the provided limit |

Each candidate will have the following keys:

| key                     | type      | description                                               |
| :---------------------- | :-------- | :-------------------------------------------------------- |
| id                      | `string`  | The candidate identifier                                  |
| name                    | `string`  | Candidate's full name                                     |
| firstname               | `string`  | Candidate's first name                                    |
| lastname                | `string`  | Candidate's last name                                     |
| headline                | `string`  | Candidate's headline                                      |
| account/subdomain       | `string`  | Account's subdomain                                       |
| account/name            | `string`  | Account's name                                            |
| job/shortcode           | `string`  | Job's system generated code                               |
| job/title               | `string`  | Job's title                                               |
| stage                   | `string`  | Candidate's stage slug                                    |
| disqualified            | `boolean` | True if candidate is disqualified                         |
| disqualification_reason | `string`  | null if member has not provided a disqualification reason |
| sourced                 | `boolean` | True if candidate has been sourced                        |
| profile_url             | `string`  | Candidate's URL in Workable                               |
| email                   | `string`  | Candidate's email                                         |
| domain                  | `string`  | Where candidate came from                                 |
| created_at              | `string`  | Timestamp when candidate  was created                     |
| updated_at              | `string`  | Last timestamp when candidate was updated                 |
| hired_at                | `date`    | The date the candidate was moved to the hired stage       |
| address                 | `string`  | The address of the candidate                              |
| phone                   | `string`  | The phone number of the candidate                         |


## Request

### Query Params
- `shortcode` (string): The job's system generated code
- `stage` (string): The job's stage slug, can be retrieved from the `/stages` endpoint
- `limit` (integer): Specifies the number of candidates to try and retrieve per page
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID.
- `max_id` (string): Returns results with an ID less than or equal to the specified ID.
- `created_after` (string): Returns results created after the specified timestamp.
- `updated_after` (string): Returns results updated after the specified timestamp.

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/candidates
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidates": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "ce4da98"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Lakita Marrero"
            ]
          },
          "firstname": {
            "type": "string",
            "examples": [
              "Lakita"
            ]
          },
          "lastname": {
            "type": "string",
            "examples": [
              "Marrero"
            ]
          },
          "headline": {
            "type": "string",
            "examples": [
              "Operations Manager"
            ]
          },
          "account": {
            "type": "object",
            "properties": {
              "subdomain": {
                "type": "string",
                "examples": [
                  "groove-tech"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Groove Tech"
                ]
              }
            }
          },
          "job": {
            "type": "object",
            "properties": {
              "shortcode": {
                "type": "string",
                "examples": [
                  "GROOV005"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Office Manager"
                ]
              }
            }
          },
          "stage": {
            "type": "string",
            "examples": [
              "Interview"
            ]
          },
          "disqualified": {
            "type": "boolean",
            "default": true,
            "examples": [
              true
            ]
          },
          "disqualification_reason": {},
          "sourced": {
            "type": "boolean",
            "default": true,
            "examples": [
              false
            ]
          },
          "profile_url": {
            "type": "string",
            "examples": [
              "https://groove-tech.workable.com/backend/jobs/376844767/candidates/216323526"
            ]
          },
          "email": {
            "type": "string",
            "examples": [
              "lakita_marrero@gmail.com"
            ]
          },
          "domain": {
            "type": "string",
            "examples": [
              "twitter.com"
            ]
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2015-06-26T00:00:00Z"
            ]
          },
          "updated_at": {
            "type": "string",
            "examples": [
              "2015-07-08T14:46:48Z"
            ]
          }
        }
      }
    },
    "paging": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string",
          "examples": [
            "https://www.workable.com/spi/v3/accounts/groove-tech/candidates?limit=3&since_id=2789d6dg"
          ]
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "de8af5e500004"
  }
}

### Response Examples
```
{
  "candidates": [
    {
      "id": "ce4da98",
      "name": "Lakita Marrero",
      "firstname": "Lakita",
      "lastname": "Marrero",
      "headline": "Operations Manager",
      "account": {
        "subdomain": "groove-tech",
        "name": "Groove Tech"
      },
      "job": {
        "shortcode": "GROOV005",
        "title": "Office Manager"
      },
      "stage": "Interview",
      "disqualified": true,
      "disqualification_reason": null,
      "sourced": false,
      "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/216323526",
      "email": "lakita_marrero@gmail.com",
      "domain": "twitter.com",
      "created_at": "2015-06-26T00:00:00Z",
      "updated_at": "2015-07-08T14:46:48Z"
    },
    {
      "id": "108d1748",
      "name": "Cindy Sawyers",
      "firstname": "Cindy",
      "lastname": "Sawyers",
      "headline": "Talented Operations Executive",
      "account": {
        "subdomain": "groove-tech",
        "name": "Groove Tech"
      },
      "job": {
        "shortcode": "GROOV005",
        "title": "Office Manager"
      },
      "stage": "Applied",
      "disqualified": false,
      "disqualification_reason": null,
      "sourced": false,
      "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/277680758",
      "email": "cindy_sawyers@gmail.com",
      "domain": "indeed.com",
      "created_at": "2015-07-08T00:00:00Z",
      "updated_at": "2015-07-08T14:46:48Z"
    }
  ],
  "paging": {
    "next": "https://www.workable.com/spi/v3/accounts/groove-tech/candidates?limit=3&since_id=2789d6dg"
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "5daf70af2beef"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "8053d9ab40f68"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /candidates

POST https://{subdomain}.workable.com/jobs/:shortcode/candidates

Creates a candidate at the specified job. Required scope: `w_candidates`. Accessible with all token types.

This endpoint creates candidates in a specific job. There are a few cases where this might come in handy:

- **Custom application form**: If you have built an application form on your web site that you‚Äôd like to keep using, you can continue to have candidates apply using that form and then use the API to transfer the candidates to your Workable account.
- **Migration of existing candidates**: If you have a list of candidates in a spreadsheet or in another system, you can use the API to create all these candidates in Workable.
- **Integration with other systems**: Any system that holds people profiles can use the API to transfer these profiles to Workable.

> üìò Process as uploaded or applied?
> 
> Candidates created through the API can be processed by Workable either as candidates uploaded by a Workable user or as candidates that applied through the application form. The difference is that, in the latter case,  they will also receive a ‚Äòthank you for applying‚Äô email.
> 
> You can create an 'applied' candidate by including the `"sourced": false` at the root level. This will ensure that the candidate does receive the ‚Äúthank you for applying‚Äù e-mail.

> üöß Candidates in job or talent pool?
> 
> Use this endpoint if you want to create candidates in a specific jobs. To create candidates in the account's talent pool use the [POST /talent_pool/candidates](ref:talent-pool-candidates-create) endpoint.

> ‚ùóÔ∏è Important!
> 
> A major difference with the previous API versions is that if the `sourced` flag is not included, candidates are considered as uploaded and not as applied, thus not receiving the "thank you for applying" email.

Here is a list of fields that can be provided:

| key                     | type            | description                                                                                                                             |
| :---------------------- | :-------------- | :-------------------------------------------------------------------------------------------------------------------------------------- |
| name (required)         | `string`        | This field is optional if `firstname` and `lastname` are provided                                                                       |
| firstname (required)    | `string`        | The candidate's first name, It's optional if `name` is provided                                                                         |
| lastname (required)     | `string`        | The candidate's last name, it's optional if `name` is provided                                                                          |
| email (required)        | `string`        | The candidate's email                                                                                                                   |
| headline                | `string`        | One line description as provided by the candidate or you                                                                                |
| summary                 | `string`        | The profile summary provided by the candidate                                                                                           |
| address                 | `string`        | The candidate's address                                                                                                                 |
| phone                   | `string`        | The candidate's phone number                                                                                                            |
| cover_letter            | `string`        | The candidate's cover letter                                                                                                            |
| education_entries       | `array`         | Explained [below](job-candidates-create#how-can-i-post-the-candidates-education)                                                        |
| experience_entries      | `array`         | Explained [below](job-candidates-create#how-can-i-post-the-candidates-experience)                                                       |
| answers                 | `array`         | Explained [below](job-candidates-create#how-can-i-post-the-candidates-answers)                                                          |
| skills                  | `string` (list) | The candidate's skills.                                                                                                                 |
| tags                    | `array`         | A list of the candidate's tags                                                                                                          |
| disqualified            | `boolean`       | If true, it will mark the candidate as diqualified                                                                                      |
| disqualification_reason | `string`        | Required only when EOCC is enabled for your account                                                                                     |
| disqualified_at         | `string`        | In ISO 8601 format (YYYY-MM-DD). If you leave this field empty, we will use the current timestamp                                       |
| social_profiles         | `array`         | Explained [below](job-candidates-create#can-i-also-provide-social-profiles-for-my-candidat)                                             |
| domain                  | `string`        | The source of the candidate                                                                                                             |
| recruiter_key           | `string`        | Explained [below](job-candidates-create#i-am-collaborating-with-recruiters-how-can-i-create-a-candidate-that-is-sourced-by-a-recruiter) |

Here is the structure of a complete example:

```json
{
  "sourced": true,
  "candidate": {
    "name": "Jj Botha",
    "firstname": "Jj",
    "lastname": "Botha",
    "headline": "Professional Administration Manager",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",

    "education_entries": [
      { "degree": "MBA", "school": "University of Pennsylvania", "field_of_study": null, "start_date": "2008-03-01", "end_date": "2011-03-30" },
      { "degree": "B.S.", "school": "University of Chicago", "field_of_study": "Marketing Communication & Economics", "start_date": "2004-09-01", "end_date": "2007-03-30" }
    ],

    "experience_entries": [
      {
        "title": "Sales Director",
        "summary": null,
        "start_date": "2011-03-01",
        "end_date": "2014-03-30",
        "current": false,
        "company": "Vox Mobile",
        "industry": "Telecommunications"
      }
    ],

    "answers": [
      {
        "question_key": "2128d717",
        "body": "Planning"
      },
      {
        "question_key": "3399e6cd",
        "choices": ["1e477229"]
      }
    ],

    "skills": [ "Travel Planning", "Problem Solving"],
    "social_profiles": [
        {
          "type": "twitter",
          "name": "Twitter",
          "username": "jj_botha",
          "url": "http://www.twitter.com/jj_botha"
        },
        {
          "type": "linkedin",
          "name": "LinkedIn",
          "url": "http://www.linkedin.com/in/jj_botha"
        },
        {
          "type": "googleplus",
          "url": "https://plus.google.com/6908286706342698"
        }
    ]
  }
}
```

## How can I post the candidate‚Äôs resume along with the candidate information?

You can post the candidate‚Äôs resume in `.pdf`, `.doc`, `.docx`, `.rtf` format. The API accepts one of the following

| key        | type     | description                              |
| :--------- | :------- | :--------------------------------------- |
| resume_url | `string` | a url pointing to the candidate‚Äôs resume |

or alternatively you can post the resume encoded in base64 by including a 'resume' key with an object as a value, that has the following keys

| key  | type     | description                              |
| :--- | :------- | :--------------------------------------- |
| name | `string` | the candidate‚Äôs resume name              |
| data | `string` | the candidate‚Äôs resume encoded in base64 |

Here is an example including a resume encoded in base64 format:

```json
{
  "candidate": {
    "name": "Jj Botha",
    "firstname": "Jj",
    "lastname": "Botha",
    "headline": "Professional Administration Manager",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "resume": {
      "name": "jj_botha.doc",
      "data": "6622116356e175ed0394b0d=="
    }
  }
}
```

## How can I post the candidate‚Äôs education?

Candidate‚Äôs education is a list of entries. Each entry containing the following fields:

| key               | type     | description                     |
| :---------------- | :------- | :------------------------------ |
| school (required) | `string` | The candidate's school          |
| degree            | `string` | The candidate's degree          |
| field_of_study    | `string` | The candidate's field of study  |
| start_date        | `string` | In ISO 8601 format (YYYY-MM-DD) |
| end_date          | `string` | In ISO 8601 format (YYYY-MM-DD) |

## How can I post the candidate‚Äôs experience?

Candidate‚Äôs experience is a list of entries. Each entry containing the following fields:

| key              | type      | description                             |
| :--------------- | :-------- | :-------------------------------------- |
| title (required) | `string`  | The candidate's title                   |
| summary          | `string`  | A summary of the candidate's experience |
| company          | `string`  | The candidate's company                 |
| industry         | `string`  | The candidate's working industry        |
| start_date       | `string`  | In ISO 8601 format (YYYY-MM-DD)         |
| end_date         | `string`  | In ISO 8601 format (YYYY-MM-DD)         |
| current          | `boolean` | True if candidate still works there     |

## How can I post the candidate's answers?

Each workable position can have a list of associated questions that can be retrieved from the  `/jobs/:shortcode/questions` endpoint. For each question, an answer can be provided by adding the answers list in the posted data. For each question, add to the answers list the following attributes based on question‚Äôs type.

**Free text questions** 

| key                     | type     | description              |
| :---------------------- | :------- | :----------------------- |
| question_key (required) | `string` | The question key         |
| body (required)         | `string` | The candidate's response |

**Short text questions**

| key                     | type     | description                                       |
| :---------------------- | :------- | :------------------------------------------------ |
| question_key (required) | `string` | The question key                                  |
| body (required)         | `string` | The candidate's response (maximum 128 characters) |

**Boolean questions** 

| key                     | type      | description      |
| :---------------------- | :-------- | :--------------- |
| question_key (required) | `string`  | The question key |
| checked (required)      | `boolean` | true \| false    |

**Multiple choice questions** 

| key                     | type     | description                                                                 |
| :---------------------- | :------- | :-------------------------------------------------------------------------- |
| question_key (required) | `string` | The question key                                                            |
| choices (required)      | `array`  | [choices_ids]. For single answer questions provide only one selected choice |

**Dropdown questions**

| key                     | type     | description                                     |
| :---------------------- | :------- | :---------------------------------------------- |
| question_key (required) | `string` | The question key                                |
| choices (required)      | `array`  | [choices_ids]. Provide only one selected choice |

**Date questions**

| key                     | type     | description                                     |
| :---------------------- | :------- | :---------------------------------------------- |
| question_key (required) | `string` | The question key                                |
| date                    | `string` | The date in ISO 8601 format (i.e. "2017-05-22") |

**Numeric question**

| key                     | type     | description                                                                               |
| :---------------------- | :------- | :---------------------------------------------------------------------------------------- |
| question_key (required) | `string` | The question key                                                                          |
| value                   | `number` | The value may be an integer or floating point number (use '.' as decimal point separator) |

**File question**

| key                     | type     | description                              |
| :---------------------- | :------- | :--------------------------------------- |
| question_key (required) | `string` | The question key                         |
| file_url                | `string` | a url pointing to the candidate‚Äôs answer |

or alternatively you can post the answer encoded in base64 by including a file key with an object as a value, that has the following keys:

| key  | type     | description                              |
| :--- | :------- | :--------------------------------------- |
| name | `string` | The file name                            |
| data | `string` | The candidate‚Äôs answer encoded in base64 |

You can have a look below:

```json Example answers
{
  "answers": [
    {
      "question_key": "dc3e",
      "body": "Sublime Editor"
    },
    {
      "question_key": "2d30",
      "checked": true
    },
    {
      "question_key": "dc3f",
      "choices": ["e2b", "e2d"]
    },
    {
      "question_key": "dc3b",
      "date": "2017-01-28"
    },
    {
      "question_key": "dc3c",
      "number": 21.87
    },
    {
      "question_key": "dc3d",
      "file": {
        "name": "answer.pdf",
        "data": "SGVsbG8h....SbGh"
      }
    }
  ]
}
```

## I am collaborating with recruiters. How can I create a candidate that is sourced by a recruiter?

You can include the recruiter_key in the posted data. Recruiter keys can be retrieved from the `jobs/:shortcode/recruiters` endpoint.

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      "headline":"Superhero developer",
      "summary":"",
      "address":"",
      "phone":"",

      ....

      "recruiter_key":"a34526b"

      ....

}
```

## Can I also provide social profiles for my candidates?

Yes, you can provide social profiles by including the ‚Äòsocial_profiles‚Äô section:

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      "headline":"Superhero developer",
      "summary":"",
      "address":"",
      "phone":"",

      ....

      "social_profiles":[
         {
            "type":"twitter",
            "username":"Workable",
            "url":"https://twitter.com/workable" 
         }
      ]

      ....

}
```

‚Äòsocial_profiles‚Äô is a list of social profiles, and you can provide one social profile url for each social network type. Each entry contains the following fields:

| key             | type     | description|
| :-------------- | :------- ||
| type (required) | `string` | One of the following types: `academiaedu`, `angellist`, `behance`, `bitbucket`, `blogger`, `crunchbase`, `dandyid`, `delicious`, `deviantart`, `digg`, `doyoubuzz`, `dribble`, `dribbble`, `econsultancy`, `facebook`, `flavorsme`, `flickr`, `fullcontact`, `getglue`, `gist`, `github`, `goodreads`, `googleplus`, `gravatar`, `hackernews`, `hiim`, `klout`, `lanyrd`, `linkedin`, `myspace`, `ohloh`, `orkut`, `pinterest`, `quora`, `reddit`, `scribd`, `slideshare`, `stackexchange`, `stackoverflow`, `tumblr`, `twitter`, `typepad`, `vk`, `wordpress`, `xing` |
| username        | `string` | The candidate's username|
| url (required)  | `string` | The candidate's|

## How can I post candidates that are already disqualified?

You can do that by including the `"disqualified": true` along with the candidate‚Äôs data. This will ensure that the candidate is marked disqualified in workable. Notice that if EOCC is enabled for your account, you will also need to provide the `"disqualification_reason": "some reason"` field too.

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      ....
      "disqualified":true
      ....
   }
}
```


## Request

### Path Params
- `shortcode` (required string): The job's shortcode

### Query Params
- `stage` (string): Depending on the value of the `sourced` flag, candidates are put into the `sourced` or `applied` stage. But you can set this if you want to create a candidate directly in another stage. Values can be retrieved from the `jobs/:shortcode/stages` endpoint

### Request Body (application/json)
{
  "type": "object",
  "properties": {
    "RAW_BODY": {
      "type": "string",
      "description": "The candidate data",
      "format": "json"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "9a75154a72c90"
  }
}

### Request Examples
```
curl 	-X POST \
			-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/jobs/<shortcode>/candidates \
			--data '{"candidate": { "firstname": "Jj", "lastname": "Botha", "email": "jj_botha@fakemail.com"} }'
```

## 201 Response
201

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "status": {
      "type": "string",
      "examples": [
        "created"
      ]
    },
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "3fc9a80f"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "Jj Botha"
          ]
        },
        "firstname": {},
        "lastname": {},
        "headline": {
          "type": "string",
          "examples": [
            "Professional Administration Manager"
          ]
        },
        "account": {
          "type": "object",
          "properties": {
            "subdomain": {
              "type": "string",
              "examples": [
                "groove-tech"
              ]
            },
            "name": {
              "type": "string",
              "examples": [
                "Groove Tech"
              ]
            }
          }
        },
        "job": {
          "type": "object",
          "properties": {
            "shortcode": {
              "type": "string",
              "examples": [
                "GROOV005"
              ]
            },
            "title": {
              "type": "string",
              "examples": [
                "Office Manager"
              ]
            }
          }
        },
        "stage": {
          "type": "string",
          "examples": [
            "Sourced"
          ]
        },
        "disqualified": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "disqualified_at": {},
        "disqualification_reason": {},
        "sourced": {
          "type": "boolean",
          "default": true,
          "examples": [
            true
          ]
        },
        "profile_url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133"
          ]
        },
        "address": {
          "type": "string",
          "examples": [
            "25772 Gustave Shore, Iowa, USA"
          ]
        },
        "phone": {
          "type": "string",
          "examples": [
            "1-859-557-6573"
          ]
        },
        "email": {
          "type": "string",
          "examples": [
            "jj_botha@fakemail.com"
          ]
        },
        "outbound_mailbox": {
          "type": "string",
          "examples": [
            "b-6adwdc@outbound.dev-workable.mailgun.org"
          ]
        },
        "domain": {},
        "uploader_id": {},
        "created_at": {
          "type": "string",
          "examples": [
            "2015-07-09T10:55:53Z"
          ]
        },
        "updated_at": {
          "type": "string",
          "examples": [
            "2015-07-09T10:55:53Z"
          ]
        },
        "cover_letter": {
          "type": "string",
          "examples": [
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          ]
        },
        "summary": {
          "type": "string",
          "examples": [
            "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions."
          ]
        },
        "education_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fcbeedf"
                ]
              },
              "degree": {
                "type": "string",
                "examples": [
                  "MBA"
                ]
              },
              "school": {
                "type": "string",
                "examples": [
                  "University of Pennsylvania"
                ]
              },
              "field_of_study": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2008-03-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2011-03-30"
                ]
              }
            }
          }
        },
        "experience_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fdbfd0d"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Sales Director"
                ]
              },
              "summary": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2011-03-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2014-03-30"
                ]
              },
              "company": {
                "type": "string",
                "examples": [
                  "Vox Mobile"
                ]
              },
              "industry": {
                "type": "string",
                "examples": [
                  "Telecommunications"
                ]
              },
              "current": {
                "type": "boolean",
                "default": true,
                "examples": [
                  false
                ]
              }
            }
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "travel planning"
                ]
              }
            }
          }
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "question": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "Explain one aspect of this role you believe you will excel at."
                    ]
                  }
                }
              },
              "answer": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "<p>Planning</p>"
                    ]
                  }
                }
              }
            }
          }
        },
        "resume_url": {},
        "social_profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "examples": [
                  "twitter"
                ]
              },
              "username": {
                "type": "string",
                "examples": [
                  "jj_botha"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "http://www.twitter.com/jj_botha"
                ]
              }
            }
          }
        },
        "tags": {
          "type": "array"
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b017fe4a1a11e"
  }
}

### Response Examples
```
{
  "status": "created",
  "candidate": {
    "id": "3fc9a80f",
    "name": "Jj Botha",
    "firstname": null,
    "lastname": null,
    "headline": "Professional Administration Manager",
    "account": {
      "subdomain": "groove-tech",
      "name": "Groove Tech"
    },
    "job": {
      "shortcode": "GROOV005",
      "title": "Office Manager"
    },
    "stage": "Sourced",
    "disqualified": false,
    "disqualified_at": null,
    "disqualification_reason": null,
    "sourced": true,
    "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "outbound_mailbox": "b-6adwdc@outbound.dev-workable.mailgun.org",
    "domain": null,
    "uploader_id": null,
    "created_at": "2015-07-09T10:55:53Z",
    "updated_at": "2015-07-09T10:55:53Z",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "education_entries": [
      {
        "id": "3fcbeedf",
        "degree": "MBA",
        "school": "University of Pennsylvania",
        "field_of_study": null,
        "start_date": "2008-03-01",
        "end_date": "2011-03-30"
      },
      {
        "id": "3fcbeee0",
        "degree": "B.S.",
        "school": "University of Chicago",
        "field_of_study": "Marketing Communication & Economics",
        "start_date": "2004-09-01",
        "end_date": "2007-03-30"
      }
    ],
    "experience_entries": [
      {
        "id": "3fdbfd0d",
        "title": "Sales Director",
        "summary": null,
        "start_date": "2011-03-01",
        "end_date": "2014-03-30",
        "company": "Vox Mobile",
        "industry": "Telecommunications",
        "current": false
      }
    ],
    "skills": [
      {
        "name": "travel planning"
      },
      {
        "name": "problem solving"
      }
    ],
    "answers": [
      {
        "question": {
          "body": "Explain one aspect of this role you believe you will excel at."
        },
        "answer": {
          "body": "<p>Planning</p>"
        }
      },
      {
        "question": {
          "body": "How many years administrative experience do you have?"
        },
        "answer": {
          "choices": [
            {
              "body": "Over 5 years"
            }
          ]
        }
      }
    ],
    "resume_url": null,
    "social_profiles": [
      {
        "type": "twitter",
        "username": "jj_botha",
        "url": "http://www.twitter.com/jj_botha"
      },
      {
        "type": "linkedin",
        "url": "http://www.linkedin.com/in/jj_botha"
      },
      {
        "type": "googleplus",
        "url": "https://plus.google.com/6908286706342698"
      }
    ],
    "tags": []
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "e2a4f3b514947"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "c12f2e8ee4c33"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

## 422 Response
422

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Validation failed: Email candidate already exists"
      ]
    },
    "validation_errors": {
      "type": "object",
      "properties": {
        "email": {
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "candidate already exists"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "13ebc53b8797c"
  }
}

### Response Examples
```
{
  "error": "Validation failed: Email candidate already exists",
  "validation_errors": {
    "email": [
      "candidate already exists"
    ]
  }
}
```

================================================================================

# /talent_pool/candidates

POST https://{subdomain}.workable.com/talent_pool/%7Bstage%7D/candidates

Creates a candidate at the specified job. Required scope: `w_candidates`. Accessible with all token types.

There are a few cases where this might come in handy:

- **Custom application form**: If you have built an application form on your web site that you‚Äôd like to keep using, you can continue to have candidates apply using that form and then use the API to transfer the candidates to your Workable account.
- **Migration of existing candidates**: If you have a list of candidates in a spreadsheet or in another system, you can use the API to create all these candidates in Workable.
- **Integration with other systems**: Any system that holds people profiles can use the API to transfer these profiles to Workable.

> üìò Process as uploaded or applied?
> 
> Candidates created through the API can be processed by Workable either as candidates uploaded by a Workable user or as candidates that applied through the application form. The difference is that, in the latter case,  they will also receive a ‚Äòthank you for applying‚Äô email.
> 
> You can create an 'applied' candidate by including the `"sourced": false` at the root level. This will ensure that the candidate does receive the ‚Äúthank you for applying‚Äù e-mail.

> üöß Candidates in job or talent pool?
> 
> Use this endpoint if you want to create candidates in the account talent pool. To create candidates in specific jobs use the [POST /candidates](ref:job-candidates-create) endpoint.

> ‚ùóÔ∏è Important!
> 
> A major difference with the previous API versions is that if the `sourced` flag is not included, candidates are considered as uploaded and not as applied, thus not receiving the "thank you for applying" email.

Here is a list of fields that can be provided:

| key                     | type            | description                                                                                                                                     |
| :---------------------- | :-------------- | :---------------------------------------------------------------------------------------------------------------------------------------------- |
| name (required)         | `string`        | This field is optional if `firstname` and `lastname` are provided                                                                               |
| firstname (required)    | `string`        | The candidate's first name, It's optional if `name` is provided                                                                                 |
| lastname (required)     | `string`        | The candidate's last name, it's optional if `name` is provided                                                                                  |
| email (required)        | `string`        | The candidate's email                                                                                                                           |
| headline                | `string`        | One line description as provided by the candidate or you                                                                                        |
| summary                 | `string`        | The profile summary provided by the candidate                                                                                                   |
| address                 | `string`        | The candidate's address                                                                                                                         |
| phone                   | `string`        | The candidate's phone number                                                                                                                    |
| cover_letter            | `string`        | The candidate's cover letter                                                                                                                    |
| education_entries       | `array`         | Explained [below](job-candidates-create#how-can-i-post-the-candidates-education)                                                                |
| experience_entries      | `array`         | Explained [below](job-candidates-create#how-can-i-post-the-candidates-experience)                                                               |
| skills                  | `string` (list) | The candidate's skills.                                                                                                                         |
| tags                    | `array`         | A list of the candidate's tags                                                                                                                  |
| disqualified            | `boolean`       | If true, it will mark the candidate as diqualified                                                                                              |
| disqualification_reason | `string`        | Required only when EOCC is enabled for your account                                                                                             |
| disqualified_at         | `string`        | In ISO 8601 format (YYYY-MM-DD). If you leave this field empty, we will use the current timestamp                                               |
| social_profiles         | `array`         | Explained [below](job-candidates-create#can-i-also-provide-social-profiles-for-my-candidat)                                                     |
| domain                  | `string`        | The source of the candidate                                                                                                                     |
| recruiter_key           | `string`        | Explained [below](talent-pool-candidates-create#i-am-collaborating-with-recruiters-how-can-i-create-a-candidate-that-is-sourced-by-a-recruiter) |

Here is the structure of a complete example:

```json
{
  "sourced": true,
  "candidate": {
    "name": "Jj Botha",
    "firstname": "Jj",
    "lastname": "Botha",
    "headline": "Professional Administration Manager",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",

    "education_entries": [
      { "degree": "MBA", "school": "University of Pennsylvania", "field_of_study": null, "start_date": "2008-03-01", "end_date": "2011-03-30" },
      { "degree": "B.S.", "school": "University of Chicago", "field_of_study": "Marketing Communication & Economics", "start_date": "2004-09-01", "end_date": "2007-03-30" }
    ],

    "experience_entries": [
      {
        "title": "Sales Director",
        "summary": null,
        "start_date": "2011-03-01",
        "end_date": "2014-03-30",
        "current": false,
        "company": "Vox Mobile",
        "industry": "Telecommunications"
      }
    ],
    "skills": [ "Travel Planning", "Problem Solving"],
    "social_profiles": [
        {
          "type": "twitter",
          "name": "Twitter",
          "username": "jj_botha",
          "url": "http://www.twitter.com/jj_botha"
        },
        {
          "type": "linkedin",
          "name": "LinkedIn",
          "url": "http://www.linkedin.com/in/jj_botha"
        },
        {
          "type": "googleplus",
          "url": "https://plus.google.com/6908286706342698"
        }
    ]
  }
}
```

## How can I post the candidate‚Äôs resume along with the candidate information?

You can post the candidate‚Äôs resume in `.pdf`, `.doc`, `.docx`, `.rtf` format. The API accepts one of the following

| key        | type     | description                              |
| :--------- | :------- | :--------------------------------------- |
| resume_url | `string` | a url pointing to the candidate‚Äôs resume |

or alternatively you can post the resume encoded in base64 by including a 'resume' key with an object as a value, that has the following keys

| key  | type     | description                              |
| :--- | :------- | :--------------------------------------- |
| name | `string` | the candidate‚Äôs resume name              |
| data | `string` | the candidate‚Äôs resume encoded in base64 |

Here is an example including a resume encoded in base64 format:

```json
{
  "candidate": {
    "name": "Jj Botha",
    "firstname": "Jj",
    "lastname": "Botha",
    "headline": "Professional Administration Manager",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "resume": {
      "name": "jj_botha.doc",
      "data": "6622116356e175ed0394b0d=="
    }
  }
}
```

## How can I post the candidate‚Äôs education?

Candidate‚Äôs education is a list of entries. Each entry containing the following fields:

| key               | type     | description                     |
| :---------------- | :------- | :------------------------------ |
| school (required) | `string` | The candidate's school          |
| degree            | `string` | The candidate's degree          |
| field_of_study    | `string` | The candidate's field of study  |
| start_date        | `string` | In ISO 8601 format (YYYY-MM-DD) |
| end_date          | `string` | In ISO 8601 format (YYYY-MM-DD) |

## How can I post the candidate‚Äôs experience?

Candidate‚Äôs experience is a list of entries. Each entry containing the following fields:

| key              | type      | description                             |
| :--------------- | :-------- | :-------------------------------------- |
| title (required) | `string`  | The candidate's title                   |
| summary          | `string`  | A summary of the candidate's experience |
| company          | `string`  | The candidate's company                 |
| industry         | `string`  | The candidate's working industry        |
| start_date       | `string`  | In ISO 8601 format (YYYY-MM-DD)         |
| end_date         | `string`  | In ISO 8601 format (YYYY-MM-DD)         |
| current          | `boolean` | True if candidate still works there     |

## I am collaborating with recruiters. How can I create a candidate that is sourced by a recruiter?

You can include the recruiter_key in the posted data. Recruiter keys can be retrieved from the `jobs/:shortcode/recruiters` endpoint.

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      "headline":"Superhero developer",
      "summary":"",
      "address":"",
      "phone":"",

      ....

      "recruiter_key":"a34526b"

      ....

}
```

## Can I also provide social profiles for my candidates?

Yes, you can provide social profiles by including the ‚Äòsocial_profiles‚Äô section:

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      "headline":"Superhero developer",
      "summary":"",
      "address":"",
      "phone":"",

      ....

      "social_profiles":[
         {
            "type":"twitter",
            "username":"Workable",
            "url":"https://twitter.com/workable" 
         }
      ]

      ....

}
```

‚Äòsocial_profiles‚Äô is a list of social profiles, and you can provide one social profile url for each social network type. Each entry contains the following fields:

| key             | type     | description|
| :-------------- | :------- ||
| type (required) | `string` | One of the following types: `academiaedu`, `angellist`, `behance`, `bitbucket`, `blogger`, `crunchbase`, `dandyid`, `delicious`, `deviantart`, `digg`, `doyoubuzz`, `dribble`, `dribbble`, `econsultancy`, `facebook`, `flavorsme`, `flickr`, `fullcontact`, `getglue`, `gist`, `github`, `goodreads`, `googleplus`, `gravatar`, `hackernews`, `hiim`, `klout`, `lanyrd`, `linkedin`, `myspace`, `ohloh`, `orkut`, `pinterest`, `quora`, `reddit`, `scribd`, `slideshare`, `stackexchange`, `stackoverflow`, `tumblr`, `twitter`, `typepad`, `vk`, `wordpress`, `xing` |
| username        | `string` | The candidate's username|
| url (required)  | `string` | The candidate's|

## How can I post candidates that are already disqualified?

You can do that by including the `"disqualified": true` along with the candidate‚Äôs data. This will ensure that the candidate is marked disqualified in workable. Notice that if EOCC is enabled for your account, you will also need to provide the `"disqualification_reason": "some reason"` field too.

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      ....
      "disqualified":true
      ....
   }
}
```


## Request

### Query Params
- `stage` (string): Depending on the value of the `sourced` flag, candidates are put into the `sourced` or `applied` stage. But you can set this if you want to create a candidate directly in another stage. Values can be retrieved from the `jobs/:shortcode/stages` endpoint

### Request Body (application/json)
{
  "type": "object",
  "properties": {
    "RAW_BODY": {
      "type": "string",
      "description": "The candidate data",
      "format": "json"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "d96bffaf83bf5"
  }
}

### Request Examples
```
curl 	-X POST \
			-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/talent_pool/candidates \
			--data '{"candidate": { "firstname": "Jj", "lastname": "Botha", "email": "jj_botha@fakemail.com"} }'
```

## 201 Response
201

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "status": {
      "type": "string",
      "examples": [
        "created"
      ]
    },
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "3fc9a80f"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "Jj Botha"
          ]
        },
        "firstname": {},
        "lastname": {},
        "headline": {
          "type": "string",
          "examples": [
            "Professional Administration Manager"
          ]
        },
        "account": {
          "type": "object",
          "properties": {
            "subdomain": {
              "type": "string",
              "examples": [
                "groove-tech"
              ]
            },
            "name": {
              "type": "string",
              "examples": [
                "Groove Tech"
              ]
            }
          }
        },
        "job": {
          "type": "object",
          "properties": {
            "shortcode": {
              "type": "string",
              "examples": [
                "GROOV005"
              ]
            },
            "title": {
              "type": "string",
              "examples": [
                "Office Manager"
              ]
            }
          }
        },
        "stage": {
          "type": "string",
          "examples": [
            "Sourced"
          ]
        },
        "disqualified": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "disqualified_at": {},
        "disqualification_reason": {},
        "sourced": {
          "type": "boolean",
          "default": true,
          "examples": [
            true
          ]
        },
        "profile_url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133"
          ]
        },
        "address": {
          "type": "string",
          "examples": [
            "25772 Gustave Shore, Iowa, USA"
          ]
        },
        "phone": {
          "type": "string",
          "examples": [
            "1-859-557-6573"
          ]
        },
        "email": {
          "type": "string",
          "examples": [
            "jj_botha@fakemail.com"
          ]
        },
        "outbound_mailbox": {
          "type": "string",
          "examples": [
            "b-6adwdc@outbound.dev-workable.mailgun.org"
          ]
        },
        "domain": {},
        "uploader_id": {},
        "created_at": {
          "type": "string",
          "examples": [
            "2015-07-09T10:55:53Z"
          ]
        },
        "updated_at": {
          "type": "string",
          "examples": [
            "2015-07-09T10:55:53Z"
          ]
        },
        "cover_letter": {
          "type": "string",
          "examples": [
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          ]
        },
        "summary": {
          "type": "string",
          "examples": [
            "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions."
          ]
        },
        "education_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fcbeedf"
                ]
              },
              "degree": {
                "type": "string",
                "examples": [
                  "MBA"
                ]
              },
              "school": {
                "type": "string",
                "examples": [
                  "University of Pennsylvania"
                ]
              },
              "field_of_study": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2008-03-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2011-03-30"
                ]
              }
            }
          }
        },
        "experience_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fdbfd0d"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Sales Director"
                ]
              },
              "summary": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2011-03-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2014-03-30"
                ]
              },
              "company": {
                "type": "string",
                "examples": [
                  "Vox Mobile"
                ]
              },
              "industry": {
                "type": "string",
                "examples": [
                  "Telecommunications"
                ]
              },
              "current": {
                "type": "boolean",
                "default": true,
                "examples": [
                  false
                ]
              }
            }
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "travel planning"
                ]
              }
            }
          }
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "question": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "Explain one aspect of this role you believe you will excel at."
                    ]
                  }
                }
              },
              "answer": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "<p>Planning</p>"
                    ]
                  }
                }
              }
            }
          }
        },
        "resume_url": {},
        "social_profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "examples": [
                  "twitter"
                ]
              },
              "username": {
                "type": "string",
                "examples": [
                  "jj_botha"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "http://www.twitter.com/jj_botha"
                ]
              }
            }
          }
        },
        "tags": {
          "type": "array"
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "81f8d6665bd0c"
  }
}

### Response Examples
```
{
  "status": "created",
  "candidate": {
    "id": "3fc9a80f",
    "name": "Jj Botha",
    "firstname": null,
    "lastname": null,
    "headline": "Professional Administration Manager",
    "account": {
      "subdomain": "groove-tech",
      "name": "Groove Tech"
    },
    "job": {
      "shortcode": "GROOV005",
      "title": "Office Manager"
    },
    "stage": "Sourced",
    "disqualified": false,
    "disqualified_at": null,
    "disqualification_reason": null,
    "sourced": true,
    "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "outbound_mailbox": "b-6adwdc@outbound.dev-workable.mailgun.org",
    "domain": null,
    "uploader_id": null,
    "created_at": "2015-07-09T10:55:53Z",
    "updated_at": "2015-07-09T10:55:53Z",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "education_entries": [
      {
        "id": "3fcbeedf",
        "degree": "MBA",
        "school": "University of Pennsylvania",
        "field_of_study": null,
        "start_date": "2008-03-01",
        "end_date": "2011-03-30"
      },
      {
        "id": "3fcbeee0",
        "degree": "B.S.",
        "school": "University of Chicago",
        "field_of_study": "Marketing Communication & Economics",
        "start_date": "2004-09-01",
        "end_date": "2007-03-30"
      }
    ],
    "experience_entries": [
      {
        "id": "3fdbfd0d",
        "title": "Sales Director",
        "summary": null,
        "start_date": "2011-03-01",
        "end_date": "2014-03-30",
        "company": "Vox Mobile",
        "industry": "Telecommunications",
        "current": false
      }
    ],
    "skills": [
      {
        "name": "travel planning"
      },
      {
        "name": "problem solving"
      }
    ],
    "answers": [
      {
        "question": {
          "body": "Explain one aspect of this role you believe you will excel at."
        },
        "answer": {
          "body": "<p>Planning</p>"
        }
      },
      {
        "question": {
          "body": "How many years administrative experience do you have?"
        },
        "answer": {
          "choices": [
            {
              "body": "Over 5 years"
            }
          ]
        }
      }
    ],
    "resume_url": null,
    "social_profiles": [
      {
        "type": "twitter",
        "username": "jj_botha",
        "url": "http://www.twitter.com/jj_botha"
      },
      {
        "type": "linkedin",
        "url": "http://www.linkedin.com/in/jj_botha"
      },
      {
        "type": "googleplus",
        "url": "https://plus.google.com/6908286706342698"
      }
    ],
    "tags": []
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "1c73b33265871"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ae2265b0472e1"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

## 422 Response
422

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Validation failed: Email candidate already exists"
      ]
    },
    "validation_errors": {
      "type": "object",
      "properties": {
        "email": {
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "candidate already exists"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "26d1d87cf80bd"
  }
}

### Response Examples
```
{
  "error": "Validation failed: Email candidate already exists",
  "validation_errors": {
    "email": [
      "candidate already exists"
    ]
  }
}
```

================================================================================

# /candidates/:id

GET https://{subdomain}.workable.com/candidates/:id

Returns specified candidate. Required scope: `r_candidates`. Accessible with all token types.

## Response

Calling the `candidates/:id` will return the full job JSON object of a specific `candidate`

| key                              | type        | description|
| :------------------------------- | :---------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| id                               | `string`    | The candidate identifier|
| name                             | `string`    | The full name of the candidate|
| firstname                        | `string`    | The first name of the candidate|
| lastname                         | `string`    | The last name of the candidate|
| headline                         | `string`    | The headline of the candidate|
| image_url                        | `string`    | Url of candidate's avatar. Available only if provided by the candidate|
| account/subdomain                | `string`    | The subdomain of the account|
| account/name                     | `string`    | The name of the account|
| job/shortcode                    | `string`    | The shortcode of the job                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| job/title                        | `string`    | The title of the job|
| stage                            | `string`    | The name of the current stage. See [stages endpoint](/docs/stages|
| disqualified                     | `boolean`   | Indicates if the candidate is disqualified|
| disqualified_at                  | `timestamp` | The timestamp the candidate  was disqualified|
| disqualification_reason          | `string`    | The reason the candidate was disqualified                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| sourced                          | `boolean`   | Indicates if the candidate is sourced `true` or applied `false`|
| profile_url                      | `string`    | Url to the candidate's profile|
| address                          | `string`    | The address of the candidate|
| phone                            | `string`    | The phone number of the candidate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| email                            | `string`    | The email address of the candidate|
| outbound_mailbox                 | `string`    | Mailbox that can be used to communicate with the candidate and inform the recruitment team of the job as well                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| domain                           | `string`    | The domain of the referrer site that linked to the job page or the job board the job advertised|
| uploader_id                      | `string`    | The id of the member uploaded the candidate|
| created_at                       | `timestamp` | The timestamp the candidate  created|
| updated_at                       | `timestamp` | The timestamp the candidate  last updated|
| cover_letter                     | `string`    | The cover letter provided when candidate applied|
| summary                          | `string`    | The summary of the candidate|
| education_entries                | `array`     | A collection with education entries|
| education_entries/degree         | `string`    | The graduation degree|
| education_entries/school         | `string`    | The name of the school graduated|
| education_entries/field_of_study | `string`    | The field of study|
| education_entries/start_date     | `date`      | The date started|
| education_entries/end_date       | `date`      | The date ended|
| experience_entries               | `array`     | A collection with working experience entries|
| experience_entries/title         | `string`    | The title of the experience entry|
| experience_entries/summary       | `string`    | The summary of the experience entry|
| experience_entries/start_date    | `date`      | The date started|
| experience_entries/end_date      | `date`      | The date ended|
| experience_entries/company       | `string`    | The company name|
| experience_entries/industry      | `string`    | The industry of the company|
| experience_entries/current       | `boolean`   | Indicates if currently works there|
| skills                           | `array`     | A collection with skill names|
| answers                          | `array`     | A collection with the answers provided|
| resume_url                       | `string`    | Url to the candidate resume|
| social_profiles                  | `array`     | A collection with social profiles of the candidate|
| social_profiles/type             | `string`    | The slug name of the social profile. It can be one of the following types: `academiaedu`, `angellist`, `behance`, `bitbucket`, `blogger`, `crunchbase`, `dandyid`, `delicious`, `deviantart`, `digg`, `doyoubuzz`, `dribble`, `dribbble`, `econsultancy`, `facebook`, `flavorsme`, `flickr`, `fullcontact`, `getglue`, `gist`, `github`, `goodreads`, `googleplus`, `gravatar`, `hackernews`, `hiim`, `klout`, `lanyrd`, `linkedin`, `myspace`, `ohloh`, `orkut`, `pinterest`, `quora`, `reddit`, `scribd`, `skype`, `slideshare`, `stackexchange`, `stackoverflow`, `tumblr`, `twitter`, `typepad`, `vk`, `wordpress`, `xing` |
| social_profiles/name             | `string`    | The full name of the social profile|
| social_profiles/url              | `string`    | Url to the candidate's social profile page                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| tags                             | `array`     | A collection with tags|
| hired_at                         | `date`      | The date the candidate was moved to the hired stage                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| location                         | `object`    | The location of the candidate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| location/location_str            | `string`    | The string representation of the location|
| location/country                 | `string`    | The country full name|
| location/country_code            | `string`    | The 2-letter ISO code of the country|
| location/region                  | `string`    | The region of the candidate|
| location/region_code             | `string`    | The code of the region of the candidate|
| location/city                    | `string`    | The city of the candidate|
| location/zip_code                | `string`    | The ZIP code of the candidate|
| originating_candidate_id         | `string`    | The ID this candidate originated from (has a value in case of candidate copy / move|


## Request

### Path Params
- `id` (required string): The candidates's id

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "108d1748"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "Cindy Sawyers"
          ]
        },
        "firstname": {
          "type": "string",
          "examples": [
            "Cindy"
          ]
        },
        "lastname": {
          "type": "string",
          "examples": [
            "Sawyers"
          ]
        },
        "headline": {
          "type": "string",
          "examples": [
            "Operations Manager"
          ]
        },
        "image_url": {},
        "account": {
          "type": "object",
          "properties": {
            "subdomain": {
              "type": "string",
              "examples": [
                "groove-tech"
              ]
            },
            "name": {
              "type": "string",
              "examples": [
                "Groove Tech"
              ]
            }
          }
        },
        "job": {
          "type": "object",
          "properties": {
            "shortcode": {
              "type": "string",
              "examples": [
                "GROOV005"
              ]
            },
            "title": {
              "type": "string",
              "examples": [
                "Office Manager"
              ]
            }
          }
        },
        "stage": {
          "type": "string",
          "examples": [
            "Applied"
          ]
        },
        "disqualified": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "disqualified_at": {},
        "disqualification_reason": {},
        "sourced": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "profile_url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/backend/jobs/376844767/candidates/277680758"
          ]
        },
        "address": {
          "type": "string",
          "examples": [
            "332 Clemmie Roads, Colorado, USA"
          ]
        },
        "phone": {
          "type": "string",
          "examples": [
            "(785)991-6256"
          ]
        },
        "email": {
          "type": "string",
          "examples": [
            "cindy_sawyers@gmail.com"
          ]
        },
        "outbound_mailbox": {
          "type": "string",
          "examples": [
            "azjp_gws@outbound.workable.mailgun.org"
          ]
        },
        "domain": {
          "type": "string",
          "examples": [
            "twitter.com"
          ]
        },
        "uploader_id": {},
        "created_at": {
          "type": "string",
          "examples": [
            "2015-07-01T00:00:00Z"
          ]
        },
        "updated_at": {
          "type": "string",
          "examples": [
            "2015-07-06T12:16:51Z"
          ]
        },
        "cover_letter": {},
        "summary": {
          "type": "string",
          "examples": [
            "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions."
          ]
        },
        "education_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fcbeee1"
                ]
              },
              "degree": {
                "type": "string",
                "examples": [
                  "B.A. Business Studies"
                ]
              },
              "school": {
                "type": "string",
                "examples": [
                  "University of Chicago"
                ]
              },
              "field_of_study": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2001-01-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2005-01-01"
                ]
              }
            }
          }
        },
        "experience_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fdbfd0e"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Executive Assistant"
                ]
              },
              "summary": {
                "type": "string",
                "examples": [
                  "<ul><li>Dealt with contacts and correspondence.</li><li>Managed suppliers, contractors and office systems.</li><li>Maintained handbooks, policies and practices, ensuring they were understood and adhered to by all staff.</li><li>Coordinated and project managed the office relocation and renovation.</li></ul>"
                ]
              },
              "start_date": {
                "type": "string",
                "examples": [
                  "2013-01-01"
                ]
              },
              "end_date": {},
              "company": {
                "type": "string",
                "examples": [
                  "Overflow Furnishings"
                ]
              },
              "industry": {},
              "current": {
                "type": "boolean",
                "default": true,
                "examples": [
                  true
                ]
              }
            }
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "Administration"
                ]
              }
            }
          }
        },
        "answers": {
          "type": "array"
        },
        "resume_url": {},
        "social_profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "examples": [
                  "twitter"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Twitter"
                ]
              },
              "username": {
                "type": "string",
                "examples": [
                  "cindy_sawyers"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "http://www.twitter.com/cindy_sawyers"
                ]
              }
            }
          }
        },
        "tags": {
          "type": "array"
        },
        "location": {
          "type": "object",
          "properties": {
            "location_str": {
              "type": "string",
              "examples": [
                "Los Angeles, California"
              ]
            },
            "country": {
              "type": "string",
              "examples": [
                "USA"
              ]
            },
            "country_code": {
              "type": "string",
              "examples": [
                "US"
              ]
            },
            "region": {
              "type": "string",
              "examples": [
                "California"
              ]
            },
            "region_code": {
              "type": "string",
              "examples": [
                "CA"
              ]
            },
            "city": {
              "type": "string",
              "examples": [
                "Los Angeles"
              ]
            },
            "zip_code": {
              "type": "string",
              "examples": [
                "90001"
              ]
            }
          }
        },
        "originating_candidate_id": {
          "type": "string",
          "examples": [
            "4dbadd20"
          ]
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "e7af8748b64f4"
  }
}

### Response Examples
```
{
  "candidate": {
    "id": "108d1748",
    "name": "Cindy Sawyers",
    "firstname": "Cindy",
    "lastname": "Sawyers",
    "headline": "Operations Manager",
    "image_url": null,
    "account": {
      "subdomain": "groove-tech",
      "name": "Groove Tech"
    },
    "job": {
      "shortcode": "GROOV005",
      "title": "Office Manager"
    },
    "stage": "Applied",
    "disqualified": false,
    "disqualified_at": null,
    "disqualification_reason": null,
    "sourced": false,
    "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/277680758",
    "address": "332 Clemmie Roads, Colorado, USA",
    "phone": "(785)991-6256",
    "email": "cindy_sawyers@gmail.com",
    "outbound_mailbox": "azjp_gws@outbound.workable.mailgun.org",
    "domain": "twitter.com",
    "uploader_id": null,
    "created_at": "2015-07-01T00:00:00Z",
    "updated_at": "2015-07-06T12:16:51Z",
    "cover_letter": null,
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "education_entries": [
      {
        "id": "3fcbeee1",
        "degree": "B.A. Business Studies",
        "school": "University of Chicago",
        "field_of_study": null,
        "start_date": "2001-01-01",
        "end_date": "2005-01-01"
      },
      {
        "id": "3fcbeee2",
        "degree": "Diploma",
        "school": "Juliet Hargreaves High School",
        "field_of_study": null,
        "start_date": "1997-01-01",
        "end_date": "2001-01-01"
      }
    ],
    "experience_entries": [
      {
        "id": "3fdbfd0e",
        "title": "Executive Assistant",
        "summary": "<ul><li>Dealt with contacts and correspondence.</li><li>Managed suppliers, contractors and office systems.</li><li>Maintained handbooks, policies and practices, ensuring they were understood and adhered to by all staff.</li><li>Coordinated and project managed the office relocation and renovation.</li></ul>",
        "start_date": "2013-01-01",
        "end_date": null,
        "company": "Overflow Furnishings",
        "industry": null,
        "current": true
      },
      {
        "id": "3fdbfd0f",
        "title": "Resources Manager",
        "summary": "<ul><li>Coordinated agendas and papers, minute taking and maintaining records for the management committee.</li><li>Managed vendor/supplier relationships.</li><li>Responsible for overall management of the office, including budgets and building and facilities management.</li><li>Ensured compliance with health and safety and other workplace legislation, including regular risk assessments.</li></ul>",
        "start_date": "2009-01-01",
        "end_date": "2013-01-01",
        "company": "Kidlaw Supplies",
        "industry": null,
        "current": false
      },
      {
        "id": "3fdbfd10",
        "title": "Administrative Officer",
        "summary": "<ul><li>Managed the implementation and development of an effective recruitment program.</li><li>Organised Fire and First Aid training.</li><li>Developed induction and handover processes for staff, interns, trustees and volunteers.</li><li>Planned and managed the CEO\\\\‚Äôs diary of internal and external meetings.</li></ul>",
        "start_date": "2005-01-01",
        "end_date": "2009-01-01",
        "company": "Spakes IT Services",
        "industry": null,
        "current": false
      }
    ],
    "skills": [
      {
        "name": "Administration"
      },
      {
        "name": "Organization"
      },
      {
        "name": "Budgeting"
      },
      {
        "name": "Project Management"
      },
      {
        "name": "MS Office"
      },
      {
        "name": "Event Management"
      }
    ],
    "answers": [],
    "resume_url": null,
    "social_profiles": [
      {
        "type": "twitter",
        "name": "Twitter",
        "username": "cindy_sawyers",
        "url": "http://www.twitter.com/cindy_sawyers"
      },
      {
        "type": "linkedin",
        "name": "LinkedIn",
        "url": "http://www.linkedin.com/in/cindy_sawyers"
      },
      {
        "type": "googleplus",
        "url": "https://plus.google.com/1849771376195546"
      }
    ],
    "tags": [],
    "location": {
      "location_str": "Los Angeles, California",
      "country": "USA",
      "country_code": "US",
      "region": "California",
      "region_code": "CA",
      "city": "Los Angeles",
      "zip_code": "90001"
    },
    "originating_candidate_id": "4dbadd20"
  }
}
```

## 401 Response
401

### Response Body (text/plain)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "18cb9d1dc2d14"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "206c331026794"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id

PATCH https://{subdomain}.workable.com/candidates

Partially updates a candidate. Required scope: `w_candidates`. Accessible with all token types.

This can help a user keep the candidate DB in sync with another system.

Here is a list of fields that can be provided:

| key                | type            | description                                                                            |
| :----------------- | :-------------- | :------------------------------------------------------------------------------------- |
| firstname          | `string`        | The candidate's first name                                                             |
| lastname           | `string`        | The candidate's last name                                                              |
| email              | `string`        | The candidate's email                                                                  |
| headline           | `string`        | One line description as provided by the candidate or you                               |
| summary            | `string`        | The profile summary provided by the candidate                                          |
| address            | `string`        | The candidate's address                                                                |
| phone              | `string`        | The candidate's phone number                                                           |
| cover_letter       | `string`        | The candidate's cover letter                                                           |
| resume             | `object`        | Explained [below](update-candidate#how-can-i-update-the-candidates-resume-along-with-) |
| image              | `object`        | Explained [below](update-candidate#how-can-i-update-the-candidates-image-along-with-t) |
| education_entries  | `array`         | Explained [below](update-candidate#how-can-i-update-the-candidates-education)          |
| experience_entries | `array`         | Explained [below](update-candidate#how-can-i-update-the-candidates-experience)         |
| skills             | `string` (list) | The candidate's skills.                                                                |
| tags               | `array`         | A list of the candidate's tags                                                         |
| social_profiles    | `array`         | Explained [below](update-candidate#can-i-also-update-candidates-the-social-profiles)   |

> ‚ùóÔ∏è Attention!
> 
> For all array keys (`education_entries`, `experience_entries`, `social_profiles`, `tags`) this works like a `PUT` request; i.e the end result will match exactly your input. **Any pre-existing entries or values that are not included in the request will be deleted**. If you provide an empty array as a value, all entries will be deleted. **If you don't provide the top level keys, their values will remain as is**.

Here is the structure of a complete example:

```json
{
  "candidate": {
    "firstname": "Jj",
    "lastname": "Botha",
    "headline": "Professional Administration Manager",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",

    "resume": { "name": "jjBotha.rtf", data: "SGVsbG8h" },
    "image": { "name": "me.jpg", data: "SGVsbG8h" },
    
    "education_entries": [
      { "degree": "MBA", "school": "University of Pennsylvania", "field_of_study": null, "start_date": "2008-03-01", "end_date": "2011-03-30" },
      { "degree": "B.S.", "school": "University of Chicago", "field_of_study": "Marketing Communication & Economics", "start_date": "2004-09-01", "end_date": "2007-03-30" }
    ],

    "experience_entries": [
      {
        "title": "Sales Director",
        "summary": null,
        "start_date": "2011-03-01",
        "end_date": "2014-03-30",
        "current": false,
        "company": "Vox Mobile",
        "industry": "Telecommunications"
      }
    ],

    "tags": [ "globetrotter", "adventurer" ],
    
    "skills": [ "Travel Planning", "Problem Solving"],
    "social_profiles": [
        {
          "type": "twitter",
          "name": "Twitter",
          "username": "jj_botha",
          "url": "http://www.twitter.com/jj_botha"
        },
        {
          "type": "linkedin",
          "name": "LinkedIn",
          "url": "http://www.linkedin.com/in/jj_botha"
        },
        {
          "type": "googleplus",
          "url": "https://plus.google.com/6908286706342698"
        }
    ]
  }
}
```

## How can I update the candidate‚Äôs resume along with the candidate information?

You can update the candidate‚Äôs resume in `.pdf`, `.doc`, `.docx`, `.rtf` format. The API accepts one of the following:

| key        | type     | description                              |
| :--------- | :------- | :--------------------------------------- |
| resume_url | `string` | a url pointing to the candidate‚Äôs resume |

Alternatively, you can post the resume encoded in base64 by including a 'resume' key with an object as a value, that has the following keys:

| key  | type     | description                              |
| :--- | :------- | :--------------------------------------- |
| name | `string` | the candidate‚Äôs resume name              |
| data | `string` | the candidate‚Äôs resume encoded in base64 |

Here is an example including a resume encoded in base64 format:

```json
{
  "candidate": {
    "name": "Jj Botha",
    "firstname": "Jj",
    "lastname": "Botha",
    "headline": "Professional Administration Manager",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "resume": {
      "name": "jj_botha.doc",
      "data": "6622116356e175ed0394b0d=="
    }
  }
}
```

## How can I update the candidate‚Äôs image along with the candidate information?

| key          | type     | description|
| :----------- | :------- ||
| image_url    | `string` | a url pointing to the candidate's image|
| image_source | `string` | If the image is not provided by the candidate (e.g. collected from a social network profile), you can also send the image_source. It can be one of the following types: `academiaedu`, `angellist`, `behance`, `bitbucket`, `blogger`, `crunchbase`, `dandyid`, `delicious`, `deviantart`, `digg`, `doyoubuzz`, `dribble`, `dribbble`, `econsultancy`, `facebook`, `flavorsme`, `flickr`, `fullcontact`, `getglue`, `gist`, `github`, `goodreads`, `googleplus`, `gravatar`, `hackernews`, `hiim`, `klout`, `lanyrd`, `linkedin`, `myspace`, `ohloh`, `orkut`, `pinterest`, `quora`, `reddit`, `scribd`, `skype`, `slideshare`, `stackexchange`, `stackoverflow`, `tumblr`, `twitter`, `typepad`, `vk`, `wordpress`, `xing` |

or alternatively

| key          | type     | description                             |
| :----------- | :------- | :-------------------------------------- |
| image/name   | `string` | the candidate's image name              |
| image/data   | `string` | the candidate's image encoded in base64 |
| image/source | `string` | The source of the candidate's image     |

## How can I update the candidate‚Äôs education?

> ‚ùóÔ∏è Attention!
> 
> This works like a `PUT` request; i.e. the end result will match exactly your input. **Any pre-existing entries or values that are not included in the request will be deleted**.

Candidate‚Äôs education is a list of entries. To update an entry you _must_ use the id. Each entry may contain the following fields:

| key               | type     | description                                                                                                                  |
| :---------------- | :------- | :--------------------------------------------------------------------------------------------------------------------------- |
| id (optional)     | `string` | The education id. If it is provided, the corresponding education entry will be updated. If not, a new entry will be created. |
| school (required) | `string` | The candidate's school                                                                                                       |
| degree            | `string` | The candidate's degree                                                                                                       |
| field_of_study    | `string` | The candidate's field of study                                                                                               |
| start_date        | `string` | In ISO 8601 format (YYYY-MM-DD)                                                                                              |
| end_date          | `string` | In ISO 8601 format (YYYY-MM-DD)                                                                                              |

## How can I update the candidate‚Äôs experience?

> ‚ùóÔ∏è Important!
> 
> This works like a `PUT` request; i.e. the end result will match exactly your input. **Any pre-existing entries or values that are not included in the request will be deleted**.

Candidate‚Äôs experience is a list of entries. To update an entry you _must_ use the id key. Each entry may contain the following fields:

| key              | type      | description                                                                                                                   |
| :--------------- | :-------- | :---------------------------------------------------------------------------------------------------------------------------- |
| id (optional)    | `string`  | The experience id. If it is provided the corresponding experience entry will be updated. If not, a new entry will be created. |
| title (required) | `string`  | The candidate's title                                                                                                         |
| summary          | `string`  | A summary of the candidate's experience                                                                                       |
| company          | `string`  | The candidate's company                                                                                                       |
| industry         | `string`  | The candidate's working industry                                                                                              |
| start_date       | `string`  | In ISO 8601 format (YYYY-MM-DD)                                                                                               |
| end_date         | `string`  | In ISO 8601 format (YYYY-MM-DD)                                                                                               |
| current          | `boolean` | True if candidate still works there                                                                                           |

## Can I also update the candidate's social profiles?

> ‚ùóÔ∏è Attention!
> 
> This works like a `PUT` request; i.e. the end result will match exactly your input. **Any pre-existing entries or values that are not included in the request will be deleted**.

Yes, you can provide social profiles by including the ‚Äòsocial_profiles‚Äô section:

```json
{
   "candidate":{
      "name":"John Doe",
      "email":"john.doe@samplemail.com",
      "headline":"Superhero developer",
      "summary":"",
      "address":"",
      "phone":"",

      ....

      "social_profiles":[
         {
            "type":"twitter",
            "username":"Workable",
            "url":"https://twitter.com/workable" 
         }
      ]

      ....

}
```

‚Äòsocial_profiles‚Äô is a list of social profiles, and you can provide one social profile url for each social network type. Each entry contains the following fields:

| key             | type     | description|
| :-------------- | :------- ||
| type (required) | `string` | One of the following types: `academiaedu`, `angellist`, `behance`, `bitbucket`, `blogger`, `crunchbase`, `dandyid`, `delicious`, `deviantart`, `digg`, `doyoubuzz`, `dribble`, `dribbble`, `econsultancy`, `facebook`, `flavorsme`, `flickr`, `fullcontact`, `getglue`, `gist`, `github`, `goodreads`, `googleplus`, `gravatar`, `hackernews`, `hiim`, `klout`, `lanyrd`, `linkedin`, `myspace`, `ohloh`, `orkut`, `pinterest`, `quora`, `reddit`, `scribd`, `skype`, `slideshare`, `stackexchange`, `stackoverflow`, `tumblr`, `twitter`, `typepad`, `vk`, `wordpress`, `xing` |
| username        | `string` | The candidate's username|
| url (required)  | `string` | The candidate's|


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Examples
```
curl 	-X PATCH \
			-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id> \
			--data '{"candidate": { "firstname": "Jj", "lastname": "Botha", "email": "jj_botha@fakemail.com"} }'
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "3fc9a80f"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "Jj Botha"
          ]
        },
        "firstname": {},
        "lastname": {},
        "headline": {
          "type": "string",
          "examples": [
            "Professional Administration Manager"
          ]
        },
        "image_url": {},
        "account": {
          "type": "object",
          "properties": {
            "subdomain": {
              "type": "string",
              "examples": [
                "groove-tech"
              ]
            },
            "name": {
              "type": "string",
              "examples": [
                "Groove Tech"
              ]
            }
          }
        },
        "job": {
          "type": "object",
          "properties": {
            "shortcode": {
              "type": "string",
              "examples": [
                "GROOV005"
              ]
            },
            "title": {
              "type": "string",
              "examples": [
                "Office Manager"
              ]
            }
          }
        },
        "stage": {
          "type": "string",
          "examples": [
            "Sourced"
          ]
        },
        "disqualified": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "disqualified_at": {},
        "disqualification_reason": {},
        "sourced": {
          "type": "boolean",
          "default": true,
          "examples": [
            true
          ]
        },
        "profile_url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133"
          ]
        },
        "address": {
          "type": "string",
          "examples": [
            "25772 Gustave Shore, Iowa, USA"
          ]
        },
        "phone": {
          "type": "string",
          "examples": [
            "1-859-557-6573"
          ]
        },
        "email": {
          "type": "string",
          "examples": [
            "jj_botha@fakemail.com"
          ]
        },
        "outbound_mailbox": {
          "type": "string",
          "examples": [
            "b-6adwdc@outbound.dev-workable.mailgun.org"
          ]
        },
        "domain": {},
        "uploader_id": {},
        "created_at": {
          "type": "string",
          "examples": [
            "2015-07-09T10:55:53Z"
          ]
        },
        "updated_at": {
          "type": "string",
          "examples": [
            "2015-07-09T10:55:53Z"
          ]
        },
        "cover_letter": {
          "type": "string",
          "examples": [
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          ]
        },
        "summary": {
          "type": "string",
          "examples": [
            "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions."
          ]
        },
        "education_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fcbeee1"
                ]
              },
              "degree": {
                "type": "string",
                "examples": [
                  "MBA"
                ]
              },
              "school": {
                "type": "string",
                "examples": [
                  "University of Pennsylvania"
                ]
              },
              "field_of_study": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2008-03-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2011-03-30"
                ]
              }
            }
          }
        },
        "experience_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fdbfd10"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Sales Director"
                ]
              },
              "summary": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2011-03-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2014-03-30"
                ]
              },
              "company": {
                "type": "string",
                "examples": [
                  "Vox Mobile"
                ]
              },
              "industry": {
                "type": "string",
                "examples": [
                  "Telecommunications"
                ]
              },
              "current": {
                "type": "boolean",
                "default": true,
                "examples": [
                  false
                ]
              }
            }
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "travel planning"
                ]
              }
            }
          }
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "question": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "Explain one aspect of this role you believe you will excel at."
                    ]
                  }
                }
              },
              "answer": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "<p>Planning</p>"
                    ]
                  }
                }
              }
            }
          }
        },
        "resume_url": {},
        "social_profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "examples": [
                  "twitter"
                ]
              },
              "username": {
                "type": "string",
                "examples": [
                  "jj_botha"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "http://www.twitter.com/jj_botha"
                ]
              }
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "globetrotter"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "739ee1531fa18"
  }
}

### Response Examples
```
{
  "candidate": {
    "id": "3fc9a80f",
    "name": "Jj Botha",
    "firstname": null,
    "lastname": null,
    "headline": "Professional Administration Manager",
    "image_url": null,
    "account": {
      "subdomain": "groove-tech",
      "name": "Groove Tech"
    },
    "job": {
      "shortcode": "GROOV005",
      "title": "Office Manager"
    },
    "stage": "Sourced",
    "disqualified": false,
    "disqualified_at": null,
    "disqualification_reason": null,
    "sourced": true,
    "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133",
    "address": "25772 Gustave Shore, Iowa, USA",
    "phone": "1-859-557-6573",
    "email": "jj_botha@fakemail.com",
    "outbound_mailbox": "b-6adwdc@outbound.dev-workable.mailgun.org",
    "domain": null,
    "uploader_id": null,
    "created_at": "2015-07-09T10:55:53Z",
    "updated_at": "2015-07-09T10:55:53Z",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "education_entries": [
      {
        "id": "3fcbeee1",
        "degree": "MBA",
        "school": "University of Pennsylvania",
        "field_of_study": null,
        "start_date": "2008-03-01",
        "end_date": "2011-03-30"
      },
      {
        "id": "3fcbeee2",
        "degree": "B.S.",
        "school": "University of Chicago",
        "field_of_study": "Marketing Communication & Economics",
        "start_date": "2004-09-01",
        "end_date": "2007-03-30"
      }
    ],
    "experience_entries": [
      {
        "id": "3fdbfd10",
        "title": "Sales Director",
        "summary": null,
        "start_date": "2011-03-01",
        "end_date": "2014-03-30",
        "company": "Vox Mobile",
        "industry": "Telecommunications",
        "current": false
      }
    ],
    "skills": [
      {
        "name": "travel planning"
      },
      {
        "name": "problem solving"
      }
    ],
    "answers": [
      {
        "question": {
          "body": "Explain one aspect of this role you believe you will excel at."
        },
        "answer": {
          "body": "<p>Planning</p>"
        }
      },
      {
        "question": {
          "body": "How many years administrative experience do you have?"
        },
        "answer": {
          "choices": [
            {
              "body": "Over 5 years"
            }
          ]
        }
      }
    ],
    "resume_url": null,
    "social_profiles": [
      {
        "type": "twitter",
        "username": "jj_botha",
        "url": "http://www.twitter.com/jj_botha"
      },
      {
        "type": "linkedin",
        "url": "http://www.linkedin.com/in/jj_botha"
      },
      {
        "type": "googleplus",
        "url": "https://plus.google.com/6908286706342698"
      }
    ],
    "tags": ["globetrotter", "adventurer"]
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b439abc1fe9df"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "a716588d4365d"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

## 422 Response
422

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Validation failed: Email candidate already exists"
      ]
    },
    "validation_errors": {
      "type": "object",
      "properties": {
        "email": {
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "candidate already exists"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "d84f629330ff7"
  }
}

### Response Examples
```
{
  "error": "Validation failed: Email candidate already exists",
  "validation_errors": {
    "email": [
      "candidate already exists"
    ]
  }
}
```

================================================================================

# /candidates/:id/activities

GET https://{subdomain}.workable.com/candidates/:id/activities

Returns the activity stream of the given candidate. Required scope: `r_candidates`. Accessible with all token types.

## Results

Calling the `/candidates/:id/activities` endpoint returns a JSON array of the candidate's activities.

| key        | description         |
| :--------- | :------------------ |
| activities | array of activities |

Each activity has the following keys:

| key        | type     | description                                                                                           |
| :--------- | :------- | :---------------------------------------------------------------------------------------------------- |
| action     | `string` | The action/type of the activity                                                                       |
| stage_name | `string` | The stage the candidate was in when the activity was created (if applicable)                          |
| created_at | `string` | The creation timestamp of the activity                                                                |
| member     | `object` | The member that created the activity (if applicable), contains id and name of the member              |
| body       | `string` | The body of the activity, available if action is `comment`, `rating`, `message` or `disqualification` |


## Request

### Path Params
- `id` (required string): The candidate's id

### Query Params
- `limit` (integer): Specifies the number of activities to try and retrieve per page (optional)
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID. (optional)
- `max_id` (string): Returns results with an ID less than or equal to the specified ID. (optional)

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/activities
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "activities": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "examples": [
              "applied"
            ]
          },
          "stage_name": {
            "type": "string",
            "examples": [
              "Applied"
            ]
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2016-09-29T00:00:00.000Z"
            ]
          },
          "body": {}
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b0da5437e581b"
  }
}

### Response Examples
```
{
  "activities": [
    {
      "action": "applied",
      "stage_name": "Applied",
      "created_at": "2016-09-29T00:00:00.000Z",
      "body": null
    },
    {
      "action": "comment",
      "stage_name": null,
      "created_at": "2016-10-01T00:00:00.000Z",
      "member": {
        "id": "13e0eb0e",
        "name": "Eduardo Vallente"
      },
      "body": "Sure, looks very promising. Let‚Äôs schedule a phone interview"
    },
    {
      "action": "phone-screen",
      "stage_name": "Phone Screen",
      "created_at": "2016-10-02T00:00:00.000Z",
      "member": {
        "id": "3f8918be",
        "name": "Natalie Sung"
      },
      "body": null
    },
    {
      "action": "message",
      "stage_name": null,
      "created_at": "2016-10-03T00:00:00.000Z",
      "body": "<p>Hi, Natalie</p>\n<p>Thank you for your email. It would be great to speak to you and I am available any time this week for a call at your convenience.<p>\n<p>Many, thanks,</p>\nSteve Parks\n"
    },
    {
      "action": "event",
      "stage_name": null,
      "created_at": "2016-10-03T01:00:00.000Z",
      "member": {
        "id": "3f8918be",
        "name": "Natalie Sung"
      },
      "body": null
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "8a7bfe3f0bbdc"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "21eed81ced058"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /candidates/:id/offer

GET https://{subdomain}.workable.com/candidates/:id/offer

Returns the offer related data of the given candidate. Required scope: `r_candidates`. Accessible with all token types.

## Results

Calling the `/candidates/:id/offer` endpoint returns a JSON array of the candidate's latest offer.

This is an example object that has the following keys (response may differ per account):

| key                | type     | description                                                         |
| :----------------- | :------- | :------------------------------------------------------------------ |
| candidate/id       | `string` | The candidate key                                                   |
| candidate/name     | `string` | The candidate full name                                             |
| created_at         | `date`   | The offer creation date                                             |
| document_variables | `array`  | The document variables of the offer                                 |
| documents          | `array`  | The documents related to the offer (Offer letter & other documents) |
| state              | `string` | The state of the offer ('accepted', 'rejected' etc.)                |

## Document variables

The _document_variables_ array contains variable objects in the following format:

| key                     | type      | description                                                |
| :---------------------- | :-------- | :--------------------------------------------------------- |
| document_variable/name  | `string`  | The name of the document variable                          |
| document_variable/slug  | `string`  | Slug of the document variable                              |
| value/body              | `string`  | The value body (in all cases except salary type variables) |
| value/data              | `object`  | The value data (only in salary type variables)             |
| value/data/amount       | `integer` | The amount of salary                                       |
| value/data/frequency    | `string`  | The frequency of the amount of salary                      |
| value/data/currency_iso | `string`  | The currency of salary                                     |
| value/data/cached_value | `string`  | The salary details in plain language                       |

## Documents

The _documents_ array contains offer related documents in the following format:

| key         | type     | description                             |
| :---------- | :------- | :-------------------------------------- |
| name        | `string` | The name of the filename                |
| preview_url | `string` | The full url to the document            |
| kind        | `string` | The type of the document ("Offer" etc.) |


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/offer
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "3a2b35a4"
          ]
        },
        "location": {
          "type": "string",
          "examples": [
            "San Diego, California, USA"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "James Jameson"
          ]
        }
      }
    },
    "created_at": {
      "type": "string",
      "examples": [
        "2021-06-10T13:43:40.442Z"
      ]
    },
    "document_variables": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "document_variable": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "Today Date"
                ]
              },
              "slug": {
                "type": "string",
                "examples": [
                  "today_date"
                ]
              }
            }
          },
          "value": {
            "type": "object",
            "properties": {
              "body": {
                "type": "string",
                "examples": [
                  "2012-12-10"
                ]
              }
            }
          }
        }
      }
    },
    "documents": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": [
              "signed-offer.pdf"
            ]
          },
          "preview_url": {
            "type": "string",
            "examples": [
              "https://signature/offer/signed-offer.pdf"
            ]
          },
          "kind": {
            "type": "string",
            "examples": [
              "offer"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "73ddd83c9cbd0"
  }
}

### Response Examples
```
{
  "candidate": {
    "id": "3a2b35a4",
    "location": "San Diego, California, USA",
    "name": "James Jameson"
  },
  "created_at": "2021-06-10T13:43:40.442Z",
  "document_variables": [
    {
      "document_variable": {
        "name": "Today Date",
        "slug": "today_date"
      },
      "value": {
        "body": "2012-12-10"
      }
    },
    {
      "document_variable": {
        "name": "Candidate",
        "slug": "candidate"
      },
      "value": {
        "body": "James Jameson"
      }
    },
    {
      "document_variable": {
        "name": "Job",
        "slug": "job"
      },
      "value": {
        "body": "Software engineer"
      }
    },
    {
      "document_variable": {
        "name": "Company",
        "slug": "company"
      },
      "value": {
        "body": "Some software company"
      }
    },
    {
      "document_variable": {
        "name": "Start Date",
        "slug": "start_date"
      },
      "value": {
        "body": "2012-12-12"
      }
    },
    {
      "document_variable": {
        "name": "Direct Manager",
        "slug": "direct_manager"
      },
      "value": {
        "body": "John Johnson"
      }
    },
    {
      "document_variable": {
        "name": "Salary",
        "slug": "salary"
      },
      "value": {
        "data": {
          "amount": 2000,
          "frequency": "month",
          "cached_value": "$2,000.00 per month",
          "currency_iso": "USD"
        }
      }
    },
    {
      "document_variable": {
        "name": "Bonus",
        "slug": "bonus"
      },
      "value": {
        "body": 1000
      }
    },
    {
      "document_variable": {
        "name": "Paid Time Off",
        "slug": "paid_time_off"
      },
      "value": {
        "body": 20
      }
    },
    {
      "document_variable": {
        "name": "Expiration Date",
        "slug": "offer_expiration_date"
      },
      "value": {
        "body": "2012-12-15"
      }
    },
    {
      "document_variable": {
        "name": "Job Responsibilities",
        "slug": "job_responsibilities"
      },
      "value": {
        "body": [
          "Duty A",
          "Duty B",
          "Duty C"
        ]
      }
    },
    {
      "document_variable": {
        "name": "Other Notes",
        "slug": "other_notes"
      },
      "value": {
        "body": "This is a paragraph"
      }
    }
  ],
  "documents": [
    {
      "name": "signed-offer.pdf",
      "preview_url": "https://signature/offer/signed-offer.pdf",
      "kind": "offer"
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "e599458a4dc24"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "18ac61464547d"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /candidates/:id/comments

POST https://{subdomain}.workable.com/candidates/:id/comments

Creates a comment on the candidate's timeline. Required scope: `w_candidates` or `w_comments`. Accessible with all token types.

Here is a list of fields that can be provided for the comment object:

[block:parameters]
{
  "data": {
    "h-0": "key",
    "h-1": "type",
    "h-2": "description",
    "0-0": "body (required)",
    "0-1": "`string`",
    "0-2": "The comment's text",
    "1-0": "policy",
    "1-1": "`string`",
    "1-2": "This sets the view rights of the comment. See [below](comment-on-candidate#comment-policy)",
    "2-0": "attachment",
    "2-1": "`object`",
    "2-2": "This can include an attachment for the comment to be created.  \n  \nNote: only one attachment may be created per comment through this API"
  },
  "cols": 3,
  "rows": 3,
  "align": [
    "left",
    "left",
    "left"
  ]
}
[/block]

The attachment field should have 2 attributes:

| key             | type     | description                                      |
| :-------------- | :------- | :----------------------------------------------- |
| name (required) | `string` | The filename of the attachment                   |
| data (required) | `string` | The payload of the attachment, encoded in base64 |

## Comment Policy

Comment policy defines the visibility of the new comment. There are 4 categories for members: `admin` (includes all access, as well as hiring managers and recruiting admins for the candidate's job), `simple` (standard members), `reviewer` and `recruiter`. The comments are always visible to admins. Depending on the values provided in this array you can have more fine grained visibility settings. The following table displays the possible outcomes:

| Field Value                           | Reviewer       | Recruiter      | Simple         | Admin    |
| :------------------------------------ | :------------- | :------------- | :------------- | :------- |
| `[]`                                  | :fa-eye-slash: | :fa-eye-slash: | :fa-eye-slash: | :fa-eye: |
| `["simple"]`                          | :fa-eye-slash: | :fa-eye-slash: | :fa-eye:       | :fa-eye: |
| `["simple", "recruiter"]`             | :fa-eye-slash: | :fa-eye:       | :fa-eye:       | :fa-eye: |
| `["simple", "recruiter", "reviewer"]` | :fa-eye:       | :fa-eye:       | :fa-eye:       | :fa-eye: |
| `["simple", "reviewer"]`              | :fa-eye:       | :fa-eye-slash: | :fa-eye:       | :fa-eye: |

A complete request would be:

```json
{
	"member_id": "3247e8c7",
  "comment": {
    "body": "He is really good",
    "policy": ["recruiter"],
    "attachment": {
      "name": "tiny.gif",
      "data": "R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs="
    }
  }
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id",
    "comment"
  ],
  "properties": {
    "member_id": {
      "type": "string"
    },
    "comment": {
      "type": "string",
      "format": "json"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "6691b43679d5e"
  }
}

### Request Examples
```
curl 	-X POST \
			-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
			https://<subdomain>.workable.com/spi/v3/candidates/<id>/comments \
			--data '{"member_id": "3247e8c7", "comment": {"body": "He is really good"}}'
```

## 201 Response
201

### Response Body (text/plain)

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "933ccb4a84b4e"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "064a45a2bc3f3"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/tags

PUT https://{subdomain}.workable.com/candidates/:id/tags

Updates candidate's tags. Required scope: `w_candidates`. Accessible with all token types.

The tags list will be assigned to a candidate as is. If the array is empty, all tags of the candidate will be deleted.

A complete request would be:

```json
{
  "tags": [
		"globetrotter", 
    "adventurer"
  ]
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "tags"
  ],
  "properties": {
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "e5ca31c3e5de8"
  }
}

### Request Examples
```
curl  -X PUT \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/tags \
      --data '{"tags": ["globetrotter", "adventurer"]}'
```

## 202 Response
202

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "examples": [
          "globetrotter"
        ]
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "890fbe496de5f"
  }
}

### Response Examples
```
{
  "tags": [
		"globetrotter", 
    "adventurer"
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "314382392f223"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "43b82e628f544"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/disqualify

POST https://{subdomain}.workable.com/candidates/:id/disqualify

Disqualifies a candidate. Required scope: `w_candidates`. Accessible with all token types.

A complete request would be:

```json
{ 
  "member_id": "13e0eb0e", 
  "disqualification_reason": "Very tardy" 
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id"
  ],
  "properties": {
    "member_id": {
      "type": "string",
      "description": "The id of the member performing the disqualification"
    },
    "disqualification_reason": {
      "type": "string",
      "description": "A short description of why the candidate should be disqualified"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ebd49ee9d2292"
  }
}

### Request Examples
```
curl  -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/disqualify \
      --data '{ "member_id": "13e0eb0e", "disqualification_reason": "Very tardy" }'
```

## 200 Response
200

### Response Body (text/plain)

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "0516c9ed2d4eb"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "1138662cc44ec"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/revert

POST https://{subdomain}.workable.com/candidates/:id/revert

Reverts a candidate's disqualification. Required scope: `w_candidates`. Accessible with all token types.

A complete request would be:

```json
{ 
  "member_id": "13e0eb0e"
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id"
  ],
  "properties": {
    "member_id": {
      "type": "string",
      "description": "The id of the member reverting the disqualification"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "4d4fcc40e4092"
  }
}

### Request Examples
```
curl  -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/revert \
      --data '{ "member_id": "13e0eb0e" }'
```

## 200 Response
200

### Response Body (text/plain)

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "f1e3ab04b366e"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "5997a48566418"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/copy

POST https://{subdomain}.workable.com/candidates/:id/copy

Copies a candidate to another job. Required scope: `w_candidates`. Accessible with all token types.

> üìò Want to retrieve the created candidate?
> 
> This endpoint creates a new candidate on the specified job and stage. To get the new candidate, follow the URL from the body of the response.

A complete request would be:

```json
{ 
  "member_id": "13e0eb0e", 
  "target_job_shortcode": "GROOV005", 
  "target_stage": "applied" 
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id",
    "target_job_shortcode"
  ],
  "properties": {
    "member_id": {
      "type": "string",
      "description": "The member perfoming the copy"
    },
    "target_job_shortcode": {
      "type": "string",
      "description": "The shortcode of the job that the candidate will be copied to"
    },
    "target_stage": {
      "type": "string",
      "description": "The stage the candidate should be copied to"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "239edb6b557eb"
  }
}

### Request Examples
```
curl  -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/copy \
      --data '{ "member_id": "13e0eb0e", "target_job_shortcode": "GROOV005", "target_stage": "applied" }'
```

## 201 Response
201

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "3fc9a80e"
          ]
        },
        "url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/spi/v3/candidates/3fc9a80e"
          ]
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "efb69e4f421da"
  }
}

### Response Examples
```
{
  "candidate": {
    "id": "3fc9a80e",
    "url": "https://groove-tech.workable.com/spi/v3/candidates/3fc9a80e"
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "43eae2feb2ae9"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "5418b61db3256"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/relocate

POST https://{subdomain}.workable.com/candidates/:id/relocate

Moves a candidate to another job. Required scope: `w_candidates`. Accessible with all token types.

> ‚ùóÔ∏è Copy vs Relocate
> 
> The only difference between these two endpoints is that the Copy method preserves the source candidate while the Relocate method deletes it.

> üìò Want to retrieve the created candidate?
> 
> This endpoint creates a new candidate on the specified job and stage. To get the new candidate follow the URL from the body of the response.

A complete request would be

```json
{ 
  "member_id": "13e0eb0e", 
  "target_job_shortcode": "GROOV005", 
  "target_stage": "applied" 
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id",
    "target_job_shortcode"
  ],
  "properties": {
    "member_id": {
      "type": "string",
      "description": "The member perfoming the relocation"
    },
    "target_job_shortcode": {
      "type": "string",
      "description": "The shortcode of the job that the candidate will be moved to"
    },
    "target_stage": {
      "type": "string",
      "description": "The stage the candidate should be moved to"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "212d83e75ae42"
  }
}

### Request Examples
```
curl  -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/relocate \
      --data '{ "member_id": "13e0eb0e", "target_job_shortcode": "GROOV005", "target_stage": "applied" }'
```

## 201 Response
201

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "3fc9a80f"
          ]
        },
        "url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/spi/v3/candidates/3fc9a80f"
          ]
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "99ee1402fc7f5"
  }
}

### Response Examples
```
{
  "candidate": {
    "id": "3fc9a80f",
    "url": "https://groove-tech.workable.com/spi/v3/candidates/3fc9a80f"
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "431d6e9ef48a2"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "9f48bd30a8cd3"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/move

POST https://{subdomain}.workable.com/candidates/:id/move

Moves the candidate to another stage. Required scope: `w_candidates`. Accessible with all token types.

> üöß Hiring plan
> 
> When an account has hiring plan enabled, in order to move a candidate to a stage of kind `hired` a requisition has to be filled. In order to use this endpoint when moving candidates to the hired stage, there are 2 options:
> 
> - If the candidate has a reserved requisition on them, you can use the `fill_reserved_requisition` parameter to fill that requisition.
> - If you want to use a different requisition (of state `Opened`, `On hold`, `Approved`), you can specify the requisition code, start date and the salary information, as specified in the docs below.

A complete request would be:

```json
{ 
  "member_id": "13e0eb0e",  
  "target_stage": "applied" 
}
```

**With hiring plan enabled**, and when moving to the hired stage a candidate with a reserved requisition with all the data filled in (start date and salary information), the request would be:

```json
{ 
  "member_id": "13e0eb0e",  
  "target_stage": "hired",
  "fill_reserved_requisition": true
}
```

**With hiring plan enabled**, and when moving to the hired stage a candidate with a reserved requisition with some the data filled in (start date) and some missing (salary information), the request would be:

```json
{ 
  "member_id": "13e0eb0e",  
  "target_stage": "hired",
  "fill_reserved_requisition": true,
  "requisition": {
    "salary": {
      "amount": 12345,
      "frequency": "year",
      "currency_iso": "EUR"
    }
  }
}
```

**With hiring plan enabled**, and when moving to the hired stage a candidate with and want to associate them with a requisition, the request would be:

```json
{ 
  "member_id": "13e0eb0e",  
  "target_stage": "hired",
  "requisition": {
    "code": "REQ-1234",
    "start_date": "2024-01-01",
    "salary": {
      "amount": 12345,
      "frequency": "year",
      "currency_iso": "EUR"
    }
  }
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id"
  ],
  "properties": {
    "member_id": {
      "type": "string",
      "description": "The member perfoming the move"
    },
    "target_stage": {
      "type": "string",
      "description": "The stage the candidate should be moved to"
    },
    "fill_reserved_requisition": {
      "type": "boolean",
      "description": "When the candidate has a reserved requisition, set this to true to use that requisition. If the requisition has already a start date and the salary information (amount, frequency and currency) you don't need any additional parameters. If there is missing information, you can use the requisition key to provide it.",
      "default": false
    },
    "requisition": {
      "type": "object",
      "description": "In case the candidate doesn't have a reserved requisition, you can select an open, approved or on-hold requisition. You can use this object to specify which requisition to fill, and set some of its properties. You can also use this key to provide missing information from the reserved requisition.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The code of the requisition you want to fill."
        },
        "start_date": {
          "type": "string",
          "description": "The start date of the requisition."
        },
        "salary": {
          "type": "object",
          "description": "The salary properties.",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "The amount of the salary",
              "format": "int32",
              "x-stoplight": {
                "explicitProperties": [
                  "type",
                  "description",
                  "format"
                ]
              },
              "minimum": -2147483648,
              "maximum": 2147483647
            },
            "frequency": {
              "type": "string",
              "description": "The frequency of the salary. Can be one of hour, day, week, month, year"
            },
            "currency_iso": {
              "type": "string",
              "description": "Can be a 3 letter ISO code for currency. Example: USD, EUR."
            }
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "3603d2b778f18"
  }
}

### Request Examples
```
curl  -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/candidates/<id>/move \
      --data '{ "member_id": "13e0eb0e", "target_stage": "applied" }'
```

## 202 Response
202

### Response Body (text/plain)

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "233a73ea8daf5"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "11527bb76c528"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/ratings

POST https://{subdomain}.workable.com/candidates/:id/ratings

Creates a rating for a candidate. Required scope: `w_candidates`. Accessible with all token types.

A complete request would be:

```json
{ 
  "member_id": "13e0eb0e", 
  "comment": "Good, I guess", 
  "score": "positive" 
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "member_id"
  ],
  "properties": {
    "member_id": {
      "type": "string",
      "description": "The member adding the rating"
    },
    "comment": {
      "type": "string",
      "description": "A comment about the scoring of the candidate"
    },
    "score": {
      "type": "string",
      "description": "One of `negative`, `positive` or `definite`"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "07003b8d30254"
  }
}

### Request Examples
```
curl 	-X POST \
			-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
			https://<subdomain>.workable.com/spi/v3/candidates/<id>/ratings \
			--data '{ "member_id": "13e0eb0e", "comment": "Good I guess", "score": "positive" }'
```

## 201 Response
201

### Response Body (text/plain)

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "07a543cd2902f"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "02b21e567ee90"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /candidates/:id/update_custom_attribute_value

PATCH https://{subdomain}.workable.com/candidates/:id/update_custom_attribute_value

Updates a custom attribute value for a candidate. Required scope: `r_jobs`. Accessible with all token types.

## Boolean

| key                             | type      | description                     |
| :------------------------------ | :-------- | :------------------------------ |
| custom_attribute_key (required) | `string`  | The unique custom attribute key |
| checked (required)              | `boolean` | true \| false                   |

A complete request would be:

```json
{ 
  "custom_attribute_key": "13e0eb0e", 
  "checked": "true"
}
```

## Short text

| key                             | type     | description                                       |
| :------------------------------ | :------- | :------------------------------------------------ |
| custom_attribute_key (required) | `string` | The unique custom attribute key                   |
| value (required)                | `string` | The candidate's response (maximum 128 characters) |

A complete request would be:

```json
{ 
  "custom_attribute_key": "13e0eb0e", 
  "value": "This is a test"
}
```

## Free text

| key                             | type     | description                     |
| :------------------------------ | :------- | :------------------------------ |
| custom_attribute_key (required) | `string` | The unique custom attribute key |
| value (required)                | `text`   | The candidate's response        |

A complete request would be:

```json
{ 
  "custom_attribute_key": "13e0eb0e", 
  "value": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreat."
}
```

## Numeric

| key                             | type      | description                                                                               |
| :------------------------------ | :-------- | :---------------------------------------------------------------------------------------- |
| custom_attribute_key (required) | `string`  | The unique custom attribute key                                                           |
| value (required)                | `integer` | The value may be an integer or floating point number (use '.' as decimal point separator) |

A complete request would be:

```json
{
    "custom_attribute_key": "5331",
    "value": 1234
}
```

## File (base64 encoded)

| key                             | type     | description                            |
| :------------------------------ | :------- | :------------------------------------- |
| custom_attribute_key (required) | `string` | The unique custom attribute key        |
| file/name (required)            | `string` | The file name                          |
| file/data (required)            | `string` | The candidate‚Äôs file encoded in base64 |

A complete request would be:

```json
{
    "custom_attribute_key": "52f",
    "file": {
        "name": "updated_custom_attribute_file.pdf",
        "data": "d29ya2FibGUgcnVsZXoK"
    }
}
```

## File (URL)

| key                             | type     | description                              |
| :------------------------------ | :------- | :--------------------------------------- |
| custom_attribute_key (required) | `string` | The unique custom attribute key          |
| file_url (required)             | `string` | A URL pointing to the candidate‚Äôs answer |

A complete request would be:

```json
{
    "custom_attribute_key": "52f",
    "file_url": "https://somedomain.com/abcdefgh.jpg"
}
```

## Date

| key                             | type     | description                                     |
| :------------------------------ | :------- | :---------------------------------------------- |
| custom_attribute_key (required) | `string` | The unique custom attribute identifier          |
| date (required)                 | `string` | The date in ISO 8601 format (i.e. "2017-05-22") |

A complete request would be:

```json
{
    "custom_attribute_key": "52d",
    "date": "1970-01-01"
}
```

## Dropdown

| key                             | type               | description                                     |
| :------------------------------ | :----------------- | :---------------------------------------------- |
| custom_attribute_key (required) | `string`           | The unique custom attribute key                 |
| choices (required)              | `array of strings` | [choices_ids]. Provide only one selected choice |

A complete request would be:

```json
{
    "custom_attribute_key": "52e",
    "choices": ["1228"]
}
```

## Multiple choice

| key                             | type               | description                                                                 |
| :------------------------------ | :----------------- | :-------------------------------------------------------------------------- |
| custom_attribute_key (required) | `string`           | The unique custom attribute key                                             |
| choices (required)              | `array of strings` | [choices_ids]. For single answer questions provide only one selected choice |

A complete request would be:

```json
{
    "custom_attribute_key": "534",
    "choices": ["122d", "122e"]
}
```


## Request

### Path Params
- `id` (required string): The candidate's id

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "custom_attribute_key"
  ],
  "properties": {
    "custom_attribute_key": {
      "type": "string",
      "description": "The unique custom attribute identifier"
    },
    "checked": {
      "type": "boolean",
      "description": "Defined only if question's type is `boolean`"
    },
    "value": {
      "type": "integer",
      "description": "Required only if question's type is `numeric`",
      "format": "int32",
      "x-stoplight": {
        "explicitProperties": [
          "type",
          "description",
          "format"
        ]
      },
      "minimum": -2147483648,
      "maximum": 2147483647
    },
    "file": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required only if question's type is `file`"
        },
        "data": {
          "type": "string",
          "description": "Required only if question's type is `file`"
        }
      },
      "required": [],
      "type": "object"
    },
    "file_url": {
      "type": "string",
      "description": "Required only if question's type is `file`"
    },
    "date": {
      "type": "string",
      "description": "Required only if question's type is `date`",
      "format": "date"
    },
    "choices": {
      "type": "array",
      "description": "Required only if question's type is `dropdown` or `multiple_choice`",
      "items": {
        "type": "string"
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b8a0e1fccb1fe"
  }
}

### Request Examples
```
curl 	-X POST \
			-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
			https://<subdomain>.workable.com/spi/v3/candidates/<id>/ratings \
			--data '{ "custom_attribute_key": "13e0eb0e", "checked": "true" }'
```

## 201 Response
201

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "108d1748"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "Cindy Sawyers"
          ]
        },
        "firstname": {
          "type": "string",
          "examples": [
            "Cindy"
          ]
        },
        "lastname": {
          "type": "string",
          "examples": [
            "Sawyers"
          ]
        },
        "headline": {
          "type": "string",
          "examples": [
            "Operations Manager"
          ]
        },
        "image_url": {},
        "account": {
          "type": "object",
          "properties": {
            "subdomain": {
              "type": "string",
              "examples": [
                "groove-tech"
              ]
            },
            "name": {
              "type": "string",
              "examples": [
                "Groove Tech"
              ]
            }
          }
        },
        "job": {
          "type": "object",
          "properties": {
            "shortcode": {
              "type": "string",
              "examples": [
                "GROOV005"
              ]
            },
            "title": {
              "type": "string",
              "examples": [
                "Office Manager"
              ]
            }
          }
        },
        "stage": {
          "type": "string",
          "examples": [
            "Applied"
          ]
        },
        "disqualified": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "disqualified_at": {},
        "disqualification_reason": {},
        "sourced": {
          "type": "boolean",
          "default": true,
          "examples": [
            false
          ]
        },
        "profile_url": {
          "type": "string",
          "examples": [
            "https://groove-tech.workable.com/backend/jobs/376844767/candidates/277680758"
          ]
        },
        "address": {
          "type": "string",
          "examples": [
            "332 Clemmie Roads, Colorado, USA"
          ]
        },
        "phone": {
          "type": "string",
          "examples": [
            "(785)991-6256"
          ]
        },
        "email": {
          "type": "string",
          "examples": [
            "cindy_sawyers@gmail.com"
          ]
        },
        "outbound_mailbox": {
          "type": "string",
          "examples": [
            "azjp_gws@outbound.workable.mailgun.org"
          ]
        },
        "domain": {
          "type": "string",
          "examples": [
            "twitter.com"
          ]
        },
        "uploader_id": {},
        "created_at": {
          "type": "string",
          "examples": [
            "2015-07-01T00:00:00Z"
          ]
        },
        "updated_at": {
          "type": "string",
          "examples": [
            "2015-07-06T12:16:51Z"
          ]
        },
        "cover_letter": {},
        "summary": {
          "type": "string",
          "examples": [
            "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions."
          ]
        },
        "education_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fcbeee1"
                ]
              },
              "degree": {
                "type": "string",
                "examples": [
                  "B.A. Business Studies"
                ]
              },
              "school": {
                "type": "string",
                "examples": [
                  "University of Chicago"
                ]
              },
              "field_of_study": {},
              "start_date": {
                "type": "string",
                "examples": [
                  "2001-01-01"
                ]
              },
              "end_date": {
                "type": "string",
                "examples": [
                  "2005-01-01"
                ]
              }
            }
          }
        },
        "experience_entries": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3fdbfd0e"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Executive Assistant"
                ]
              },
              "summary": {
                "type": "string",
                "examples": [
                  "<ul><li>Dealt with contacts and correspondence.</li><li>Managed suppliers, contractors and office systems.</li><li>Maintained handbooks, policies and practices, ensuring they were understood and adhered to by all staff.</li><li>Coordinated and project managed the office relocation and renovation.</li></ul>"
                ]
              },
              "start_date": {
                "type": "string",
                "examples": [
                  "2013-01-01"
                ]
              },
              "end_date": {},
              "company": {
                "type": "string",
                "examples": [
                  "Overflow Furnishings"
                ]
              },
              "industry": {},
              "current": {
                "type": "boolean",
                "default": true,
                "examples": [
                  true
                ]
              }
            }
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "Administration"
                ]
              }
            }
          }
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "question": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "examples": [
                      "Do you understand boolean algebra?"
                    ]
                  }
                }
              },
              "answer": {
                "type": "object",
                "properties": {
                  "checked": {
                    "type": "boolean",
                    "default": true,
                    "examples": [
                      true
                    ]
                  }
                }
              }
            }
          }
        },
        "resume_url": {},
        "social_profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "examples": [
                  "twitter"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Twitter"
                ]
              },
              "username": {
                "type": "string",
                "examples": [
                  "cindy_sawyers"
                ]
              },
              "url": {
                "type": "string",
                "examples": [
                  "http://www.twitter.com/cindy_sawyers"
                ]
              }
            }
          }
        },
        "tags": {
          "type": "array"
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "96dde5b3549c1"
  }
}

### Response Examples
```
 {
  "candidate": {
    "id": "108d1748",
    "name": "Cindy Sawyers",
    "firstname": "Cindy",
    "lastname": "Sawyers",
    "headline": "Operations Manager",
    "image_url": null,
    "account": {
      "subdomain": "groove-tech",
      "name": "Groove Tech"
    },
    "job": {
      "shortcode": "GROOV005",
      "title": "Office Manager"
    },
    "stage": "Applied",
    "disqualified": false,
    "disqualified_at": null,
    "disqualification_reason": null,
    "sourced": false,
    "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/277680758",
    "address": "332 Clemmie Roads, Colorado, USA",
    "phone": "(785)991-6256",
    "email": "cindy_sawyers@gmail.com",
    "outbound_mailbox": "azjp_gws@outbound.workable.mailgun.org",
    "domain": "twitter.com",
    "uploader_id": null,
    "created_at": "2015-07-01T00:00:00Z",
    "updated_at": "2015-07-06T12:16:51Z",
    "cover_letter": null,
    "summary": "A focussed, results-driven team player with many year experience in the field. Working my way up to management level, I have experience of every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "education_entries": [
      {
        "id": "3fcbeee1",
        "degree": "B.A. Business Studies",
        "school": "University of Chicago",
        "field_of_study": null,
        "start_date": "2001-01-01",
        "end_date": "2005-01-01"
      },
      {
        "id": "3fcbeee2",
        "degree": "Diploma",
        "school": "Juliet Hargreaves High School",
        "field_of_study": null,
        "start_date": "1997-01-01",
        "end_date": "2001-01-01"
      }
    ],
    "experience_entries": [
      {
        "id": "3fdbfd0e",
        "title": "Executive Assistant",
        "summary": "<ul><li>Dealt with contacts and correspondence.</li><li>Managed suppliers, contractors and office systems.</li><li>Maintained handbooks, policies and practices, ensuring they were understood and adhered to by all staff.</li><li>Coordinated and project managed the office relocation and renovation.</li></ul>",
        "start_date": "2013-01-01",
        "end_date": null,
        "company": "Overflow Furnishings",
        "industry": null,
        "current": true
      },
      {
        "id": "3fdbfd0f",
        "title": "Resources Manager",
        "summary": "<ul><li>Coordinated agendas and papers, minute taking and maintaining records for the management committee.</li><li>Managed vendor/supplier relationships.</li><li>Responsible for overall management of the office, including budgets and building and facilities management.</li><li>Ensured compliance with health and safety and other workplace legislation, including regular risk assessments.</li></ul>",
        "start_date": "2009-01-01",
        "end_date": "2013-01-01",
        "company": "Kidlaw Supplies",
        "industry": null,
        "current": false
      },
      {
        "id": "3fdbfd10",
        "title": "Administrative Officer",
        "summary": "<ul><li>Managed the implementation and development of an effective recruitment program.</li><li>Organised Fire and First Aid training.</li><li>Developed induction and handover processes for staff, interns, trustees and volunteers.</li><li>Planned and managed the CEO\\\\‚Äôs diary of internal and external meetings.</li></ul>",
        "start_date": "2005-01-01",
        "end_date": "2009-01-01",
        "company": "Spakes IT Services",
        "industry": null,
        "current": false
      }
    ],
    "skills": [
      {
        "name": "Administration"
      },
      {
        "name": "Organization"
      },
      {
        "name": "Budgeting"
      },
      {
        "name": "Project Management"
      },
      {
        "name": "MS Office"
      },
      {
        "name": "Event Management"
      }
    ],
    "answers": [
      {
          "question": {
              "body": "Do you understand boolean algebra?"
          },
          "answer": {
              "checked": true
          }
      },
      {
          "question": {
              "body": "Favorite vacation activity"
          },
          "answer": {
              "choices": [
                  {
                      "body": "Sleeping"
                  }
              ]
          }
      },
      {
          "question": {
              "body": "Favorite vacation clothes"
          },
          "answer": {
              "choices": [
                  {
                      "body": "T-shirts"
                  }
              ]
          }
      },
      {
          "question": {
              "body": "File sample of your vacation"
          },
          "answer": {
              "file_url": "https://somedomain.com/sashdggfgdgs"
          }
      },
      {
          "question": {
              "body": "How many times can you yawn?"
          },
          "answer": {
              "number": 4
          }
      },
      {
          "question": {
              "body": "Random date"
          },
          "answer": {
              "date": "1970-01-01"
          }
      },
      {
          "question": {
              "body": "Choose an option"
          },
          "answer": {
              "choices": [
                  {
                      "body": "option 2"
                  }
              ]
          }
      },
      {
          "question": {
              "body": "Choose multiple options"
          },
          "answer": {
              "choices": [
                  {
                      "body": "option 2b"
                  },
                  {
                      "body": "option 1b"
                  }
              ]
          }
      },
      {
          "question": {
              "body": "Write a short paragraph"
          },
          "answer": {
              "body": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreat."
          }
      },
      {
          "question": {
              "body": "What is it?"
          },
          "answer": {
              "body": "That's it"
          }
      }
  ],
    "resume_url": null,
    "social_profiles": [
      {
        "type": "twitter",
        "name": "Twitter",
        "username": "cindy_sawyers",
        "url": "http://www.twitter.com/cindy_sawyers"
      },
      {
        "type": "linkedin",
        "name": "LinkedIn",
        "url": "http://www.linkedin.com/in/cindy_sawyers"
      },
      {
        "type": "googleplus",
        "url": "https://plus.google.com/1849771376195546"
      }
    ],
    "tags": []
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "3402d6594dda6"
  }
}

### Response Examples
```
{
  "error": "Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "03bc0d3557b8e"
  }
}

### Response Examples
```
{
  "error": "Not found"
}
```

================================================================================

# /custom_attributes

GET https://{subdomain}.workable.com/custom_attributes

Returns a collection of the account's custom attributes. Required scope: `r_jobs`. Accessible with all token types.

## Results

Calling the `/custom_attributes` endpoint will return a collection of the account's custom attributes.

| key               | description                |
| :---------------- | :------------------------- |
| custom_attributes | array of custom attributes |

Each custom attribute will have the following keys:

| key                                  | type      | description                                                                                  |
| :----------------------------------- | :-------- | :------------------------------------------------------------------------------------------- |
| id                                   | `string`  | The custom attribute identifier                                                              |
| type                                 | `string`  | Custom attribute's type                                                                      |
| enabled                              | `boolean` | Custom attribute's state (enabled or disabled)                                               |
| label                                | `string`  | Custom attribute's label                                                                     |
| hint                                 | `string`  | Custom attribute's hint                                                                      |
| single_answer                        | `boolean` | Custom attribute's single answer state (enabled/disabled) when its type is `multiple_choice` |
| choices/id                           | `string`  | The choice attribute identifier                                                              |
| choices/body                         | `string`  | Choice's title                                                                               |
| choices/hint                         | `string`  | Choice's hint                                                                                |
| choices/translations/<language>/body | `string`  | Choice's title in specific language                                                          |
| choices/translations/<language>/hint | `string`  | Choice's hint in specific language                                                           |


## Request

### Request Examples
```
curl 	-H "Content-Type: application/json" \
			-H "Authorization:Bearer <Access Token>" \
      https://<subdomain>.workable.com/spi/v3/custom_attributes
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "custom_attributes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "4d7"
            ]
          },
          "type": {
            "type": "string",
            "examples": [
              "short_text"
            ]
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "examples": [
              true
            ]
          },
          "label": {
            "type": "string",
            "examples": [
              "Short description of yourself"
            ]
          },
          "hint": {
            "type": "string",
            "examples": [
              "Describe yourself in a few words"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "7681ff78ba807"
  }
}

### Response Examples
```
{
    "custom_attributes": [
        {
            "id": "4d7",
            "type": "short_text",
            "enabled": true,
            "label": "Short description of yourself",
            "hint": "Describe yourself in a few words"
        },
        {
            "id": "4d4",
            "type": "multiple_choice",
            "enabled": true,
            "label": "Blood type",
            "hint": "What is your blood type?",
            "single_answer": false,
            "choices": [
                {
                    "id": "4d3",
                    "body": "A",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "A",
                            "hint": null
                        }
                    }
                },
                {
                    "id": "4d4",
                    "body": "B",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "B",
                            "hint": null
                        }
                    }
                },
                {
                    "id": "4d5",
                    "body": "AB",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "AB",
                            "hint": null
                        }
                    }
                },
                {
                    "id": "4d6",
                    "body": "0",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "0",
                            "hint": null
                        }
                    }
                }
            ]
        },
        {
            "id": "4fe",
            "type": "boolean",
            "enabled": true,
            "label": "Are you interested in this role?",
            "hint": null
        },
        {
            "id": "4d5",
            "type": "file",
            "enabled": false,
            "label": "Profile image",
            "hint": null
        },
        {
            "id": "4db",
            "type": "numeric",
            "enabled": false,
            "label": "How many times can you yawn?",
            "hint": null
        },
        {
            "id": "4da",
            "type": "date",
            "enabled": false,
            "label": "When did you first yawn?",
            "hint": null
        },
        {
            "id": "4d8",
            "type": "free_text",
            "enabled": false,
            "label": "Longer description of yourself",
            "hint": "Hint!"
        },
        {
            "id": "52e",
            "type": "dropdown",
            "enabled": true,
            "label": "Please select an option",
            "hint": null,
            "single_answer": true,
            "choices": [
                {
                    "id": "1227",
                    "body": "option 1",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "option 1",
                            "hint": null
                        }
                    }
                },
                {
                    "id": "1228",
                    "body": "option 2",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "option2",
                            "hint": null
                        }
                    }
                },
                {
                    "id": "1229",
                    "body": "option 3",
                    "hint": null,
                    "translations": {
                        "en": {
                            "body": "option3",
                            "hint": null
                        }
                    }
                }
            ]
        }
    ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "87a790b779f9b"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "2e58a4befd2f7"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /events

GET https://{subdomain}.workable.com/events

Returns a collection of your events. Required scope: `r_jobs`. Accessible with account tokens and user tokens.

## Results

Each event will have the following keys:

| key         | type     | description                                                                                                                                            |
| :---------- | :------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |
| id          | `string` | The id of the event                                                                                                                                    |
| title       | `string` | The title of the event                                                                                                                                 |
| description | `string` | A description of the event                                                                                                                             |
| type        | `string` | The type of the event. One of (`call`, `interview` & `meeting`)                                                                                        |
| starts_at   | `string` | The start of the event                                                                                                                                 |
| ends_at     | `string` | The end of the event                                                                                                                                   |
| job         | `object` | Contains the `id` and the `title` of the job                                                                                                           |
| members     | `array`  | An array of the members participating in the event. Each member object contains the `id` and `name` of the member as well as the status of their RSVP. |
| candidate   | `object` | Contains the `id` and the `name` of the candidate participating in the event                                                                           |


## Request

### Query Params
- `type` (string): Returns events of the provided type. Available types are (call, interview & meeting)
- `limit` (integer): Specifies the number of jobs to try and retrieve per page (optional)
- `since_id` (string): Returns results with an ID greater than or equal to the specified ID. (optional)
- `max_id` (string): Returns results with an ID less than or equal to the specified ID. (optional)
- `start_date` (string): Returns events that are scheduled for after the specified date
- `end_date` (string): Returns events that are scheduled for before the specified date
- `candidate_id` (string): Filters events for specified candidate
- `shortcode` (string): Filters events for specified job shortcode
- `member_id` (string): Filters events for specified member

### Request Examples
```
curl 	-H "Content-Type: application/json" \
   		-H "Authorization:Bearer <Access Token>" \ 
   		https://<subdomain>.workable.com/spi/v3/events
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "events": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "4770c5c"
            ]
          },
          "title": {
            "type": "string",
            "examples": [
              "Interview with"
            ]
          },
          "description": {},
          "type": {
            "type": "string",
            "examples": [
              "InterviewEvent"
            ]
          },
          "starts_at": {
            "type": "string",
            "examples": [
              "2017-01-17T22:00:00.000Z"
            ]
          },
          "ends_at": {
            "type": "string",
            "examples": [
              "2017-01-17T22:30:00.000Z"
            ]
          },
          "job": {
            "type": "object",
            "properties": {
              "shortcode": {
                "type": "string",
                "examples": [
                  "GROOV001"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "Operations Manager"
                ]
              }
            }
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "examples": [
                    "3f8918be"
                  ]
                },
                "name": {
                  "type": "string",
                  "examples": [
                    "Natalie Sung"
                  ]
                },
                "status": {
                  "type": "string",
                  "examples": [
                    "accepted"
                  ]
                }
              }
            }
          },
          "candidate": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "3189bacb"
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Lakita Marrero"
                ]
              }
            }
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "894fe267686cf"
  }
}

### Response Examples
```
{
  "events": [
    {
      "id": "4770c5c",
      "title": "Interview with",
      "description": null,
      "type": "InterviewEvent",
      "starts_at": "2017-01-17T22:00:00.000Z",
      "ends_at": "2017-01-17T22:30:00.000Z",
      "job": {
        "shortcode": "GROOV001",
        "title": "Operations Manager"
      },
      "members": [
        {
          "id": "3f8918be",
          "name": "Natalie Sung",
          "status": "accepted"
        },
        {
          "id": "13e0eb0e",
          "name": "Eduardo Vallente",
          "status": "accepted"
        }
      ],
      "candidate": {
        "id": "3189bacb",
        "name": "Lakita Marrero"
      }
    },
    {
      "id": "47fdddd",
      "title": "Interview with",
      "description": null,
      "type": "InterviewEvent",
      "starts_at": "2017-01-17T22:00:00.000Z",
      "ends_at": "2017-01-17T22:30:00.000Z",
      "job": {
        "shortcode": "GROOV001",
        "title": "Operations Manager"
      },
      "members": [
        {
          "id": "3f8918be",
          "name": "Natalie Sung",
          "status": "accepted"
        },
        {
          "id": "13e0eb0e",
          "name": "Eduardo Vallente",
          "status": "accepted"
        }
      ],
      "candidate": {
        "id": "2b50e243",
        "name": "Wayne Walsh"
      }
    }
  ]
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "339aff0fcc578"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "5c65fe0460696"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# /events/:id

GET https://{subdomain}.workable.com/events/:id

Returns date for the identified event. Required scope: `r_jobs`. Accessible with account tokens and user tokens.

## Results

The event has the following keys:

|             |          |                                                                                                                                                        |
| :---------- | :------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |
| id          | `string` | The id of the event                                                                                                                                    |
| title       | `string` | The title of the event                                                                                                                                 |
| description | `string` | A description of the event                                                                                                                             |
| type        | `string` | The type of the event. One of (`call`, `interview` & `meeting`)                                                                                        |
| starts_at   | `string` | The start of the event                                                                                                                                 |
| ends_at     | `string` | The end of the event                                                                                                                                   |
| job         | `object` | Contains the `id` and the `title` of the job                                                                                                           |
| members     | `array`  | An array of the members participating in the event. Each member object contains the `id` and `name` of the member as well as the status of their RSVP. |
| candidate   | `object` | Contains the `id` and the `name` of the candidate participating in the event                                                                           |


## Request

### Path Params
- `id` (required string): The id of the event

### Request Examples
```
curl 	-H "Content-Type: application/json" \
   		-H "Authorization:Bearer <Access Token>" \ 
   		https://<subdomain>.workable.com/spi/v3/events/<id>
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "examples": [
        "3ed9b6ad"
      ]
    },
    "title": {
      "type": "string",
      "examples": [
        "Call with Steve Parks"
      ]
    },
    "description": {
      "type": "string",
      "examples": [
        "We will call you on your cell"
      ]
    },
    "type": {
      "type": "string",
      "examples": [
        "CallEvent"
      ]
    },
    "starts_at": {
      "type": "string",
      "examples": [
        "2016-12-28T22:00:00.000Z"
      ]
    },
    "ends_at": {
      "type": "string",
      "examples": [
        "2016-12-28T22:30:00.000Z"
      ]
    },
    "job": {
      "type": "object",
      "properties": {
        "shortcode": {
          "type": "string",
          "examples": [
            "GROOV005"
          ]
        },
        "title": {
          "type": "string",
          "examples": [
            "Office Manager"
          ]
        }
      }
    },
    "members": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "3f8918be"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "Natalie Sung"
            ]
          },
          "status": {
            "type": "string",
            "examples": [
              "needs-action"
            ]
          }
        }
      }
    },
    "candidate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "examples": [
            "34bc3e59"
          ]
        },
        "name": {
          "type": "string",
          "examples": [
            "Steve Parks"
          ]
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "bc2d172a8b082"
  }
}

### Response Examples
```
{
  "id": "3ed9b6ad",
  "title": "Call with Steve Parks",
  "description": "We will call you on your cell",
  "type": "CallEvent",
  "starts_at": "2016-12-28T22:00:00.000Z",
  "ends_at": "2016-12-28T22:30:00.000Z",
  "job": {
    "shortcode": "GROOV005",
    "title": "Office Manager"
  },
  "members": [
    {
      "id": "3f8918be",
      "name": "Natalie Sung",
      "status": "needs-action"
    },
    {
      "id": "3247e8c7",
      "name": "Alexia Middleton",
      "status": "declined"
    },
    {
      "id": "13e0eb0e",
      "name": "Eduardo Vallente",
      "status": "accepted"
    }
  ],
  "candidate": {
    "id": "34bc3e59",
    "name": "Steve Parks"
  }
}
```

## 401 Response
401

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not authorized"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "9fdc4c01aa847"
  }
}

### Response Examples
```
{
  "error":"Not authorized"
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "Not found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "bb3953ab4fefb"
  }
}

### Response Examples
```
{
  "error":"Not found"
}
```

================================================================================

# Webhook Subscriptions
How they work

You can subscribe to an event and Workable will notify you when it's triggered. To do this:

1. Use the subscriptions endpoint to register your endpoint. You can further filter by job and/or stage.
2. When the event is triggered, Workable will POST to the registered endpoint with the associated resource.

For example, a webhook created to get notifications on candidate creation would work as follows:

![](https://files.readme.io/31622c8-webhook_candidate_created.png "webhook_candidate_created.png")

List of available events:

| Events            | Registration label | Resource  |
| :---------------- | :----------------- | :-------- |
| Candidate Created | candidate_created  | Candidate |
| Candidate Moved   | candidate_moved    | Candidate |

Workable will POST a Candidate object when the event is triggered, with a payload similar to [candidate details](doc:job-candidates-show) endpoint. The payload will reflect the state at the time of the request and not the state of the resource from when the event fired. In most cases this state will be the same, but there are some race conditions that might cause a slightly different payload.

> Response status should be `200` so that Workable won't consider it an error and replays the request.

## Encryption

> The requests from Workable to your system will be signed. The key for the signature will be either the account token or the oauth application secret, depending on the type of the integration. The algorithm used for creating the signature is HMAC SHA256 on the payload of the request and the signature itself is sent on the `X-Workable-Signature` header.


================================================================================

# /subscriptions

GET https://{subdomain}.workable.com/subscriptions

List all subscriptions. Required scope: `r_candidates`. Accessible with all token types.

Use this endpoint to list your subscriptions.


## Request

### Request Examples
```
curl  -X GET \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/subscriptions
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "subscriptions": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "default": 0,
            "examples": [
              772571818
            ]
          },
          "target": {
            "type": "string",
            "examples": [
              "https://www.acme.com/workable_subscriptions"
            ]
          },
          "valid_until": {
            "type": "string",
            "examples": [
              "2021-09-11T11:34:34.685Z"
            ]
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2020-09-11T11:34:34.685Z"
            ]
          },
          "stage_slug": {
            "type": "string",
            "examples": [
              "applied"
            ]
          },
          "job_shortcode": {
            "type": "string",
            "examples": [
              "JOB2001"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "75b2a09c16f17"
  }
}

### Response Examples
```
{
  "subscriptions": [
    {
      "id": 772571818,
      "target": "https://www.acme.com/workable_subscriptions",
      "valid_until": "2021-09-11T11:34:34.685Z",
      "created_at": "2020-09-11T11:34:34.685Z",
      "stage_slug": "applied",
      "job_shortcode": "JOB2001"
    }
  ]
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "8eaee5a170ff7"
  }
}

### Response Examples
```
{}
```

================================================================================

# /subscriptions

POST https://{subdomain}.workable.com/subscriptions

Subscribe to an event. Required scope: `r_candidates`. Accessible with all token types.

You can use this endpoint to register your service. The arguments object can be used to further filter which events you want to receive. 

> The target URLs should be unique. If a target URL is already registered, the service will respond with `409 - Conflict`.


## Request

### Request Body (application/json)
{
  "type": "object",
  "required": [
    "target",
    "event"
  ],
  "properties": {
    "target": {
      "type": "string",
      "description": "The URL of the endpoint to push notifications at"
    },
    "event": {
      "type": "string",
      "description": "One of candidate_created, candidate_moved"
    },
    "args": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The subdomain of the account, must be included in args"
        },
        "job_shortcode": {
          "type": "string",
          "description": "Get notifications only for one job. If used, it must be included in args"
        },
        "stage_slug": {
          "type": "string",
          "description": "Get notifications for specific stages. e.g. 'hired'. If used, it must be included in args"
        }
      },
      "required": [
        "account_id"
      ],
      "type": "object"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "f9d62e0966a41"
  }
}

### Request Examples
```
curl  -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/subscriptions \
      --data '{"target": "https://host/endpoint", "event": "candidate_moved", "args": { "account_id": "<subdomain>", "job_shortcode": "", "stage_slug": "" } }'
```

## 201 Response
201

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "id": {
      "type": "integer",
      "default": 0,
      "examples": [
        42
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "7d18108422a44"
  }
}

### Response Examples
```
{
  "id": 42
}
```

## 400 Response
400

### Response Body (application/json)
{
  "type": "object",
  "properties": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "f551e709b39f2"
  }
}

### Response Examples
```
{}
```

## 409 Response
409

### Response Body (application/json)
{
  "type": "object",
  "properties": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "c4d3ebd67a34c"
  }
}

### Response Examples
```
{}
```

================================================================================

# /subscriptions/:id

DELETE https://{subdomain}.workable.com/subscriptions

Unsubscribe from an event. Required scope: `r_candidates`. Accessible with all token types.

Use this endpoint for deleting subscriptions. It's recommended to delete obsolete subscriptions if you're a third party.


## Request

### Path Params
- `id` (required string): The ID of the webhook subscription

### Request Examples
```
curl  -X DELETE \
      -H "Content-Type: application/json" \
      -H "Authorization:Bearer <Access Token>" \
      -H 'Accept: application/json' \
      https://<subdomain>.workable.com/spi/v3/subscriptions/<id>
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "7333e5ba2eca1"
  }
}

### Response Examples
```
{}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "b1f4675612e1a"
  }
}

### Response Examples
```
{}
```

================================================================================

# Candidate Events

The data that Workable pushes when an event gets triggered is similar to [candidate details](doc:job-candidates-show) endpoint.

| key                                 | type        | description|
| :---------------------------------- | :---------- ||
| data                                | `object`    | Data wrapper|
| data.account                        | `object`    | Account wrapper|
| data.account.name                   | `string`    | The name of the account|
| data.account.subdomain              | `string`    | The subdomain of the account                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| data.address                        | `string`    | The address of the candidate|
| data.cover_letter                   | `string`    | The cover letter provided when candidate applied|
| data.created_at                     | `timestamp` | The timestamp the candidate  created|
| data.disqualified                   | `boolean`   | Indicates if the candidate is disqualified|
| data.disqualification_reason        | `string`    | The reason the candidate was disqualified|
| data.disqualified_at                | `timestamp` | The timestamp the candidate  was disqualified|
| data.domain                         | `string`    | The domain of the referrer site that linked to the job page or the job board the job advertised|
| data.education_entries              | `array`     | A collection with education entries|
| data.education_entry.id             | `string`    | Education entry identifier                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| data.education_entry.degree         | `string`    | The graduation degree                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| data.education_entry.school         | `string`    | The name of the school graduated|
| data.education_entry.field_of_study | `string`    | The field of study|
| data.education_entry.start_date     | `date`      | The date started|
| data.education_entry.end_date       | `date`      | The date ended|
| data.email                          | `string`    | The email address of the candidate|
| data.experience_entries             | `array`     | A collection with working experience entries|
| data.experience_entry.title         | `string`    | The title of the experience entry|
| data.experience_entry.company       | `string`    | The company name|
| data.experience_entry.summary       | `string`    | The summary of the experience entry|
| data.experience_entry.industry      | `string`    | The industry of the company|
| data.experience_entry.start_date    | `date`      | The date started|
| data.experience_entry.end_date      | `date`      | The date ended|
| data.experience_entry.current       | `boolean`   | Indicates if currently works there|
| data.firstname                      | `string`    | The first name of the candidate|
| data.headline                       | `string`    | The headline of the candidate|
| data.id                             | `string`    | The candidate identifier|
| data.image_url                      | `url`       | Url of candidate's avatar. Available only if provided by the candidate|
| data.job                            | `object`    | Job wrapper|
| data.job.shortcode                  | `string`    | The shortcode of the job|
| data.job.title                      | `string`    | The title of the job|
| data.lastname                       | `string`    | The last name of the candidate|
| data.name                           | `string`    | The full name of the candidate|
| data.outbound_mailbox               | `string`    | Mailbox that can be used to communicate with the candidate and inform the recruitment team of the job as well                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| data.phone                          | `string`    | The phone number of the candidate|
| data.profile_url                    | `url`       | Url to the candidate's profile|
| data.resume_url                     | `url`       | Url to the candidate resume                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| data.skills                         | `array`     | A collection with skill names|
| data.social_profiles                | `array`     | A collection with social profiles of the candidate|
| data.social_profile.type            | `string`    | The slug name of the social profile. It can be one of the following types: `academiaedu`, `angellist`, `behance`, `bitbucket`, `blogger`, `crunchbase`, `dandyid`, `delicious`, `deviantart`, `digg`, `doyoubuzz`, `dribble`, `dribbble`, `econsultancy`, `facebook`, `flavorsme`, `flickr`, `fullcontact`, `getglue`, `gist`, `github`, `goodreads`, `googleplus`, `gravatar`, `hackernews`, `hiim`, `klout`, `lanyrd`, `linkedin`, `myspace`, `ohloh`, `orkut`, `pinterest`, `quora`, `reddit`, `scribd`, `skype`, `slideshare`, `stackexchange`, `stackoverflow`, `tumblr`, `twitter`, `typepad`, `vk`, `wordpress`, `xing` |
| data.social_profile.name            | `string`    | The full name of the social profile                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| data.social_profile.url             | `url`       | Url to the candidate's social profile page|
| data.sourced                        | `boolean`   | Indicates if the candidate is sourced `true` or applied `false`|
| data.stage                          | `string`    | The name of the current stage. See [stages endpoint](/docs/stages|
| data.summary                        | `string`    | The summary of the candidate|
| data.tags                           | `array`     | A collection with tags                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| data.updated_at                     | `timestamp` | The timestamp the candidate  last updated|
| data.uploader_id                    | `string`    | The id of the member uploaded the candidate|
| event_type                          | `string`    | The type of the event|
| fired_at                            | `timestamp` | The date the event was triggered|
| id                                  | `id`        | The event identifier|
| resource_type                       | `string`    | The type of the payload resource|

## Example Payload

```
{
  "data": {
    "account": {
      "name": "Groove Tech",
      "subdomain": "groove-tech"
    },
    "address": "25772 Gustave Shore, Iowa, USA",
    "cover_letter": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    "created_at": "2015-07-09T10:55:53Z",
    "disqualification_reason": null,
    "disqualified": false,
    "disqualified_at": null,
    "domain": null,
    "education_entries": [
      {
        "degree": "MBA",
        "end_date": "2011-03-30",
        "field_of_study": null,
        "school": "University of Pennsylvania",
        "start_date": "2008-03-01"
      },
      {
        "degree": "B.S.",
        "end_date": "2007-03-30",
        "field_of_study": "Marketing Communication & Economics",
        "school": "University of Chicago",
        "start_date": "2004-09-01"
      }
    ],
    "email": "jj_botha@fakemail.com",
    "experience_entries": [
      {
        "company": "Vox Mobile",
        "current": false,
        "end_date": "2014-03-30",
        "industry": "Telecommunications",
        "start_date": "2011-03-01",
        "summary": null,
        "title": "Sales Director"
      }
    ],
    "firstname": null,
    "headline": "Professional Administration Manager",
    "id": "3fc9a80f",
    "image_url": null,
    "job": {
      "shortcode": "GROOV005",
      "title": "Office Manager"
    },
    "lastname": null,
    "name": "Jj Botha",
    "outbound_mailbox": "b-6adwdc@outbound.dev-workable.mailgun.org",
    "phone": "1-859-557-6573",
    "profile_url": "https://groove-tech.workable.com/backend/jobs/376844767/candidates/1070179133",
    "resume_url": null,
    "skills": [
      {
        "name": "travel planning"
      },
      {
        "name": "problem solving"
      }
    ],
    "social_profiles": [
      {
        "type": "twitter",
        "url": "http://www.twitter.com/jj_botha",
        "username": "jj_botha"
      },
      {
        "type": "linkedin",
        "url": "http://www.linkedin.com/in/jj_botha"
      },
      {
        "type": "googleplus",
        "url": "https://plus.google.com/6908286706342698"
      }
    ],
    "sourced": true,
    "stage": "Hired",
    "summary": "A focused, results-driven team player with many year experience in the field. Working my way up to management level, I have experience in every aspect of this role. I understand the challenges it brings, and have a proven track record of providing solutions.",
    "tags": [],
    "updated_at": "2015-07-09T10:55:53Z",
    "uploader_id": null
  },
  "event_type": "candidate_moved",
  "fired_at": "2017-03-27T09:32:45Z",
  "id": "1b1c8399",
  "resource_type": "candidate"
}
```


================================================================================

# OAuth 2.0

Official partners can access Workable API endpoints through OAuth 2.0, utilizing the Authorization code flow. In this scenario the Partner should be authorized beforehand by Workable and get a `client_id` and `client_secret` which he should use for onboarding users.

> Read more about [OAuth 2.0](https://tools.ietf.org/html/rfc6750)

## Authorization Code Flow

The following scheme shows how a fresh start is made for a User that hasn't previously enabled the integration.

![](https://files.readme.io/7a06894-authorization_flow.png "authorization_flow.png")

The process consists of 4 steps

1. The partner redirects the User to a Workable page. The user reviews the permissions and proceeds with granting access to his Workable account. A user would see a screen like this one:

![](https://files.readme.io/be275af-grant_permissions.png "grant_permissions.png")

2. Workable then triggers a redirect to the Partner's `redirect_uri` providing an authorization code in the query params.
3. The Partner exchanges this authorization code for an actual token which he can later use for accessing Workable API at the behest of the User.
4. Use access token to access Workable. e.g. retrieve the candidates the User has access to.

## Refresh Token

The access token is not permanent though. It has a TTL (Time To Live) value and after this time has passed a new access token should be created and retrieved. Refreshing a token doesn't need the User to grant permissions for a second time, since this action was explicitly carried in the 1st step. The following diagram shows how this can be done.

![](https://files.readme.io/6c9c555-refresh_token_flow.png "refresh_token_flow.png")

The process uses the `refresh_token` to get a new `access_token` (the `refresh_token` is always provided alongside the `access_token`)

So only 2 steps for getting a new access token and accessing the Workable API

1. Partner requests a new `access_token` using the `refresh_token`. The response contains a new pair of tokens.
2. Partner uses new `access_token` to access Workable. e.g. retrieve the candidates the User has access to.

## Revoke Permissions Flow

The last step would be the case of User wishing to revoke permissions of accessing his account and it's a simple request to the `/revoke` endpoint including the User's `access_token`.

> Remember if the `access_token` is expired, the `refresh_token` flow should be used before using the `revoke` permissions flow

## Examples

#### Authorization Code

1. The flow should be triggered by popping a window to the User's browser redirecting him to:  
   `https://www.workable.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&resource=user&response_type=code&scope=r_jobs+r_candidates+w_candidates`  
   Using the `client_id` provided to the partner by Workable and the `redirect_uri` (should also be the same provided by the partner in the provisioning process).

2. Workable will redirect to this endpoint and also will include an authorization code. The URL will look like: `http://partner.com/redirect?code=e7fcd407a73dbe5219`.

3. Get a new pair of `access_token` and `refresh_token` using a `POST`. The request should look like: 

```
Request:
curl -F grant_type=authorization_code \
     -F client_id={uid} \
     -F client_secret={secret} \
     -F code={authorization_code} \
     -F redirect_uri={redirect_uri} \
     -X POST https://www.workable.com/oauth/token
Response:
{
  "access_token":"9a0cd4d51849d4a7eeb0111fc40174065b1892ee297e493ca2c8c5374f70be37",
  "token_type":"bearer",
  "expires_in":7200,
  "refresh_token":"0d0c63f9faee831368f6d7e6fe057f9f88040eae244ef4f462e8751deeef5ca3",
  "scope":"r_jobs",
  "created_at":1486567779
}
```

#### Refresh Token

Using the refresh token, you can receive a new pair of `access_token` and `refresh_token` using a request like:

```
Request:
curl -F grant_type=refresh_token \
     -F client_id={uid} \
     -F client_secret={secret} \
     -F refresh_token={refresh_token} \
     -X POST https://www.workable.com/oauth/token
Response:
  {
    "access_token":"4320f5e8b75f12",
    "token_type":"bearer",
    "expires_in":7200,
    "refresh_token":"3335068da9865",
    "scope":"r_jobs r_candidates w_candidates"
  }
```

#### Revoke Permissions

A request for revoking a User's grant, looks like:

```
curl -F client_id={uid} \
     -F client_secret={secret} \
     -F token={refresh_token} \
     -X POST 'https://www.workable.com/oauth/revoke'
```

> If a user revokes permissions either from Workable or from partner, the authorization code flow should be repeated. This case could manifest as a `401` response code on a refresh token request

#### Issuing a request against the Workable API

When the Partner has a valid `access_token` he can then issue requests towards Workable. In this example the Partner gets a list of the User's accounts. The `access_token` is included in the `Authorization` header.

1. Get the accounts

```
  curl -H 'Authorization: Bearer {access_token} 'https://www.workable.com/spi/v3/accounts'
```

Get more info on what you can do with the Workable [API](https://workable.readme.io)

> [Apply to become a Workable partner](https://developers.workable.com/partner-program/apply)


================================================================================

# Assessments & Video Interviews API

This section describes: 

- How an Assessment Provider can integrate with Workable to inject assessments directly into the candidates' timeline.

- How a Video Interview Provider can integrate with Workable to inject video interviews directly into the candidates' timeline.

- How a Background Check Provider can integrate with Workable to inject background check results directly into the candidates' timeline.

[block:html]
{
  "html": "&nbsp;"
}
[/block]

[Assessment Providers](page:assessment-providers) 

[Video Interview Providers](page:video-interview-providers)

[Background Check Providers](page:background-check-providers)


================================================================================

# Assessment Providers

## How it works

The first step is for Workable and the Assessments Provider to be authenticated. Then, the user can select one from the available/configured tests from the Provider and push a candidate's information over to create a new assessment. When the candidate completes the assessment, the Provider should inform Workable about the results.

![](https://files.readme.io/3999472-assessments_push.png "assessments_push.png")

There are 2 endpoints that should be provided, with `${BASE_URL}` being the root path for both of them:

1. `https://${BASE_URL}/tests` which allows the `GET` method and lists the available tests
2. `https://${BASE_URL}/assessments` which allows the `POST` method and creates an invitation for a candidate

> Workable provides an endpoint for receiving the results, see creating an assessment for more info.

### Authentication

#### 1. Workable to Assessments Provider

Every call from Workable towards the Assessments Provider is authenticated using an access token contained in the Authentication HTTP Header. e.g. `Authorization: Bearer 78e3be68d98268509ea304a506ed6362d`. This token should be provided to the user from the Assessments Provider and configured in the respective Workable account.

#### 2. Assessments Provider to Workable

Regarding the requests originating from the Assessments Provider, an access token will be generated and communicated upon the integration creation. This token should be included in the Authorization Header as well.

> The Bearer token is the standard authorization scheme used in [OAuth 2](https://tools.ietf.org/html/rfc6750)

## Listing available tests

Workable needs access to the available/configured tests; an authenticated `GET` is triggered towards the Assessments Provider to fetch them. The endpoint should be formatted as `https://${BASE_URL}/tests` and the response should be a JSON document with an array of tests. Each test is described through identification and name.

## Response

```json
{
  "tests": [
    {
      "id": 1,
      "name": "Aptitude Test"
    },
    {
      "id": 2,
      "name": "Accounting Test"
    }
  ]
}
```

> One test per job can be selected. See below where the identification becomes handy.

## Creating an Assessment

Workable provides users with the ability to create an assessment for a candidate on demand. If the action is called, Workable will `POST` the Assessments Provider on `https://${BASE_URL}/assessments` with a payload that looks as follows:

```json
{
  "test_id": "12345",
  "job_shortcode": "GROOV005",
  "job_title": "Operations Manager",
  "callback_url": "https://groove-tech.workable.com/assessments/8823119",
  "candidate": {
    "first_name": "Lakita",
    "last_name": "Marrero",
    "phone": "(785)991-6256",
    "email": "lakita_marrero@gmail.com",
  },
}
```

- `test_id`: The identification provided in the previous step
- `job_shortcode`: (Optional) The job identified in the list jobs step
- `job_title`: The job that the candidate applied to. Can be contained in the invitation email.
- `callback_url`: The URL in which the Assessment Provider should publish the results (see below)
- `candidate`: Candidate info. Can be used in the invitation email.

> The Assessment Provider should respond with a `201` status and an identifier for the created assessment.
>
> ```json
> { "assessment_id": "2044922" }
> ```

## Results collection

### 1. Publishing the Results to Workable

There are 4 statuses for an assessment. The initial status is `pending` and then the assessment can be `completed`, `rejected` or `expired`. The status depends on the actions of the candidate regarding the assessment. Whenever the status changes, the Assessments Provider should publish the new status to Workable using `PUT` on the `callback_url` provided in the assessment creation step.

> When the status is completed, the request should include the assessment results.

### 2. Publishing the Results on an API

Another alternative is for Workable to poll the endpoint `https://${BASE_URL}/assessments/:id` with the assessment identifier returned in the assessment creation step. This method however is suboptimal since it requires more than one requests until the results are finally fetched. Moreover, a failsafe mechanism should be created in case the invitation was rejected by the candidate.

In both cases the payload provided by the Assessments Provider should be as follows:

```json
{
  "results_url": "https://acme.com/assessments/2044922",
  "status": "completed",
  "assessment": {
    "score": "78",
    "grade": "excelled",
    "summary": "This candidate is an excellent prospect.",
    "details": {
        "behavior": {
          "Influence": 97,
          "conscientiousness": 76
        },
        "mental_skills":  {
          "Problem Solving": 82,
          "Aptitude": 91
        }
    },
    "duration": "01:01:17"
  },
  "attachments": [
    {
      "description": "Assessment Report",
      "url": "https://acme.com/assessments/2044922/report.pdf"
    }
  ]
}
```

#### Mandatory fields

- `status`: This can take any of the values `completed`, `declined` or `expired`
- `results_url`: A link to the fully fledged report on the Provider's site (Mandatory only when `status` is `completed`)

#### Optional fields

- `grade`: This is the final conclusion of the assessment, it can take any of the values `failed`, `passed` or `excelled`. This is respectively mapped to `no`, `yes` and `definitely yes` in Workable evaluation system.
- `assessment`:
  - `score`: An overall score, preferably a percentage
  - `summary`: Small description/evaluation of the assessment
  - `details`: This can be used to provide a deeper analysis on the candidate's results. It's a JSON with a maximum of two levels nested objects and is presented to the user with minimum formatting, so keys should be descriptive and readable. The structure should follow the `key: value` format, no arrays should be included and a first level value may be consisted of more objects itself. Any values holding dates should conform to ISO 8601.
  - `duration`: How long did it take the candidate to complete the assessment, if available
- `attachments`: Currently only supporting PDF. A results report of the assessment along with a description, if available. The URL should be publicly accessible.

## Errors

The endpoints of the Assessments Provider should handle request errors with a status code followed by a readable message. The description message should be short yet verbose enough to facilitate ease of troubleshooting.

|       Type      | Status | Example messages                         |
| :-------------: | :----: | ---------------------------------------- |
|  Authentication |  `401` | _Missing Token_                          |
|  Authentication |  `401` | _Invalid Token_                          |
| Invalid Request |  `400` | _Invalid JSON_                           |
| Invalid Request |  `400` | _Invalid field: name should be a string_ |
| Invalid Request |  `422` | _Missing field: name should be provided_ |
|     Conflict    |  `409` | _Entity is already updated_              |

> A valid response on an Error would be
>
> ```json
> { "status": 401, "message": "Invalid Token" }
> ```

### 3. Retrieving a shared link

This is an optional `GET` endpoint to be implemented by the Assessments Provider. This endpoint serves assessment links, in case when the system supports sharing public links. The URL should look like `https://${BASE_URL}/assessments/:id/shared-link` and the `assessment-id` should be the one returned from the assessment creation call.

## Response

```json
{
  "url": "https://acme.com/assessments/2044922/link",
  "ttl": "120",
  "ttl_units": "minutes"
}
```

- `url`: A link to the public shared report on the Provider's site
- `ttl`: (Optional) The time this link will be available. If this is not set, the link is assumed to be permanent.
- `ttl_units`: The units used for measuring the TTL. Currently supported values: `minutes`, `days` and `views`.


================================================================================

# Video Interview Providers

## How it works

The first step is for Workable and the Video Interview Providers to be authenticated. Then the user can select one from the available/configured interviews from the Provider and push a candidate's information over, to create a new interview. When the candidate completes the interview, the Provider should inform Workable about the results.

![](https://files.readme.io/613064f-video_interviews_push.png "video_interviews_push.png")

There are 2 endpoints that should be provided, with `${BASE_URL}` being the root path for both of them:

1. `https://${BASE_URL}/interview-templates` which allows the `GET` method and lists the available interview templates
2. `https://${BASE_URL}/interviews` which allows the `POST` method and creates an invitation for a candidate

> Workable provides an endpoint for receiving the results, see creating an interview for more info.

### Authentication

#### 1. Workable to Video Interview Provider

Every call from Workable towards the Video Interview Provider is authenticated using an access token contained in the Authentication HTTP Header. e.g. `Authorization: Bearer 78e3be68d98268509ea304a506ed6362d`. This token should be provided to the user from the Video Interview Provider and configured in the respective Workable account.

#### 2. Video Interview Provider to Workable

Regarding the requests originating from the Video Interview Provider, an access token will be generated and communicated upon the integration creation. This token should be included in the Authorization Header as well.

> The Bearer token is the standard authorization scheme used in [OAuth 2](https://tools.ietf.org/html/rfc6750)

## Listing available interview templates

Workable needs access in the available/configured interview templates; an authenticated `GET` is triggered towards the Video Interview Provider to fetch them. The endpoint should be formatted as `https://${BASE_URL}/interview-templates` and the response should be a JSON document with an array of interview templates. Each interview template is described through identification and name.

## Response

```json
{
  "interview_templates": [
    {
      "id": "1",
      "name": "Aptitude Interview"
    },
    {
      "id": "2",
      "name": "Java Interview"
    }
  ]
}
```

> One interview template per job can be selected. See below where the identification becomes handy.

## Creating an interview

Workable provides users with the ability to create an interview for a candidate on demand. If the action is called, Workable will `POST` the Video Interview Provider on `https://${BASE_URL}/interviews` with a payload that looks as follows:

```json
{
  "interview_template_id": "12345",
  "job_id": "6789",
  "job_title": "Operations Manager",
  "callback_url": "https://groove-tech.workable.com/interviews/8823119",
  "candidate": {
    "first_name": "Lakita",
    "last_name": "Marrero",
    "phone": "(785)991-6256",
    "email": "lakita_marrero@gmail.com",
  },
  "preferences": {
    "key": "value"
  }
}
```

- `interview_template_id`: The identification provided in the previous step
- `job_id`: (Optional) The job identified in the list jobs step
- `job_title`: The job that the candidate applied to. Can be contained in the invitation email.
- `callback_url`: The URL in which the Video Interview Provider should publish the results (see below)
- `candidate`: Candidate info. Can be used in the invitation email.
- `preferences`: This field can be used to pass custom values to the Video Interview Provider

> The Video Interview Provider should respond with a `201` status and an identifier for the created interview.
>
> ```json
> { "interview_id": "2044922" }
> ```

## Results collection

### 1. Publishing the Results to Workable

There are 4 statuses for an interview. The initial status is `pending` and then the interview can be `completed`, `rejected` or `expired`. The status depends on the actions of the candidate regarding the interview. Whenever the status changes, the Video Interview Provider should publish the new status to Workable using `PUT` on the `callback_url` provided in the interview creation step.

> When the status is completed, the request should include the interview results.

### 2. Publishing the Results on an API

Another alternative is for Workable to poll the endpoint `https://${BASE_URL}/interviews/:id` with the interview identifier returned in the interview creation step. This method however is suboptimal since it requires more than one requests until the results are finally fetched. Moreover, a failsafe mechanism should be created in case the invitation was rejected by the candidate.

In both cases the payload provided by the Video Interview Provider should be as follows:

```json
{
  "results_url": "https://acme.com/interviews/2044922",
  "status": "completed",
  "interview": {
    "score": "78",
    "grade": "excelled",
    "summary": "This candidate is an excellent prospect.",
    "details": {
        "behavior": {
          "Influence": 97,
          "conscientiousness": 76
        },
        "mental_skills":  {
          "Problem Solving": 82,
          "Aptitude": 91
        }
    },
    "duration": "01:01:17"
  },
  "attachments": [
    {
      "description": "Interview Report",
      "url": "https://acme.com/interviews/2044922/report.pdf"
    }
  ]
}
```

#### Mandatory fields

- `status`: This can take any of the values `completed`, `declined` or `expired`
- `results_url`: A link to the fully fledged report on the Provider's site (Mandatory only when `status` is `completed`

#### Optional fields

- `grade`: This is the final conclusion of the interview, it can take any of the values `failed`, `passed` or `excelled`. This is respectively mapped to `no`, `yes` and `definitely yes` in Workable evaluation system.
- `interview`:
  - `score`: An overall score, preferably a percentage
  - `summary`: Small description/evaluation of the interview
  - `details`: This can be used to provide a deeper analysis on the candidate's results. It's a JSON with a maximum of two levels nested objects and is presented to the user with minimum formatting, so keys should be descriptive and readable. The structure should follow the `key: value` format, no arrays should be included and a first level value may be consisted of more objects itself. Any values holding dates should conform to ISO 8601.
  - `duration`: How long did it take the candidate to complete the interview, if available
- `attachments`: Currently only supporting PDF. A results report of the interview along with a description, if available. The URL should be publicly accessible.

## Errors

The endpoints of the Video Interview Provider should handle request errors with a status code followed by a readable message. The description message should be short yet verbose enough to facilitate ease of troubleshooting.

|       Type      | Status | Example messages                         |
| :-------------: | :----: | ---------------------------------------- |
|  Authentication |  `401` | _Missing Token_                          |
|  Authentication |  `401` | _Invalid Token_                          |
| Invalid Request |  `400` | _Invalid JSON_                           |
| Invalid Request |  `400` | _Invalid field: name should be a string_ |
| Invalid Request |  `422` | _Missing field: name should be provided_ |
|     Conflict    |  `409` | _Entity is already updated_              |

> A valid response on an Error would be
>
> ```json
> { "status": 401, "message": "Invalid Token" }
> ```

### 3. Retrieving a shared link

This is an optional `GET` endpoint to be implemented by the Video Interview Provider. This endpoint serves interview links, in case when the system supports sharing public links. The URL should look like `https://${BASE_URL}/interviews/:id/shared-link` and the `interview-id` should be the one returned from the interview creation call.

## Response

```json
{
  "url": "https://acme.com/interviews/2044922/link",
  "ttl": "120",
  "ttl_units": "minutes"
}
```

- `url`: A link to the public shared report on the Provider's site
- `ttl`: (Optional) The time this link will be available. If this is not set, the link is assumed to be permanent.
- `ttl_units`: The units used for measuring the TTL. Currently supported values: `minutes`, `days` and `views`.


================================================================================

# Background Check Providers

## How it works

The first step is for Workable and the Background Check Provider to be authenticated. Then, the user can select one from the available/configured packages from the Provider and push a candidate's information over to create a new background check request. The provider requests from candidate to consent or reject the background check and the provider informs the user about the status. When the candidate gives consent and the background check is completed, the Provider should inform Workable about the results.

![](https://files.readme.io/04d438b-bg_ckecks.png "bg_ckecks.png")

There are 2 endpoints that should be provided, with `${BASE_URL}` being the root path for both of them:

1. `https://${BASE_URL}/packages` which allows the `GET` method and lists the available types of checks (packages).
2. `https://${BASE_URL}/checks` which allows the `POST` method and creates a background check request for a candidate

> Workable provides an endpoint for receiving the results, see creating a check for more info.

### Authentication

#### 1. Workable to Background Check Provider

Every call from Workable towards the Background Check Provider is authenticated using an access token contained in the Authentication HTTP Header. e.g. `Authorization: Bearer 78e3be68d98268509ea304a506ed6362d`. This token should be provided to the user from the Background Check Provider and configured in the respective Workable account.

#### 2. Background Check Provider to Workable

Regarding the requests originating from the Background Check Provider, an access token will be generated and communicated upon the integration creation. This token should be included in the Authorization Header as well.

> The Bearer token is the standard authorization scheme used in [OAuth 2](https://tools.ietf.org/html/rfc6750)

## Listing available packages

Workable needs access to the available/configured packages; an authenticated `GET` is triggered towards the Background Check Provider to fetch them. The endpoint should be formatted as `https://${BASE_URL}/packages` and the response should be a JSON document with an array of packages. Each package is described through identification and name.

## Response

```json
{
  "packages": [
    {
      "id": 1,
      "name": "Criminal Pro"
    },
    {
      "id": 2,
      "name": "Motor Vehicle Standard"
    }
  ]
}
```

## Create a Background Check

Workable provides users with the ability to create a background check request for a candidate on demand. If the action is called, Workable will `POST` the Background Check Provider on `https://${BASE_URL}/checks` with a payload that looks as follows:

```json
{
  "package_id": "12345",
  "job_title": "Operations Manager",
  "callback_url": "https://groove-tech.workable.com/checks/8823119",
  "candidate": {
    "first_name": "Lakita",
    "last_name": "Marrero",
    "phone": "(785)991-6256",
    "email": "lakita_marrero@gmail.com",
  },
  "preferences": {
    "key": "value"
  }
}
```

- `package_id`: The identification provided in the previous step
- `job_title`: The job that the candidate applied to. Can be contained in the request email.
- `callback_url`: The URL in which the Background Check Provider should publish the results (see below)
- `candidate`: Candidate info. Can be used in the request email.
- `preferences`: This field can be used to pass custom values to the Background Check Provider.

> The Background Check Provider should respond with a `201` status and an identifier for the created background check.
>
> ```json
> { "background_check_id": "2044922" }
> ```

## Results collection

### 1. Publishing the Results to Workable

There are 5 statuses for a background check request. The initial status is `pending` and then the background check can be `consented`, `completed`, `rejected` or `expired`. The status depends on the actions of the candidate regarding the background check request. Whenever the status changes, the Background Check Provider should publish the new status to Workable using `PUT` on the `callback_url` provided in the background check creation step.

> When the status is completed, the request should include the background check results.

### 2. Publishing the Results on an API

Another alternative is for Workable to poll the endpoint `https://${BASE_URL}/checks/:id` with the check identifier returned in the check creation step. This method however is suboptimal since it requires more than one requests until the results are finally fetched. Moreover, a failsafe mechanism should be created in case the request was rejected by the candidate.

In both cases the payload provided by the Background Check Provider should be as follows:

```json
{
  "results_url": "https://acme.com/checks/2044922",
  "status": "completed",
  "check": {
    "overall_status": "consider"
    "result": [
        {
          "name": "motor_vehicle_report",
          "status": "clear"
        },
       {
          "name": "education_verification",
          "status": "consider"
        }
    ]
  },
  "attachments": [
    {
      "description": "Background Check Report",
      "url": "https://acme.com/checks/2044922/report.pdf"
    }
  ]
}
```

#### Mandatory fields

- `status`: This can take any of the values `completed`, `rejected` or `expired`
- `results_url`: A link to the fully fledged report on the Provider's site (Mandatory only when `status` is `completed`)

#### Optional fields

- `check`:
  - `overall_status`: The final result of the report, generally if one of the subreports has status `consider` then the overall status should be `consider` too.
  - `result`: This can be used to provide a deeper analysis on the candidate's results. It's a JSON with one level nested objects and is presented to the user with minimum formatting, so keys should be descriptive and readable. The structure should follow the `key: value` format. Any values holding dates should conform to ISO 8601.
- `attachments`: Currently only supporting PDF. A results report of the background check along with a description, if available. The URL should be publicly accessible.

## Errors

The endpoints of the Background Check Provider should handle request errors with a status code followed by a readable message. The description message should be short yet verbose enough to facilitate ease of troubleshooting.

|       Type      | Status | Example messages                         |
| :-------------: | :----: | ---------------------------------------- |
|  Authentication |  `401` | _Missing Token_                          |
|  Authentication |  `401` | _Invalid Token_                          |
| Invalid Request |  `400` | _Invalid JSON_                           |
| Invalid Request |  `400` | _Invalid field: name should be a string_ |
| Invalid Request |  `422` | _Missing field: name should be provided_ |
|     Conflict    |  `409` | _Entity is already updated_              |

> A valid response on an Error would be
>
> ```json
> { "status": 401, "message": "Invalid Token" }
> ```

### 3. Retrieving a shared link

This is an optional `GET` endpoint to be implemented by the Background Check Provider. This endpoint serves background check links, in case when the system supports sharing public links. The URL should look like `https://${BASE_URL}/checks/:id/shared-link` and the `check-id` should be the one returned from the background check creation call.

## Response

```json
{
  "url": "https://acme.com/checks/2044922/link",
  "ttl": "120",
  "ttl_units": "minutes"
}
```

- `url`: A link to the public shared report on the Provider's site
- `ttl`: (Optional) The time this link will be available. If this is not set, the link is assumed to be permanent.
- `ttl_units`: The units used for measuring the TTL. Currently supported values: `minutes`, `days` and `views`.


================================================================================

# api/accounts/:subdomain

GET https://www.workable.com/accounts/:subdomain

Returns a collection of the public jobs for an account

## Results

The response has the following top-level keys

| key         | type     | description                    |
| :---------- | :------- | :----------------------------- |
| name        | `string` | The name of the account        |
| description | `string` | The description of the account |
| jobs        | `array`  | The public jobs of the account |

Each job has the following keys

| key             | type      | description                                   |
| :-------------- | :-------- | :-------------------------------------------- |
| title           | `string`  | The job title                                 |
| code            | `string`  | The job code                                  |
| shortcode       | `string`  | Job code as defined in editor                 |
| country         | `string`  | The country name as defined in job editor     |
| state           | `string`  | The geographical state this job is located at |
| city            | `string`  | The city as defined in job editor             |
| department      | `string`  | The department as defined in job editor       |
| telecommuting   | `boolean` | Indicates if this is a remote/telecommute job |
| published_on    | `date`    | The publication date of the job               |
| url             | `string`  | URL to the application form                   |
| application_url | `string`  | URL to the job page                           |
| shortlink       | `string`  | short URL to the job page                     |
| created_at      | `date`    | The timestamp the job created                 |
| description     | `string`  | The job description                           |
| employment_type | `string`  | The employment type of the job                |
| industry        | `string`  | The job's industry                            |
| function        | `string`  | The job's function                            |
| experience      | `string`  | The experience required for the job           |
| education       | `string`  | The education level required for the job      |


## Request

### Path Params
- `subdomain` (required string)

### Query Params
- `details` (boolean): Includes description field for jobs

### Request Examples
```
curl -X GETv'https://www.workable.com/api/accounts/groove-tech?details=true'
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "examples": [
        "Groove Tech"
      ]
    },
    "description": {
      "type": "string",
      "examples": [
        "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>"
      ]
    },
    "jobs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "examples": [
              "Finance Manager"
            ]
          },
          "code": {
            "type": "string",
            "examples": [
              "UK/1/FM"
            ]
          },
          "shortcode": {
            "type": "string",
            "examples": [
              "GROOV006"
            ]
          },
          "country": {
            "type": "string",
            "examples": [
              "United Kingdom"
            ]
          },
          "state": {
            "type": "string",
            "examples": [
              "London"
            ]
          },
          "city": {
            "type": "string",
            "examples": [
              "London"
            ]
          },
          "department": {
            "type": "string",
            "examples": [
              "Finance"
            ]
          },
          "telecommuting": {
            "type": "boolean",
            "default": true,
            "examples": [
              false
            ]
          },
          "published_on": {
            "type": "string",
            "examples": [
              "2019-04-07"
            ]
          },
          "url": {
            "type": "string",
            "examples": [
              "https://groove-tech.workable.com/jobs/724378555"
            ]
          },
          "application_url": {
            "type": "string",
            "examples": [
              "https://groove-tech.workable.com/jobs/724378555/candidates/new"
            ]
          },
          "shortlink": {
            "type": "string",
            "examples": [
              "https://groove-tech.workable.com/j/GROOV006"
            ]
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2019-04-07"
            ]
          },
          "description": {
            "type": "string",
            "examples": [
              " <p>We are looking for an experienced Finance Manager to undertake all aspects of financial management, including corporate accounting, regulatory and financial reporting, budget and forecasts preparation, as well as development of internal control policies and procedures.</p> <p>Responsibilities:<ul> <li>Manage all accounting operations including Billing, A/R, A/P, GL and Counsel, Cost Accounting, Inventory Accounting and Revenue Recognition</li> <li>Coordinate and direct the preparation of the budget and financial forecasts and report variances</li> <li>Prepare and publish timely monthly financial statementsCoordinate the preparation of regulatory reporting</li> <li>Research technical accounting issues for compliance</li> <li>Support month-end and year-end close process</li> <li>Ensure quality control over financial transactions and financial reporting</li> <li>Manage and comply with local, state, and federal government reporting requirements and tax filings</li> <li>Develop and document business processes and accounting policies to maintain and strengthen internal controls</li> </ul></p><p><strong>Requirements</strong></p><ul> <li>3+ years of experience as a Manager</li> <li>5+ years of overall combined accounting and finance experience</li> <li>Advanced degree in Accounting</li> <li>CPA or CMA preferred</li> <li>Thorough knowledge of accounting principles and procedures</li> <li>Experience with creating financial statements</li> <li>Experience with general ledger functions and the month-end/year end close process</li> <li>Excellent accounting software user and administration skills</li> </ul><p><strong>Benefits</strong></p><ul>\n <li>Great opportunities for career development</li>\r\n <li>All your equipment provided including a laptop</li>\r\n <li>Increasing vacation days with each year of employment</li>\r\n </ul>"
            ]
          },
          "employment_type": {
            "type": "string",
            "examples": [
              "Full-time"
            ]
          },
          "industry": {
            "type": "string",
            "examples": [
              "Business Supplies and <equipment></equipment>"
            ]
          },
          "function": {
            "type": "string",
            "examples": [
              "Finance"
            ]
          },
          "experience": {
            "type": "string",
            "examples": [
              "Mid-senior Level"
            ]
          },
          "education": {
            "type": "string",
            "examples": [
              "Bachelor's Degree"
            ]
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "89b67dac55baf"
  }
}

### Response Examples
```
{
  "name": "Groove Tech",
  "description": "<p>We‚Äôve all spent tons of hours trying to book a trip! Well, our guys finally got tired of going through this frustrating process and passionately decided to do something about it: To change the traveller‚Äôs experience. Four years later, we stick to that idea by daily plotting the traveling revolution.</p> <p>Like busy little bees, all 98 of us, customise our user-friendly software and innovative services to match leisure and business travellers needs throughout the entire journey. We create innovative and top notch travel products for a simple reason: You deserve it.</p> <p>Whether it‚Äôs about booking tickets or hotels, whatever the budget, us travel lovers are dedicated to deliver you a lifetime experience. How? By empowering you to easily discover, book and have fun at the whole world!</p> <p>We are innovators, idealists and perfectionists. We love raising the bar to delight and amaze our customers and that‚Äôs exactly why working with us requires a lot of you. But it‚Äôs a lot more than that. We‚Äôll brightly reward you. We‚Äôll develop your career. We‚Äôll keep you excited! In other words we promise being the most exciting place for you to work at.</p> <p>We are growing as crazy and we need you industry experts and passionate individuals to do things that matter and take us off! Come aboard ready to share, learn and grow.</p>",
  "jobs": [
    {
      "title": "Finance Manager",
      "code": "UK/1/FM",
      "shortcode": "GROOV006",
      "country": "United Kingdom",
      "state": "London",
      "city": "London",
      "department": "Finance",
      "telecommuting": false,
      "published_on": "2019-04-07",
      "url": "https://groove-tech.workable.com/jobs/724378555",
      "application_url": "https://groove-tech.workable.com/jobs/724378555/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV006",
      "created_at": "2019-04-07",
      "description": " <p>We are looking for an experienced Finance Manager to undertake all aspects of financial management, including corporate accounting, regulatory and financial reporting, budget and forecasts preparation, as well as development of internal control policies and procedures.</p> <p>Responsibilities:<ul> <li>Manage all accounting operations including Billing, A/R, A/P, GL and Counsel, Cost Accounting, Inventory Accounting and Revenue Recognition</li> <li>Coordinate and direct the preparation of the budget and financial forecasts and report variances</li> <li>Prepare and publish timely monthly financial statementsCoordinate the preparation of regulatory reporting</li> <li>Research technical accounting issues for compliance</li> <li>Support month-end and year-end close process</li> <li>Ensure quality control over financial transactions and financial reporting</li> <li>Manage and comply with local, state, and federal government reporting requirements and tax filings</li> <li>Develop and document business processes and accounting policies to maintain and strengthen internal controls</li> </ul></p><p><strong>Requirements</strong></p><ul> <li>3+ years of experience as a Manager</li> <li>5+ years of overall combined accounting and finance experience</li> <li>Advanced degree in Accounting</li> <li>CPA or CMA preferred</li> <li>Thorough knowledge of accounting principles and procedures</li> <li>Experience with creating financial statements</li> <li>Experience with general ledger functions and the month-end/year end close process</li> <li>Excellent accounting software user and administration skills</li> </ul><p><strong>Benefits</strong></p><ul>\n <li>Great opportunities for career development</li>\r\n <li>All your equipment provided including a laptop</li>\r\n <li>Increasing vacation days with each year of employment</li>\r\n </ul>",
      "employment_type": "Full-time",
      "industry": "Business Supplies and <equipment></equipment>",
      "function": "Finance",
      "experience": "Mid-senior Level",
      "education": "Bachelor's Degree"
    },
    {
      "title": "Head of Account Management",
      "code": "US/4/HAM",
      "shortcode": "GROOV004",
      "country": "United States",
      "state": "New York",
      "city": "New York",
      "department": "Sales",
      "telecommuting": false,
      "published_on": "2019-04-07",
      "url": "https://groove-tech.workable.com/jobs/887982564",
      "application_url": "https://groove-tech.workable.com/jobs/887982564/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV004",
      "created_at": "2019-04-07",
      "description": " <p>Account management is a key discipline at our company. Our team of account managers are our front line interacting on a daily basis to train, assist, and answer questions.</p> <p>As we grow we're looking for someone to lead our account management team, help us build out the department/discipline and create a process that will scale as the business grows. If this sounds like you (or someone you know), please let us know. Below is more detail on what we're looking for.</p><p><strong>Requirements</strong></p><ul> <li>Love customer service.</li> <li>Great person-to-person skills</li> <li>Deep understanding of technology </li> <li>Process oriented</li> <li>Hiring experience</li> <li>Salesforce experience</li> <li>Relevant industry experience</li> </ul><p><strong>Benefits</strong></p><ul>\n <li>Great opportunities for career development</li>\r\n <li>All your equipment provided including a laptop</li>\r\n <li>Increasing vacation days with each year of employment</li>\r\n </ul>",
      "employment_type": "Full-time",
      "industry": "Business Supplies and equipment",
      "function": "Sales",
      "experience": "Director",
      "education": "Bachelor's Degree"
    },
    {
      "title": "Office Manager",
      "code": "US/4/OM",
      "shortcode": "GROOV005",
      "country": "United States",
      "state": "Illinois",
      "city": "Chicago",
      "department": "Administration",
      "telecommuting": false,
      "published_on": "2019-04-07",
      "url": "https://groove-tech.workable.com/jobs/376844767",
      "application_url": "https://groove-tech.workable.com/jobs/376844767/candidates/new",
      "shortlink": "https://groove-tech.workable.com/j/GROOV005",
      "created_at": "2019-04-07",
      "description": " <p>We are looking for an Office Manager to organize and coordinate office operations and procedures, in order to ensure organizational effectiveness, efficiency and safety.The ideal candidate will be experienced in handling a wide range of administrative and executive support related tasks and will be able to work independently with little or no supervision. This person must be exceedingly well organized, flexible and enjoy the administrative challenges of supporting an office of diverse people.</p> <p>Responsibilities:<ul> <li>Serve as the point person for maintenance, mailing, shopping, supplies, equipment, bills, and errands</li> <li>Organize and schedule meetings and appointments</li> <li>Partner with HR to maintain office policies as necessary</li> <li>Organize office operations and proceduresCoordinate with IT department on all office equipment</li> <li>Manage relationships with vendors, service providers, and landlord, ensuring that all items are invoiced and paid on time</li> <li>Manage contract and price negotiations with office vendors, service providers and office lease</li> <li>Manage office G&A budget, ensure accurate and timely reporting</li> <li>Provide general support to visitors</li> </ul></p><p><strong>Requirements</strong></p><ul> <li>4+ years of office management, administrative or assistant experience</li> <li>Knowledge of office management systems and procedures</li> <li>Excellent time management skills and ability to multi-task and prioritize work</li> <li>Attention to detail and problem solving skills</li> <li>Excellent written and verbal communication skills</li> <li>Strong organizational and planning skills</li> <li>Proficiency in MS Office</li> </ul><p><strong>Benefits</strong></p><ul>\n <li>Great opportunities for career development</li>\r\n <li>All your equipment provided including a laptop</li>\r\n <li>Increasing vacation days with each year of employment</li>\r\n </ul>",
      "employment_type": "Full-time",
      "industry": "Business Supplies and equipment",
      "function": "Administrative",
      "experience": "Associate",
      "education": "High School or equivalent"
    }
  ]
}
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "not-found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "ef116b34e28cf"
  }
}

### Response Examples
```
{
  "error": "not-found"
}
```

================================================================================

# api/accounts/:subdomain/locations

GET https://www.workable.com/accounts/:subdomain/locations

Returns a collection of the locations of the public jobs of the specified account

Each location has the following keys

| key   | type     | description                              |
| :---- | :------- | :--------------------------------------- |
| code  | `string` | The 2-letter code of country             |
| name  | `string` | The name of the country                  |
| count | `number` | The count of public jobs in that country |
| url   | `string` |                                          |


## Request

### Path Params
- `subdomain` (required string)

### Request Examples
```
curl -X GET 'https://www.workable.com/api/accounts/groove-tech/locations'
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "code": {
        "type": "string",
        "examples": [
          "GB"
        ]
      },
      "name": {
        "type": "string",
        "examples": [
          "United Kingdom"
        ]
      },
      "count": {
        "type": "integer",
        "default": 0,
        "examples": [
          1
        ]
      },
      "url": {
        "type": "string",
        "examples": [
          "https://www.workable.com/api/accounts/553604990?location=GB"
        ]
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "45d8facbdc677"
  }
}

### Response Examples
```
[
    {
        "code": "GB",
        "name": "United Kingdom",
        "count": 1,
        "url": "https://www.workable.com/api/accounts/553604990?location=GB"
    },
    {
        "code": "US",
        "name": "United States",
        "count": 2,
        "url": "http://www.workable.com/api/accounts/553604990?location=US"
    }
]
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "not-found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "5377934d2c3e6"
  }
}

### Response Examples
```
{
  "error": "not-found"
}
```

================================================================================

# api/accounts/:subdomain/departments

GET https://www.workable.com/accounts/:subdomain/departments

Returns a collection of the departments of the public jobs of the specified account

Each department contains the following keys

| key   | type     | description                                  |
| :---- | :------- | :------------------------------------------- |
| name  | `string` | The name of the department                   |
| count | `number` | The number of public jobs in that department |
| url   | `string` |                                              |


## Request

### Path Params
- `subdomain` (required string)

### Request Examples
```
curl -X GET 'https://www.workable.com/api/accounts/groove-tech/departments'
```

## 200 Response
200

### Response Body (application/json)
{
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "examples": [
          "Administration"
        ]
      },
      "count": {
        "type": "integer",
        "default": 0,
        "examples": [
          1
        ]
      },
      "url": {
        "type": "string",
        "examples": [
          "https://workable.com/api/accounts/553604990?department=Administration"
        ]
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "bd19c53f258b9"
  }
}

### Response Examples
```
[
  {
    "name": "Administration",
    "count": 1,
    "url": "https://workable.com/api/accounts/553604990?department=Administration"
  },
  {
    "name": "Finance",
    "count": 1,
    "url": "https://workable.com/api/accounts/553604990?department=Finance"
  },
  {
    "name": "Sales",
    "count": 1,
    "url": "https://workable.com/api/accounts/553604990?department=Sales"
  }
]
```

## 404 Response
404

### Response Body (application/json)
{
  "type": "object",
  "properties": {
    "error": {
      "type": "string",
      "examples": [
        "not-found"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "x-stoplight": {
    "id": "6b779259485cb"
  }
}

### Response Examples
```
{
  "error": "not-found"
}
```

================================================================================

# API Support

For any questions or support required for the API, feel free to [Contact us](https://www.workable.com/contact).
